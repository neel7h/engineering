{
    "id": 1020534,
    "name": "Avoid using a web service with AngularJS $resource inside a loop",
    "href": "AIP/quality-rules/1020534",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "When designing web service to get/post/put data, you want to make sure that you minimize the number of calls between the client application and web service server. This rule will check the official AngularJS syntax $resources, to do call to web service.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When designing web service to get/put/post data, you want to make sure that you minimize the number of calls between the client application and web service server. By minimizing the number of calls, you improve application speed, reduce communications overhead (why send three request when you can do it by one), and reduce network traffic.",
    "remediation": "Try to create a process queue that will manage all the requests with a limited number of concurrents requests. When a request callback has been managed a new request could be fired.",
    "remediationSample": "No loop.",
    "sample": ".factory('ScenarioReviews', function ($resource) {\n  return $resource('resources/scenarios/:id/reviews',  {'id':'@id'}, {\n    'query': { method: 'GET', isArray: false },\n    'update': {method:'PUT', isArray: false },\n    'notify': {method:'PUT', params: {notify: true}, isArray: false }\n  });  \n.controller(\"PriceformListController\",\n  [\"$scope\", \"Scenario\", \"$window\",\n    function($scope, Scenario, $window) {\n     while (...) {\n       ScenarioReviews.update(\n         {id:$scope.scenario.techId, validate:$scope.validatedScenario}, // Parameters\n         $scope.scenario, // Data\n...\n    }\n}]);",
    "total": "Number of angular artifacts using $resource",
    "alternativeName": "Avoid using a web service with AngularJS $resource inside a loop",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops",
            "weight": 5,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCPEM-PRF-8",
            "name": "Control Elements Requiring Significant Resource Element within Control Flow Loop Block",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
