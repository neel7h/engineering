{
    "id": 1020450,
    "name": "Ensure catching Javascript error in React components",
    "href": "AIP/quality-rules/1020450",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule expects that you have implemented an error boundary catch method to catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Ensure that ReactJS component have implemented a componentDidCatch method in order to check you will not miss any problem that occurred in your application and you will give the information to the user .",
    "reference": "CISQ OMG",
    "remediation": "Check that all the callback error are checked and used.",
    "remediationSample": "class MyComponentWithErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    // Display fallback UI\n    this.setState({ hasError: true });\n    // You can also log the error to an error reporting service\n    logErrorToMyService(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}",
    "sample": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }",
    "total": "Number of ReactJS components",
    "alternativeName": "Ensure catching Javascript error in React components",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-396",
            "name": "Declaration of Catch for Generic Exception",
            "url": null,
            "description": null
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-397",
            "name": "Declaration of Throws for Generic Exception",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
