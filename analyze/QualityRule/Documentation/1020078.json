{
    "id": 1020078,
    "name": "Avoid using setTimeout()",
    "href": "AIP/quality-rules/1020078",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "The setTimeout() function is used to run text as code. In almost all cases, it should not be necessary to use it. Because it allows arbitrary code to be run, it also represents a security problem.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call.",
    "reference": "http://cwe.mitre.org/data/definitions/95.html \nhttps://www.owasp.org/index.php/Top_10_2013-A1-Injection \nhttps://www.w3schools.com/js/js_best_practices.asp",
    "remediation": "Do not use setTimeout with function passed as a string value.",
    "remediationSample": "function delayedFunction() { \nalert(\"This is a delay\"); \n} \n\n// safe - direct call of the function \nwindow.setTimeout(delayedFunction, 100);",
    "sample": "function delayedFunction() { \nalert(\"This is a delay\"); \n} \n\n// unsafe - call to code that will be evaluated before getting the function \nwindow.setTimeout(\"delayedFunction\", 100);",
    "total": "Number of Javascript Functions using setTimeout",
    "alternativeName": "Avoid using setTimeout()",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-95",
            "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
            "url": null,
            "description": null
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70261",
            "name": "The application must protect from command injection.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        10.0,
        70.0,
        90.0,
        99.0
    ]
}
