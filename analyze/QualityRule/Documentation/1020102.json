{
    "id": 1020102,
    "name": "Always use JSON.parse & JSON.stringify with try/catch block (Javascript)",
    "href": "AIP/quality-rules/1020102",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "As JSON.parse and JSON.stringify will happen synchronously, we can surround it with a try-catch block. Please note, that you can only do this with synchronous codeblocks, but it won't work for callbacks.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Ensure that each web service callback is going to be properly checked in order to make sure you will not miss any problem that occurred in your application and you will give the information to the user.",
    "reference": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse",
    "remediation": "Always use JSON.parse in try/catch block",
    "remediationSample": "function readJSON(filePath, callback) {\n\n  fs.readFile(filePath, function(err, data) {\n\n    var parsedJson;\n\n    // Handle error\n    if (err) {\n      return callback(err);\n    }\n\n    // Parse JSON\n    try {\n      parsedJson = JSON.parse(data);\n    } catch (exception) {\n      return callback(exception);\n    }\n\n    // Everything is ok\n    return callback(null, parsedJson);\n  });\n}",
    "sample": "function readJSON(filePath, callback) {\n\n  fs.readFile(filePath, function(err, data) {\n\n    var parsedJson;\n\n    // Handle error\n    if (err) {\n      return callback(err);\n    }\n\n    // Parse JSON\n    parsedJson = JSON.parse(data);\n\n    return (parsedJson !== 'undefined');\n  });\n}",
    "total": "Number of javascript function using JSON.parse or JSON.stringify",
    "alternativeName": "Always use JSON.parse & JSON.stringify with try/catch block (Javascript)",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-390",
            "name": "Detection of Error Condition Without Action",
            "url": null,
            "description": null
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
