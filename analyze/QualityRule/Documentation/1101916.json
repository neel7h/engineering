{
    "id": 1101916,
    "name": "When using compound indexes, avoid having different indexes",
    "href": "AIP/quality-rules/1101916",
    "critical": false,
    "maxWeight": 6,
    "associatedValueName": "Number of violation occurrences",
    "description": "This report lists all artifacts with compound indexes and having different index ordering in collection access.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When using compound indexes, avoid having different indexes. Indeed, Mongo DB give the compound index, when we have index on more than two column, it is always good to have the indexes put the same way,it is highly recommended to have the indexes, either both positives(ascending) or either both negatives(descending).",
    "remediation": "Use instead indexes, either both positives(ascending) or either both negatives(descending)",
    "remediationSample": "MongoClient conn_str = new MongoClient(\"localhost\", 27017);\n\t\t\n\t\tDB db = conn_str.getDB(\"database\");\n\t\t\n\t\tDBCollection docColl = db.getCollection(\"document\");\n\t\t\n\t\tdocColl.createIndex(new BasicDBObject(\"filed_1\",1), \n\t\t\n\t\tnew BasicDBObject(\"_id\", 1), \n\t\t\n\t\tnew BasicDBObject(\"filed_2\", 1));",
    "sample": "MongoClient conn_str = new MongoClient(\"localhost\", 27017);\n\t\t\n\t\tDB db = conn_str.getDB(\"database\");\n\t\t\n\t\tDBCollection docColl = db.getCollection(\"document\");\n\t\t\n\t\tdocColl.createIndex(new BasicDBObject(\"filed_1\",1),\n\t\t\n\t\tnew BasicDBObject(\"_id\", -1),\n\t\t\n\t\tnew BasicDBObject(\"filed_2\", -1));",
    "total": "Number of MongoDB collection",
    "alternativeName": "Ensure that when using compound indexes in MongoDb, have indexed as either both positive or both negative",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61024,
            "name": "Programming Practices - Structuredness",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
