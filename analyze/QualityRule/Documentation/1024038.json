{
    "id": 1024038,
    "name": "Avoid processing Google Sign In Client without catching error",
    "href": "AIP/quality-rules/1024038",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Number of violation occurrences",
    "description": "Using GoogleSignIn API is very popular to enable user authentication in Android applications. Retrieving GoogleSignInAccount must be managed properly to avoid allowing access rights to the end user.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Authentication failures may expose underlying authorization failures as well. When authentication controls fail, the solution is unable to verify the user's identity",
    "reference": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M4-Insecure_Authentication \nhttps://developers.google.com/identity/sign-in/android/",
    "remediation": "Ensure you have enclosed the GoogleSignInAccount account try/catch to check if account is set or not",
    "remediationSample": "private boolean setupClient(@NonNull SharedPreferences prefs) {\n    final GoogleSignInOptions signInOptions =\n            new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\n                    .requestScopes(Drive.SCOPE_APPFOLDER)\n                    .build();\n    final GoogleSignInClient signInClient = GoogleSignIn.getClient(mContext, signInOptions);\n    try {\n        final GoogleSignInAccount signInAccount = Tasks.await(signInClient.silentSignIn());\n\n        mClient = Drive.getDriveClient(mContext, signInAccount);\n        mResourceClient = Drive.getDriveResourceClient(mContext, signInAccount);\n\n        Log.d(TAG, \"Connection successful. sync: \" + mShouldSync + \" media: \" + mMediaMounted);\n\n        return true;\n    } catch(ExecutionException e) {\n        final ApiException result = (ApiException)e.getCause();\n        switch(result.getStatusCode()) {\n            case GoogleSignInStatusCodes.SIGN_IN_REQUIRED:\n            case GoogleSignInStatusCodes.INVALID_ACCOUNT:\n                Log.i(TAG, \"User not signed in. Disabling photo syncing.\");\n                prefs.edit().putBoolean(FlavordexApp.PREF_SYNC_PHOTOS, false).apply();\n                break;\n            case GoogleSignInStatusCodes.API_NOT_CONNECTED:\n            case GoogleSignInStatusCodes.NETWORK_ERROR:\n            case GoogleSignInStatusCodes.INTERNAL_ERROR:\n                Log.i(TAG, \"Google Drive service unavailable. Disabling photo syncing.\");\n                prefs.edit().putBoolean(FlavordexApp.PREF_SYNC_PHOTOS, false).apply();\n        }\n\n        Log.w(TAG, \"Connection failed! Reason: \" + result.getMessage());\n    } catch(InterruptedException ignored) {\n    }\n\n    return false;\n}",
    "sample": "private boolean setupClient(@NonNull SharedPreferences prefs) {\n    final GoogleSignInOptions signInOptions =\n            new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\n                    .requestScopes(Drive.SCOPE_APPFOLDER)\n                    .build();\n    final GoogleSignInClient signInClient = GoogleSignIn.getClient(mContext, signInOptions);\n    final GoogleSignInAccount signInAccount = Tasks.await(signInClient.silentSignIn());\n\n    if(signInAccount) {\n\n        Log.d(TAG, \"Connection successful. \");\n\n        return true;\n    } \n\n    Log.w(TAG, \"Connection failed!\");\n\n    return false;\n}",
    "total": "Number of Android artifacts",
    "alternativeName": "Ensure to enclose GoogleSignInAccount in a try catch block to check if the account is et or not",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-IA-9",
            "name": "Service Identification and Authentication",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "M4-2016",
            "name": "Insecure Authentication",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.10",
            "name": "Broken authentication and session management",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70391",
            "name": "The application must not be subject to error handling vulnerabilities.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
