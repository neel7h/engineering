<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<BlackBox name="jsse.jar" xmlns="http://tempuri.org/BlackBoxes.xsd">
    <Class mangling="sun.security.provider.Sun" extends="[ext]java.security.Provider" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.security.Provider"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.rsa.SunRsaSign" extends="[ext]java.security.Provider" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.security.Provider"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.AbstractKeyManagerWrapper" extends="[ext]javax.net.ssl.X509ExtendedKeyManager" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.X509ExtendedKeyManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(javax.net.ssl.X509KeyManager)" returnType="[ext]void"/>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.AbstractTrustManagerWrapper" extends="[ext]javax.net.ssl.X509ExtendedTrustManager" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.X509ExtendedTrustManager"/>
        <Implements mangling="[ext]javax.net.ssl.X509TrustManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(javax.net.ssl.X509TrustManager)" returnType="[ext]void"/>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="getAcceptedIssuers()" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.Alerts" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="alert_warning" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_fatal" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_close_notify" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_unexpected_message" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_bad_record_mac" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_decryption_failed" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_record_overflow" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_decompression_failure" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_handshake_failure" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_no_certificate" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_bad_certificate" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_unsupported_certificate" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_certificate_revoked" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_certificate_expired" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_certificate_unknown" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_illegal_parameter" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_unknown_ca" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_access_denied" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_decode_error" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_decrypt_error" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_export_restriction" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_protocol_version" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_insufficient_security" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_internal_error" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_user_canceled" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_no_renegotiation" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_unsupported_extension" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_certificate_unobtainable" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_unrecognized_name" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_bad_certificate_status_response" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_bad_certificate_hash_value" type="byte" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="alertDescription(byte)" isStatic="true" returnType="[ext]java.lang.String"/>
            <Method signature="getSSLException(byte,java.lang.String)" isStatic="true" returnType="[ext]javax.net.ssl.SSLException"/>
            <Method signature="getSSLException(byte,java.lang.Throwable,java.lang.String)" isStatic="true" returnType="[ext]javax.net.ssl.SSLException"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.AppInputStream" extends="[ext]java.io.InputStream" isGeneric="false">
        <Extends mangling="java.io.InputStream"/>
        <Fields>
            <Field name="r" type="sun.security.ssl.InputRecord"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.SSLSocketImpl)" returnType="[ext]void"/>
            <Method signature="available()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="read()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="read(byte[],int,int)" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="skip(long)" returnType="[ext]long" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="close()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.AppOutputStream" extends="[ext]java.io.OutputStream" isGeneric="false">
        <Extends mangling="java.io.OutputStream"/>
        <Fields>
            <Field name="r" type="sun.security.ssl.OutputRecord"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.SSLSocketImpl)" returnType="[ext]void"/>
            <Method signature="write(byte[],int,int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="write(int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="close()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.BaseSSLSocketImpl" extends="[ext]javax.net.ssl.SSLSocket" isGeneric="false">
        <Extends mangling="javax.net.ssl.SSLSocket"/>
        <Fields>
            <Field name="self" type="java.net.Socket" isFinal="true"/>
            <Field name="requireCloseNotify" type="boolean" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="+ctor(java.net.Socket)" returnType="[ext]void"/>
            <Method signature="getChannel()" returnType="[ext]java.nio.channels.SocketChannel" isFinal="true" visibility="public"/>
            <Method signature="bind(java.net.SocketAddress)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getLocalSocketAddress()" returnType="[ext]java.net.SocketAddress" visibility="public"/>
            <Method signature="getRemoteSocketAddress()" returnType="[ext]java.net.SocketAddress" visibility="public"/>
            <Method signature="connect(java.net.SocketAddress)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="isConnected()" returnType="[ext]boolean" isFinal="true" visibility="public"/>
            <Method signature="isBound()" returnType="[ext]boolean" isFinal="true" visibility="public"/>
            <Method signature="shutdownInput()" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="shutdownOutput()" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="isInputShutdown()" returnType="[ext]boolean" isFinal="true" visibility="public"/>
            <Method signature="isOutputShutdown()" returnType="[ext]boolean" isFinal="true" visibility="public"/>
            <Method signature="finalize()" returnType="[ext]void" isFinal="true" visibility="protected">
                <Throw mangling="java.lang.Throwable"/>
            </Method>
            <Method signature="getInetAddress()" returnType="[ext]java.net.InetAddress" isFinal="true" visibility="public"/>
            <Method signature="getLocalAddress()" returnType="[ext]java.net.InetAddress" isFinal="true" visibility="public"/>
            <Method signature="getPort()" returnType="[ext]int" isFinal="true" visibility="public"/>
            <Method signature="getLocalPort()" returnType="[ext]int" isFinal="true" visibility="public"/>
            <Method signature="setTcpNoDelay(boolean)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getTcpNoDelay()" returnType="[ext]boolean" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setSoLinger(boolean,int)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getSoLinger()" returnType="[ext]int" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="sendUrgentData(int)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setOOBInline(boolean)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getOOBInline()" returnType="[ext]boolean" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getSoTimeout()" returnType="[ext]int" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setSendBufferSize(int)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getSendBufferSize()" returnType="[ext]int" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setReceiveBufferSize(int)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getReceiveBufferSize()" returnType="[ext]int" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setKeepAlive(boolean)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getKeepAlive()" returnType="[ext]boolean" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setTrafficClass(int)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getTrafficClass()" returnType="[ext]int" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setReuseAddress(boolean)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getReuseAddress()" returnType="[ext]boolean" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setPerformancePreferences(int,int,int)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.ByteBufferInputStream" extends="[ext]java.io.InputStream" isGeneric="false">
        <Extends mangling="java.io.InputStream"/>
        <Fields>
            <Field name="bb" type="java.nio.ByteBuffer"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.nio.ByteBuffer)" returnType="[ext]void"/>
            <Method signature="read()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="read(byte[])" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="read(byte[],int,int)" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="skip(long)" returnType="[ext]long" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="available()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="close()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="mark(int)" returnType="[ext]void" visibility="public"/>
            <Method signature="reset()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="markSupported()" returnType="[ext]boolean" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.CipherBox" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="NULL" type="sun.security.ssl.CipherBox" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="newCipherBox(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite.BulkCipher,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec,java.security.SecureRandom,boolean)" isStatic="true" returnType="sun.security.ssl.CipherBox">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="encrypt(byte[],int,int)" returnType="[ext]int"/>
            <Method signature="encrypt(java.nio.ByteBuffer)" returnType="[ext]int"/>
            <Method signature="decrypt(byte[],int,int,int)" returnType="[ext]int">
                <Throw mangling="javax.crypto.BadPaddingException"/>
            </Method>
            <Method signature="decrypt(java.nio.ByteBuffer,int)" returnType="[ext]int">
                <Throw mangling="javax.crypto.BadPaddingException"/>
            </Method>
            <Method signature="dispose()" returnType="[ext]void"/>
            <Method signature="isCBCMode()" returnType="[ext]boolean"/>
            <Method signature="isNullCipher()" returnType="[ext]boolean"/>
            <Method signature="sanityCheck(int,int)" returnType="[ext]boolean"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.CipherSuite$BulkCipher" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="description" type="java.lang.String" isFinal="true"/>
            <Field name="transformation" type="java.lang.String" isFinal="true"/>
            <Field name="algorithm" type="java.lang.String" isFinal="true"/>
            <Field name="allowed" type="boolean" isFinal="true"/>
            <Field name="keySize" type="int" isFinal="true"/>
            <Field name="expandedKeySize" type="int" isFinal="true"/>
            <Field name="ivSize" type="int" isFinal="true"/>
            <Field name="exportable" type="boolean" isFinal="true"/>
            <Field name="isCBCMode" type="boolean" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.lang.String,int,int,int,boolean)" returnType="[ext]void"/>
            <Method signature="+ctor(java.lang.String,int,int,boolean)" returnType="[ext]void"/>
            <Method signature="newCipher(sun.security.ssl.ProtocolVersion,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec,java.security.SecureRandom,boolean)" returnType="sun.security.ssl.CipherBox">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="isAvailable()" returnType="[ext]boolean"/>
            <Method signature="clearAvailableCache()" isStatic="true" returnType="[ext]void"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.CipherSuite$KeyExchange" extends="[ext]java.lang.Enum" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Enum" genParams="sun.security.ssl.CipherSuite.KeyExchange"/>
        <Fields>
            <Field name="K_NULL" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_RSA" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_RSA_EXPORT" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_DH_RSA" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_DH_DSS" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_DHE_DSS" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_DHE_RSA" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_DH_ANON" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_ECDH_ECDSA" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_ECDH_RSA" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_ECDHE_ECDSA" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_ECDHE_RSA" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_ECDH_ANON" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_KRB5" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_KRB5_EXPORT" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_SCSV" type="sun.security.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="name" type="java.lang.String" isFinal="true"/>
            <Field name="allowed" type="boolean" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="values()" isStatic="true" returnType="[ext]sun.security.ssl.CipherSuite.KeyExchange[]" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="[ext]sun.security.ssl.CipherSuite.KeyExchange" visibility="public"/>
            <Method signature="isAvailable()" returnType="[ext]boolean"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.CipherSuite$MacAlg" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="name" type="java.lang.String" isFinal="true"/>
            <Field name="size" type="int" isFinal="true"/>
            <Field name="hashBlockSize" type="int" isFinal="true"/>
            <Field name="minimalPaddingSize" type="int" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.lang.String,int,int,int)" returnType="[ext]void"/>
            <Method signature="newMac(sun.security.ssl.ProtocolVersion,javax.crypto.SecretKey)" returnType="sun.security.ssl.MAC">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.CipherSuite$PRF" extends="[ext]java.lang.Enum" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Enum" genParams="sun.security.ssl.CipherSuite.PRF"/>
        <Fields>
            <Field name="P_NONE" type="sun.security.ssl.CipherSuite.PRF" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="P_SHA256" type="sun.security.ssl.CipherSuite.PRF" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="P_SHA384" type="sun.security.ssl.CipherSuite.PRF" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="P_SHA512" type="sun.security.ssl.CipherSuite.PRF" isStatic="true" isFinal="true" visibility="public"/>
        </Fields>
        <Methods>
            <Method signature="values()" isStatic="true" returnType="[ext]sun.security.ssl.CipherSuite.PRF[]" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="[ext]sun.security.ssl.CipherSuite.PRF" visibility="public"/>
            <Method signature="getPRFHashAlg()" returnType="[ext]java.lang.String"/>
            <Method signature="getPRFHashLength()" returnType="[ext]int"/>
            <Method signature="getPRFBlockSize()" returnType="[ext]int"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.CipherSuite" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]java.lang.Comparable"/>
        <Fields>
            <Field name="SUPPORTED_SUITES_PRIORITY" type="int" isStatic="true" isFinal="true"/>
            <Field name="DEFAULT_SUITES_PRIORITY" type="int" isStatic="true" isFinal="true"/>
            <Field name="DYNAMIC_AVAILABILITY" type="boolean" isStatic="true" isFinal="true"/>
            <Field name="name" type="java.lang.String" isFinal="true"/>
            <Field name="id" type="int" isFinal="true"/>
            <Field name="priority" type="int" isFinal="true"/>
            <Field name="keyExchange" type="sun.security.ssl.CipherSuite.KeyExchange" isFinal="true"/>
            <Field name="cipher" type="sun.security.ssl.CipherSuite.BulkCipher" isFinal="true"/>
            <Field name="macAlg" type="sun.security.ssl.CipherSuite.MacAlg" isFinal="true"/>
            <Field name="prfAlg" type="sun.security.ssl.CipherSuite.PRF" isFinal="true"/>
            <Field name="exportable" type="boolean" isFinal="true"/>
            <Field name="allowed" type="boolean" isFinal="true"/>
            <Field name="obsoleted" type="int" isFinal="true"/>
            <Field name="supported" type="int" isFinal="true"/>
            <Field name="B_NULL" type="sun.security.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true"/>
            <Field name="B_RC4_40" type="sun.security.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true"/>
            <Field name="B_RC2_40" type="sun.security.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true"/>
            <Field name="B_DES_40" type="sun.security.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true"/>
            <Field name="B_RC4_128" type="sun.security.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true"/>
            <Field name="B_DES" type="sun.security.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true"/>
            <Field name="B_3DES" type="sun.security.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true"/>
            <Field name="B_IDEA" type="sun.security.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true"/>
            <Field name="B_AES_128" type="sun.security.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true"/>
            <Field name="B_AES_256" type="sun.security.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true"/>
            <Field name="M_NULL" type="sun.security.ssl.CipherSuite.MacAlg" isStatic="true" isFinal="true"/>
            <Field name="M_MD5" type="sun.security.ssl.CipherSuite.MacAlg" isStatic="true" isFinal="true"/>
            <Field name="M_SHA" type="sun.security.ssl.CipherSuite.MacAlg" isStatic="true" isFinal="true"/>
            <Field name="M_SHA256" type="sun.security.ssl.CipherSuite.MacAlg" isStatic="true" isFinal="true"/>
            <Field name="M_SHA384" type="sun.security.ssl.CipherSuite.MacAlg" isStatic="true" isFinal="true"/>
            <Field name="C_NULL" type="sun.security.ssl.CipherSuite" isStatic="true" isFinal="true"/>
            <Field name="C_SCSV" type="sun.security.ssl.CipherSuite" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="isAvailable()" returnType="[ext]boolean"/>
            <Method signature="isNegotiable()" returnType="[ext]boolean"/>
            <Method signature="compareTo(java.lang.Object)" returnType="[ext]int" visibility="public"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="sun.security.ssl.CipherSuite"/>
            <Method signature="valueOf(int,int)" isStatic="true" returnType="sun.security.ssl.CipherSuite"/>
            <Method signature="allowedCipherSuites()" isStatic="true" returnType="[ext]java.util.Collection&lt;sun.security.ssl.CipherSuite&gt;"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.CipherSuiteList" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.util.Collection&lt;sun.security.ssl.CipherSuite&gt;)" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.CipherSuite)" returnType="[ext]void"/>
            <Method signature="+ctor(java.lang.String[])" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="contains(sun.security.ssl.CipherSuite)" returnType="[ext]boolean"/>
            <Method signature="containsEC()" returnType="[ext]boolean"/>
            <Method signature="iterator()" returnType="[ext]java.util.Iterator&lt;sun.security.ssl.CipherSuite&gt;"/>
            <Method signature="collection()" returnType="[ext]java.util.Collection&lt;sun.security.ssl.CipherSuite&gt;"/>
            <Method signature="size()" returnType="[ext]int"/>
            <Method signature="toStringArray()" returnType="[ext]java.lang.String[]"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="clearAvailableCache()" isStatic="true" returnType="[ext]void"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.ClientHandshaker" extends="sun.security.ssl.Handshaker" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.Handshaker"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.SSLSocketImpl,sun.security.ssl.SSLContextImpl,sun.security.ssl.ProtocolList,sun.security.ssl.ProtocolVersion,boolean,boolean,byte[],byte[])" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.SSLEngineImpl,sun.security.ssl.SSLContextImpl,sun.security.ssl.ProtocolList,sun.security.ssl.ProtocolVersion,boolean,boolean,byte[],byte[])" returnType="[ext]void"/>
            <Method signature="processMessage(byte,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getKickstartMessage()" returnType="sun.security.ssl.HandshakeMessage">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="handshakeAlert(byte)" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLProtocolException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.CloneableDigest" extends="[ext]java.security.MessageDigest" isGeneric="false" isFinal="true">
        <Extends mangling="java.security.MessageDigest"/>
        <Implements mangling="[ext]java.lang.Cloneable"/>
        <Fields/>
        <Methods>
            <Method signature="getDigest(java.lang.String,int)" isStatic="true" returnType="[ext]java.security.MessageDigest">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="engineGetDigestLength()" returnType="[ext]int" visibility="protected"/>
            <Method signature="engineUpdate(byte)" returnType="[ext]void" visibility="protected"/>
            <Method signature="engineUpdate(byte[],int,int)" returnType="[ext]void" visibility="protected"/>
            <Method signature="engineDigest()" returnType="[ext]byte[]" visibility="protected"/>
            <Method signature="engineDigest(byte[],int,int)" returnType="[ext]int" visibility="protected">
                <Throw mangling="java.security.DigestException"/>
            </Method>
            <Method signature="engineReset()" returnType="[ext]void" visibility="protected"/>
            <Method signature="clone()" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.Debug" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="Help()" isStatic="true" returnType="[ext]void" visibility="public"/>
            <Method signature="getInstance(java.lang.String)" isStatic="true" returnType="sun.security.ssl.Debug" visibility="public"/>
            <Method signature="getInstance(java.lang.String,java.lang.String)" isStatic="true" returnType="sun.security.ssl.Debug" visibility="public"/>
            <Method signature="isOn(java.lang.String)" isStatic="true" returnType="[ext]boolean" visibility="public"/>
            <Method signature="println(java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="println()" returnType="[ext]void" visibility="public"/>
            <Method signature="println(java.lang.String,java.lang.String)" isStatic="true" returnType="[ext]void" visibility="public"/>
            <Method signature="println(java.io.PrintStream,java.lang.String,byte[])" isStatic="true" returnType="[ext]void" visibility="public"/>
            <Method signature="getBooleanProperty(java.lang.String,boolean)" isStatic="true" returnType="[ext]boolean"/>
            <Method signature="toString(byte[])" isStatic="true" returnType="[ext]java.lang.String"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.DHClientKeyExchange" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Fields/>
        <Methods>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="getClientPublicKey()" returnType="[ext]java.math.BigInteger"/>
            <Method signature="+ctor(java.math.BigInteger)" returnType="[ext]void"/>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.DHCrypt" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(int,java.security.SecureRandom)" returnType="[ext]void"/>
            <Method signature="+ctor(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)" returnType="[ext]void"/>
            <Method signature="getDHPublicKeySpec(java.security.PublicKey)" isStatic="true" returnType="[ext]javax.crypto.spec.DHPublicKeySpec"/>
            <Method signature="getModulus()" returnType="[ext]java.math.BigInteger"/>
            <Method signature="getBase()" returnType="[ext]java.math.BigInteger"/>
            <Method signature="getPublicKey()" returnType="[ext]java.math.BigInteger"/>
            <Method signature="getAgreedSecret(java.math.BigInteger,boolean)" returnType="[ext]javax.crypto.SecretKey">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.DummyX509KeyManager" extends="[ext]javax.net.ssl.X509ExtendedKeyManager" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.X509ExtendedKeyManager"/>
        <Fields>
            <Field name="INSTANCE" type="javax.net.ssl.X509ExtendedKeyManager" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.DummyX509TrustManager" extends="[ext]javax.net.ssl.X509ExtendedTrustManager" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.X509ExtendedTrustManager"/>
        <Implements mangling="[ext]javax.net.ssl.X509TrustManager"/>
        <Fields>
            <Field name="INSTANCE" type="javax.net.ssl.X509TrustManager" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="getAcceptedIssuers()" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.ECDHClientKeyExchange" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Fields/>
        <Methods>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="getEncodedPoint()" returnType="[ext]byte[]"/>
            <Method signature="+ctor(java.security.PublicKey)" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.ECDHCrypt" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.security.PrivateKey,java.security.PublicKey)" returnType="[ext]void"/>
            <Method signature="+ctor(java.lang.String,java.security.SecureRandom)" returnType="[ext]void"/>
            <Method signature="+ctor(java.security.spec.ECParameterSpec,java.security.SecureRandom)" returnType="[ext]void"/>
            <Method signature="getPublicKey()" returnType="[ext]java.security.PublicKey"/>
            <Method signature="getAgreedSecret(java.security.PublicKey)" returnType="[ext]javax.crypto.SecretKey"/>
            <Method signature="getAgreedSecret(byte[])" returnType="[ext]javax.crypto.SecretKey"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.EngineArgs" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="netData" type="java.nio.ByteBuffer"/>
            <Field name="appData" type="java.nio.ByteBuffer[]"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)" returnType="[ext]void"/>
            <Method signature="+ctor(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)" returnType="[ext]void"/>
            <Method signature="gather(int)" returnType="[ext]void"/>
            <Method signature="scatter(java.nio.ByteBuffer)" returnType="[ext]void"/>
            <Method signature="getAppRemaining()" returnType="[ext]int"/>
            <Method signature="deltaNet()" returnType="[ext]int"/>
            <Method signature="deltaApp()" returnType="[ext]int"/>
            <Method signature="resetPos()" returnType="[ext]void"/>
            <Method signature="resetLim()" returnType="[ext]void"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.EngineInputRecord" extends="sun.security.ssl.InputRecord" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.InputRecord"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.SSLEngineImpl)" returnType="[ext]void"/>
            <Method signature="contentType()" returnType="[ext]byte"/>
            <Method signature="bytesInCompletePacket(java.nio.ByteBuffer)" returnType="[ext]int">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="decrypt(sun.security.ssl.MAC,sun.security.ssl.CipherBox,java.nio.ByteBuffer)" returnType="[ext]java.nio.ByteBuffer">
                <Throw mangling="javax.crypto.BadPaddingException"/>
            </Method>
            <Method signature="writeBuffer(java.io.OutputStream,byte[],int,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="read(java.nio.ByteBuffer)" returnType="[ext]java.nio.ByteBuffer">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.EngineOutputRecord" extends="sun.security.ssl.OutputRecord" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.OutputRecord"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(byte,sun.security.ssl.SSLEngineImpl)" returnType="[ext]void"/>
            <Method signature="setFinishedMsg()" returnType="[ext]void"/>
            <Method signature="flush()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="isFinishedMsg()" returnType="[ext]boolean"/>
            <Method signature="encrypt(sun.security.ssl.CipherBox,java.nio.ByteBuffer)" returnType="[ext]void"/>
            <Method signature="writeBuffer(java.io.OutputStream,byte[],int,int,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="write(sun.security.ssl.MAC,sun.security.ssl.CipherBox)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="write(sun.security.ssl.EngineArgs,sun.security.ssl.MAC,sun.security.ssl.CipherBox)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="write(sun.security.ssl.EngineArgs,sun.security.ssl.MAC,sun.security.ssl.CipherBox,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.EngineWriter" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="writeRecord(sun.security.ssl.EngineOutputRecord,sun.security.ssl.MAC,sun.security.ssl.CipherBox)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="writeRecord(sun.security.ssl.EngineOutputRecord,sun.security.ssl.EngineArgs,sun.security.ssl.MAC,sun.security.ssl.CipherBox)" returnType="[ext]javax.net.ssl.SSLEngineResult.HandshakeStatus">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putOutboundData(java.nio.ByteBuffer)" returnType="[ext]void"/>
            <Method signature="putOutboundDataSync(java.nio.ByteBuffer)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="hasOutboundData()" returnType="[ext]boolean"/>
            <Method signature="isOutboundDone()" returnType="[ext]boolean"/>
            <Method signature="closeOutbound()" returnType="[ext]void"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.EphemeralKeyManager$EphemeralKeyPair" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods/>
    </Class>
    <Class mangling="sun.security.ssl.EphemeralKeyManager" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="getRSAKeyPair(boolean,java.security.SecureRandom)" returnType="[ext]java.security.KeyPair"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.ExtensionType" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="id" type="int" isFinal="true"/>
            <Field name="name" type="java.lang.String" isFinal="true"/>
            <Field name="knownExtensions" type="java.util.List" isStatic="true"/>
            <Field name="EXT_SERVER_NAME" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_MAX_FRAGMENT_LENGTH" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_CLIENT_CERTIFICATE_URL" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_TRUSTED_CA_KEYS" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_TRUNCATED_HMAC" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_STATUS_REQUEST" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_USER_MAPPING" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_CERT_TYPE" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_ELLIPTIC_CURVES" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_EC_POINT_FORMATS" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_SRP" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_SIGNATURE_ALGORITHMS" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
            <Field name="EXT_RENEGOTIATION_INFO" type="sun.security.ssl.ExtensionType" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="get(int)" isStatic="true" returnType="sun.security.ssl.ExtensionType"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeHash" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(boolean,boolean,java.util.Set&lt;java.lang.String&gt;)" returnType="[ext]void"/>
            <Method signature="update(byte[],int,int)" returnType="[ext]void"/>
            <Method signature="reset()" returnType="[ext]void"/>
            <Method signature="protocolDetermined(sun.security.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="getMD5Clone()" returnType="[ext]java.security.MessageDigest"/>
            <Method signature="getSHAClone()" returnType="[ext]java.security.MessageDigest"/>
            <Method signature="setFinishedAlg(java.lang.String)" returnType="[ext]void"/>
            <Method signature="restrictCertificateVerifyAlgs(java.util.Set&lt;java.lang.String&gt;)" returnType="[ext]void"/>
            <Method signature="setCertificateVerifyAlg(java.lang.String)" returnType="[ext]void"/>
            <Method signature="getAllHandshakeMessages()" returnType="[ext]byte[]"/>
            <Method signature="getFinishedHash()" returnType="[ext]byte[]"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeInStream" extends="[ext]java.io.InputStream" isGeneric="false" visibility="public">
        <Extends mangling="java.io.InputStream"/>
        <Fields>
            <Field name="r" type="sun.security.ssl.InputRecord"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.HandshakeHash)" returnType="[ext]void"/>
            <Method signature="available()" returnType="[ext]int" visibility="public"/>
            <Method signature="read()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="read(byte[],int,int)" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="skip(long)" returnType="[ext]long" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="mark(int)" returnType="[ext]void" visibility="public"/>
            <Method signature="reset()" returnType="[ext]void" visibility="public"/>
            <Method signature="markSupported()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="incomingRecord(sun.security.ssl.InputRecord)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="digestNow()" returnType="[ext]void"/>
            <Method signature="ignore(int)" returnType="[ext]void"/>
            <Method signature="getInt8()" returnType="[ext]int">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getInt16()" returnType="[ext]int">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getInt24()" returnType="[ext]int">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getInt32()" returnType="[ext]int">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getBytes8()" returnType="[ext]byte[]">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getBytes16()" returnType="[ext]byte[]" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getBytes24()" returnType="[ext]byte[]">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$CertificateMsg" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Fields/>
        <Methods>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="+ctor(java.security.cert.X509Certificate[])" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getCertificateChain()" returnType="[ext]java.security.cert.X509Certificate[]"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$CertificateRequest" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Fields>
            <Field name="cct_rsa_sign" type="int" isStatic="true" isFinal="true"/>
            <Field name="cct_dss_sign" type="int" isStatic="true" isFinal="true"/>
            <Field name="cct_rsa_fixed_dh" type="int" isStatic="true" isFinal="true"/>
            <Field name="cct_dss_fixed_dh" type="int" isStatic="true" isFinal="true"/>
            <Field name="cct_rsa_ephemeral_dh" type="int" isStatic="true" isFinal="true"/>
            <Field name="cct_dss_ephemeral_dh" type="int" isStatic="true" isFinal="true"/>
            <Field name="cct_ecdsa_sign" type="int" isStatic="true" isFinal="true"/>
            <Field name="cct_rsa_fixed_ecdh" type="int" isStatic="true" isFinal="true"/>
            <Field name="cct_ecdsa_fixed_ecdh" type="int" isStatic="true" isFinal="true"/>
            <Field name="types" type="byte[]"/>
            <Field name="authorities" type="sun.security.ssl.HandshakeMessage.DistinguishedName[]"/>
            <Field name="protocolVersion" type="sun.security.ssl.ProtocolVersion"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.security.cert.X509Certificate[],sun.security.ssl.CipherSuite.KeyExchange,java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;,sun.security.ssl.ProtocolVersion)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,sun.security.ssl.ProtocolVersion)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getAuthorities()" returnType="[ext]javax.security.auth.x500.X500Principal[]">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getSignAlgorithms()" returnType="[ext]java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;"/>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$CertificateVerify" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Fields>
            <Field name="protocolVersion" type="sun.security.ssl.ProtocolVersion"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,sun.security.ssl.HandshakeHash,java.security.PrivateKey,javax.crypto.SecretKey,java.security.SecureRandom,sun.security.ssl.SignatureAndHashAlgorithm)" returnType="[ext]void">
                <Throw mangling="java.security.GeneralSecurityException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;,sun.security.ssl.ProtocolVersion)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getPreferableSignatureAlgorithm()" returnType="sun.security.ssl.SignatureAndHashAlgorithm"/>
            <Method signature="verify(sun.security.ssl.ProtocolVersion,sun.security.ssl.HandshakeHash,java.security.PublicKey,javax.crypto.SecretKey)" returnType="[ext]boolean">
                <Throw mangling="java.security.GeneralSecurityException"/>
            </Method>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$ClientHello" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Fields>
            <Field name="protocolVersion" type="sun.security.ssl.ProtocolVersion"/>
            <Field name="clnt_random" type="sun.security.ssl.RandomCookie"/>
            <Field name="sessionId" type="sun.security.ssl.SessionId"/>
            <Field name="compression_methods" type="byte[]"/>
            <Field name="extensions" type="sun.security.ssl.HelloExtensions"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.security.SecureRandom,sun.security.ssl.ProtocolVersion,sun.security.ssl.SessionId,sun.security.ssl.CipherSuiteList)" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getCipherSuites()" returnType="sun.security.ssl.CipherSuiteList"/>
            <Method signature="addRenegotiationInfoExtension(byte[])" returnType="[ext]void"/>
            <Method signature="addServerNameIndicationExtension(java.lang.String)" returnType="[ext]void"/>
            <Method signature="addSignatureAlgorithmsExtension(java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;)" returnType="[ext]void"/>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$DH_ServerKeyExchange" extends="sun.security.ssl.HandshakeMessage$ServerKeyExchange" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage$ServerKeyExchange"/>
        <Fields>
            <Field name="protocolVersion" type="sun.security.ssl.ProtocolVersion"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.DHCrypt,sun.security.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.DHCrypt,java.security.PrivateKey,byte[],byte[],java.security.SecureRandom,sun.security.ssl.SignatureAndHashAlgorithm,sun.security.ssl.ProtocolVersion)" returnType="[ext]void">
                <Throw mangling="java.security.GeneralSecurityException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,sun.security.ssl.ProtocolVersion)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.security.GeneralSecurityException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,java.security.PublicKey,byte[],byte[],int,java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;,sun.security.ssl.ProtocolVersion)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.security.GeneralSecurityException"/>
            </Method>
            <Method signature="getModulus()" returnType="[ext]java.math.BigInteger"/>
            <Method signature="getBase()" returnType="[ext]java.math.BigInteger"/>
            <Method signature="getServerPublicKey()" returnType="[ext]java.math.BigInteger"/>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$DistinguishedName" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="name" type="byte[]"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(javax.security.auth.x500.X500Principal)" returnType="[ext]void"/>
            <Method signature="getX500Principal()" returnType="[ext]javax.security.auth.x500.X500Principal">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="length()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$ECDH_ServerKeyExchange" extends="sun.security.ssl.HandshakeMessage$ServerKeyExchange" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage$ServerKeyExchange"/>
        <Fields>
            <Field name="protocolVersion" type="sun.security.ssl.ProtocolVersion"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.ECDHCrypt,java.security.PrivateKey,byte[],byte[],java.security.SecureRandom,sun.security.ssl.SignatureAndHashAlgorithm,sun.security.ssl.ProtocolVersion)" returnType="[ext]void">
                <Throw mangling="java.security.GeneralSecurityException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,java.security.PublicKey,byte[],byte[],java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;,sun.security.ssl.ProtocolVersion)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.security.GeneralSecurityException"/>
            </Method>
            <Method signature="getPublicKey()" returnType="[ext]java.security.interfaces.ECPublicKey"/>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$Finished" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Fields>
            <Field name="CLIENT" type="int" isStatic="true" isFinal="true"/>
            <Field name="SERVER" type="int" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,sun.security.ssl.HandshakeHash,int,javax.crypto.SecretKey,sun.security.ssl.CipherSuite)" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,sun.security.ssl.HandshakeInStream,sun.security.ssl.CipherSuite)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="verify(sun.security.ssl.HandshakeHash,int,javax.crypto.SecretKey)" returnType="[ext]boolean"/>
            <Method signature="getVerifyData()" returnType="[ext]byte[]"/>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$HelloRequest" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Methods>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$RSA_ServerKeyExchange" extends="sun.security.ssl.HandshakeMessage$ServerKeyExchange" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage$ServerKeyExchange"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.security.PublicKey,java.security.PrivateKey,sun.security.ssl.RandomCookie,sun.security.ssl.RandomCookie,java.security.SecureRandom)" returnType="[ext]void">
                <Throw mangling="java.security.GeneralSecurityException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getPublicKey()" returnType="[ext]java.security.PublicKey"/>
            <Method signature="verify(java.security.PublicKey,sun.security.ssl.RandomCookie,sun.security.ssl.RandomCookie)" returnType="[ext]boolean">
                <Throw mangling="java.security.GeneralSecurityException"/>
            </Method>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$ServerHello" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Fields>
            <Field name="protocolVersion" type="sun.security.ssl.ProtocolVersion"/>
            <Field name="svr_random" type="sun.security.ssl.RandomCookie"/>
            <Field name="sessionId" type="sun.security.ssl.SessionId"/>
            <Field name="cipherSuite" type="sun.security.ssl.CipherSuite"/>
            <Field name="compression_method" type="byte"/>
            <Field name="extensions" type="sun.security.ssl.HelloExtensions"/>
        </Fields>
        <Methods>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$ServerHelloDone" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Methods>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream)" returnType="[ext]void"/>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage$ServerKeyExchange" extends="sun.security.ssl.HandshakeMessage" isGeneric="false">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="messageType()" returnType="[ext]int"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeMessage" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="ht_hello_request" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_client_hello" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_server_hello" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_certificate" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_server_key_exchange" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_certificate_request" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_server_hello_done" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_certificate_verify" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_client_key_exchange" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_finished" type="byte" isStatic="true" isFinal="true"/>
            <Field name="debug" type="sun.security.ssl.Debug" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="MD5_pad1" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="MD5_pad2" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="SHA_pad1" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="SHA_pad2" type="byte[]" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="toByteArray(java.math.BigInteger)" isStatic="true" returnType="[ext]byte[]"/>
            <Method signature="write(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void" isFinal="true">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="messageType()" returnType="[ext]int" isAbstract="true"/>
            <Method signature="messageLength()" returnType="[ext]int" isAbstract="true"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void" isAbstract="true">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void" isAbstract="true">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HandshakeOutStream" extends="[ext]java.io.OutputStream" isGeneric="false" visibility="public">
        <Extends mangling="java.io.OutputStream"/>
        <Fields>
            <Field name="r" type="sun.security.ssl.OutputRecord"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,sun.security.ssl.ProtocolVersion,sun.security.ssl.HandshakeHash,sun.security.ssl.SSLSocketImpl)" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,sun.security.ssl.ProtocolVersion,sun.security.ssl.HandshakeHash,sun.security.ssl.SSLEngineImpl)" returnType="[ext]void"/>
            <Method signature="doHashes()" returnType="[ext]void"/>
            <Method signature="write(byte[],int,int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="write(int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="flush()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setFinishedMsg()" returnType="[ext]void"/>
            <Method signature="putInt8(int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putInt16(int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putInt24(int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putInt32(int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putBytes8(byte[])" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putBytes16(byte[])" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putBytes24(byte[])" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.Handshaker$DelegatedTask" extends="[ext]java.lang.Object" isGeneric="true" genParams="E">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]java.lang.Runnable"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.security.PrivilegedExceptionAction&lt;E&gt;)" returnType="[ext]void"/>
            <Method signature="run()" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.Handshaker" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="protocolVersion" type="sun.security.ssl.ProtocolVersion"/>
            <Field name="activeProtocolVersion" type="sun.security.ssl.ProtocolVersion"/>
            <Field name="secureRenegotiation" type="boolean"/>
            <Field name="clientVerifyData" type="byte[]"/>
            <Field name="serverVerifyData" type="byte[]"/>
            <Field name="isInitialHandshake" type="boolean"/>
            <Field name="identificationProtocol" type="java.lang.String"/>
            <Field name="localSupportedSignAlgs" type="java.util.Collection"/>
            <Field name="peerSupportedSignAlgs" type="java.util.Collection"/>
            <Field name="conn" type="sun.security.ssl.SSLSocketImpl"/>
            <Field name="engine" type="sun.security.ssl.SSLEngineImpl"/>
            <Field name="handshakeHash" type="sun.security.ssl.HandshakeHash"/>
            <Field name="input" type="sun.security.ssl.HandshakeInStream"/>
            <Field name="output" type="sun.security.ssl.HandshakeOutStream"/>
            <Field name="state" type="int"/>
            <Field name="sslContext" type="sun.security.ssl.SSLContextImpl"/>
            <Field name="clnt_random" type="sun.security.ssl.RandomCookie"/>
            <Field name="svr_random" type="sun.security.ssl.RandomCookie"/>
            <Field name="session" type="sun.security.ssl.SSLSessionImpl"/>
            <Field name="cipherSuite" type="sun.security.ssl.CipherSuite"/>
            <Field name="keyExchange" type="sun.security.ssl.CipherSuite.KeyExchange"/>
            <Field name="resumingSession" type="boolean"/>
            <Field name="enableNewSession" type="boolean"/>
            <Field name="debug" type="sun.security.ssl.Debug" isStatic="true" isFinal="true"/>
            <Field name="allowUnsafeRenegotiation" type="boolean" isStatic="true" isFinal="true"/>
            <Field name="allowLegacyHelloMessages" type="boolean" isStatic="true" isFinal="true"/>
            <Field name="invalidated" type="boolean"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.SSLSocketImpl,sun.security.ssl.SSLContextImpl,sun.security.ssl.ProtocolList,boolean,boolean,sun.security.ssl.ProtocolVersion,boolean,boolean,byte[],byte[])" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.SSLEngineImpl,sun.security.ssl.SSLContextImpl,sun.security.ssl.ProtocolList,boolean,boolean,sun.security.ssl.ProtocolVersion,boolean,boolean,byte[],byte[])" returnType="[ext]void"/>
            <Method signature="fatalSE(byte,java.lang.String)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="fatalSE(byte,java.lang.Throwable)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="fatalSE(byte,java.lang.String,java.lang.Throwable)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="warningSE(byte)" returnType="[ext]void"/>
            <Method signature="getRawHostnameSE()" returnType="[ext]java.lang.String"/>
            <Method signature="getHostSE()" returnType="[ext]java.lang.String"/>
            <Method signature="getHostAddressSE()" returnType="[ext]java.lang.String"/>
            <Method signature="isLoopbackSE()" returnType="[ext]boolean"/>
            <Method signature="getPortSE()" returnType="[ext]int"/>
            <Method signature="getLocalPortSE()" returnType="[ext]int"/>
            <Method signature="getAccSE()" returnType="[ext]java.security.AccessControlContext"/>
            <Method signature="setVersion(sun.security.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="setEnabledProtocols(sun.security.ssl.ProtocolList)" returnType="[ext]void"/>
            <Method signature="setEnabledCipherSuites(sun.security.ssl.CipherSuiteList)" returnType="[ext]void"/>
            <Method signature="setAlgorithmConstraints(java.security.AlgorithmConstraints)" returnType="[ext]void"/>
            <Method signature="getLocalSupportedSignAlgs()" returnType="[ext]java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;"/>
            <Method signature="setPeerSupportedSignAlgs(java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;)" returnType="[ext]void"/>
            <Method signature="getPeerSupportedSignAlgs()" returnType="[ext]java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;"/>
            <Method signature="setIdentificationProtocol(java.lang.String)" returnType="[ext]void"/>
            <Method signature="activate(sun.security.ssl.ProtocolVersion)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setCipherSuite(sun.security.ssl.CipherSuite)" returnType="[ext]void"/>
            <Method signature="isNegotiable(sun.security.ssl.CipherSuite)" returnType="[ext]boolean"/>
            <Method signature="isNegotiable(sun.security.ssl.ProtocolVersion)" returnType="[ext]boolean"/>
            <Method signature="selectProtocolVersion(sun.security.ssl.ProtocolVersion)" returnType="sun.security.ssl.ProtocolVersion"/>
            <Method signature="getActiveCipherSuites()" returnType="sun.security.ssl.CipherSuiteList"/>
            <Method signature="getActiveProtocols()" returnType="sun.security.ssl.ProtocolList"/>
            <Method signature="setEnableSessionCreation(boolean)" returnType="[ext]void"/>
            <Method signature="newReadCipher()" returnType="sun.security.ssl.CipherBox">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="newWriteCipher()" returnType="sun.security.ssl.CipherBox">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="newReadMAC()" returnType="sun.security.ssl.MAC">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="newWriteMAC()" returnType="sun.security.ssl.MAC">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="isDone()" returnType="[ext]boolean"/>
            <Method signature="getSession()" returnType="sun.security.ssl.SSLSessionImpl"/>
            <Method signature="setHandshakeSessionSE(sun.security.ssl.SSLSessionImpl)" returnType="[ext]void"/>
            <Method signature="isSecureRenegotiation()" returnType="[ext]boolean"/>
            <Method signature="getClientVerifyData()" returnType="[ext]byte[]"/>
            <Method signature="getServerVerifyData()" returnType="[ext]byte[]"/>
            <Method signature="process_record(sun.security.ssl.InputRecord,boolean)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="processLoop()" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="activated()" returnType="[ext]boolean"/>
            <Method signature="started()" returnType="[ext]boolean"/>
            <Method signature="kickstart()" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getKickstartMessage()" returnType="sun.security.ssl.HandshakeMessage" isAbstract="true">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="processMessage(byte,int)" returnType="[ext]void" isAbstract="true">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="handshakeAlert(byte)" returnType="[ext]void" isAbstract="true">
                <Throw mangling="javax.net.ssl.SSLProtocolException"/>
            </Method>
            <Method signature="sendChangeCipherSpec(sun.security.ssl.HandshakeMessage.Finished,boolean)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="calculateKeys(javax.crypto.SecretKey,sun.security.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="calculateConnectionKeys(javax.crypto.SecretKey)" returnType="[ext]void"/>
            <Method signature="throwSSLException(java.lang.String,java.lang.Throwable)" isStatic="true" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="getTask()" returnType="[ext]sun.security.ssl.Handshaker.DelegatedTask"/>
            <Method signature="taskOutstanding()" returnType="[ext]boolean"/>
            <Method signature="checkThrown()" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HelloExtension" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="type" type="sun.security.ssl.ExtensionType" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.ExtensionType)" returnType="[ext]void"/>
            <Method signature="length()" returnType="[ext]int" isAbstract="true"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void" isAbstract="true">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.HelloExtensions" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="list()" returnType="[ext]java.util.List&lt;sun.security.ssl.HelloExtension&gt;"/>
            <Method signature="add(sun.security.ssl.HelloExtension)" returnType="[ext]void"/>
            <Method signature="get(sun.security.ssl.ExtensionType)" returnType="sun.security.ssl.HelloExtension"/>
            <Method signature="length()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.InputRecord" extends="[ext]java.io.ByteArrayInputStream" isGeneric="false">
        <Extends mangling="java.io.ByteArrayInputStream"/>
        <Implements mangling="sun.security.ssl.Record"/>
        <Fields>
            <Field name="formatVerified" type="boolean"/>
            <Field name="debug" type="sun.security.ssl.Debug" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="setHelloVersion(sun.security.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="getHelloVersion()" returnType="sun.security.ssl.ProtocolVersion"/>
            <Method signature="enableFormatChecks()" returnType="[ext]void"/>
            <Method signature="isAppDataValid()" returnType="[ext]boolean"/>
            <Method signature="setAppDataValid(boolean)" returnType="[ext]void"/>
            <Method signature="contentType()" returnType="[ext]byte"/>
            <Method signature="setHandshakeHash(sun.security.ssl.HandshakeHash)" returnType="[ext]void"/>
            <Method signature="getHandshakeHash()" returnType="sun.security.ssl.HandshakeHash"/>
            <Method signature="decrypt(sun.security.ssl.MAC,sun.security.ssl.CipherBox)" returnType="[ext]void">
                <Throw mangling="javax.crypto.BadPaddingException"/>
            </Method>
            <Method signature="checkMacTags(byte,byte[],int,int,sun.security.ssl.MAC,boolean)" isStatic="true" returnType="[ext]boolean"/>
            <Method signature="calculateRemainingLen(sun.security.ssl.MAC,int,int)" isStatic="true" returnType="[ext]int"/>
            <Method signature="ignore(int)" returnType="[ext]void"/>
            <Method signature="doHashes()" returnType="[ext]void"/>
            <Method signature="queueHandshake(sun.security.ssl.InputRecord)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="close()" returnType="[ext]void" visibility="public"/>
            <Method signature="read(java.io.InputStream,java.io.OutputStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="writeBuffer(java.io.OutputStream,byte[],int,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="contentName(int)" isStatic="true" returnType="[ext]java.lang.String"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.JsseJce$SunCertificates" extends="[ext]java.security.Provider" isGeneric="false" isFinal="true">
        <Extends mangling="java.security.Provider"/>
        <Methods>
            <Method signature="+ctor(java.security.Provider)" returnType="[ext]void"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.JsseJce" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="CIPHER_RSA_PKCS1" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="CIPHER_RC4" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="CIPHER_DES" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="CIPHER_3DES" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="CIPHER_AES" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="SIGNATURE_DSA" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="SIGNATURE_ECDSA" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="SIGNATURE_RAWDSA" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="SIGNATURE_RAWECDSA" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="SIGNATURE_RAWRSA" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="SIGNATURE_SSLRSA" type="java.lang.String" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="isEcAvailable()" isStatic="true" returnType="[ext]boolean"/>
            <Method signature="clearEcAvailable()" isStatic="true" returnType="[ext]void"/>
            <Method signature="isKerberosAvailable()" isStatic="true" returnType="[ext]boolean"/>
            <Method signature="getCipher(java.lang.String)" isStatic="true" returnType="[ext]javax.crypto.Cipher">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getSignature(java.lang.String)" isStatic="true" returnType="[ext]java.security.Signature">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getKeyGenerator(java.lang.String)" isStatic="true" returnType="[ext]javax.crypto.KeyGenerator">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getKeyPairGenerator(java.lang.String)" isStatic="true" returnType="[ext]java.security.KeyPairGenerator">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getKeyAgreement(java.lang.String)" isStatic="true" returnType="[ext]javax.crypto.KeyAgreement">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getMac(java.lang.String)" isStatic="true" returnType="[ext]javax.crypto.Mac">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getKeyFactory(java.lang.String)" isStatic="true" returnType="[ext]java.security.KeyFactory">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getSecureRandom()" isStatic="true" returnType="[ext]java.security.SecureRandom">
                <Throw mangling="java.security.KeyManagementException"/>
            </Method>
            <Method signature="getMD5()" isStatic="true" returnType="[ext]java.security.MessageDigest"/>
            <Method signature="getSHA()" isStatic="true" returnType="[ext]java.security.MessageDigest"/>
            <Method signature="getMessageDigest(java.lang.String)" isStatic="true" returnType="[ext]java.security.MessageDigest"/>
            <Method signature="getRSAKeyLength(java.security.PublicKey)" isStatic="true" returnType="[ext]int"/>
            <Method signature="getRSAPublicKeySpec(java.security.PublicKey)" isStatic="true" returnType="[ext]java.security.spec.RSAPublicKeySpec"/>
            <Method signature="getECParameterSpec(java.lang.String)" isStatic="true" returnType="[ext]java.security.spec.ECParameterSpec"/>
            <Method signature="getNamedCurveOid(java.security.spec.ECParameterSpec)" isStatic="true" returnType="[ext]java.lang.String"/>
            <Method signature="decodePoint(byte[],java.security.spec.EllipticCurve)" isStatic="true" returnType="[ext]java.security.spec.ECPoint">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="encodePoint(java.security.spec.ECPoint,java.security.spec.EllipticCurve)" isStatic="true" returnType="[ext]byte[]"/>
            <Method signature="beginFipsProvider()" isStatic="true" returnType="[ext]void"/>
            <Method signature="endFipsProvider(java.lang.Object)" isStatic="true" returnType="[ext]void"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.KerberosClientKeyExchange" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" visibility="public">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String,boolean,java.security.AccessControlContext,sun.security.ssl.ProtocolVersion,java.security.SecureRandom)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,sun.security.ssl.ProtocolVersion,java.security.SecureRandom,sun.security.ssl.HandshakeInStream,javax.crypto.SecretKey[])" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="messageLength()" returnType="[ext]int" visibility="public"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="init(java.lang.String,boolean,java.security.AccessControlContext,sun.security.ssl.ProtocolVersion,java.security.SecureRandom)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="init(sun.security.ssl.ProtocolVersion,sun.security.ssl.ProtocolVersion,java.security.SecureRandom,sun.security.ssl.HandshakeInStream,javax.crypto.SecretKey[])" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getUnencryptedPreMasterSecret()" returnType="[ext]byte[]" visibility="public"/>
            <Method signature="getPeerPrincipal()" returnType="[ext]java.security.Principal" visibility="public"/>
            <Method signature="getLocalPrincipal()" returnType="[ext]java.security.Principal" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.KeyManagerFactoryImpl$SunX509" extends="sun.security.ssl.KeyManagerFactoryImpl" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="sun.security.ssl.KeyManagerFactoryImpl"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="engineInit(java.security.KeyStore,char[])" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.KeyStoreException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.UnrecoverableKeyException"/>
            </Method>
            <Method signature="engineInit(javax.net.ssl.ManagerFactoryParameters)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.KeyManagerFactoryImpl$X509" extends="sun.security.ssl.KeyManagerFactoryImpl" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="sun.security.ssl.KeyManagerFactoryImpl"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="engineInit(java.security.KeyStore,char[])" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.KeyStoreException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.UnrecoverableKeyException"/>
            </Method>
            <Method signature="engineInit(javax.net.ssl.ManagerFactoryParameters)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.KeyManagerFactoryImpl" extends="[ext]javax.net.ssl.KeyManagerFactorySpi" isGeneric="false">
        <Extends mangling="javax.net.ssl.KeyManagerFactorySpi"/>
        <Fields>
            <Field name="keyManager" type="javax.net.ssl.X509ExtendedKeyManager"/>
            <Field name="isInitialized" type="boolean"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="engineGetKeyManagers()" returnType="[ext]javax.net.ssl.KeyManager[]" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.krb5.KerberosPreMasterSecret" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,java.security.SecureRandom,sun.security.krb5.EncryptionKey)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,sun.security.ssl.ProtocolVersion,java.security.SecureRandom,sun.security.ssl.HandshakeInStream,sun.security.krb5.EncryptionKey)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,java.security.SecureRandom)" returnType="[ext]void"/>
            <Method signature="getUnencrypted()" returnType="[ext]byte[]"/>
            <Method signature="getEncrypted()" returnType="[ext]byte[]"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.krb5.Krb5ProxyImpl" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="sun.security.ssl.Krb5Proxy"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="getClientSubject(java.security.AccessControlContext)" returnType="[ext]javax.security.auth.Subject" visibility="public">
                <Throw mangling="javax.security.auth.login.LoginException"/>
            </Method>
            <Method signature="getServerSubject(java.security.AccessControlContext)" returnType="[ext]javax.security.auth.Subject" visibility="public">
                <Throw mangling="javax.security.auth.login.LoginException"/>
            </Method>
            <Method signature="getServerKeys(java.security.AccessControlContext)" returnType="[ext]javax.crypto.SecretKey[]" visibility="public">
                <Throw mangling="javax.security.auth.login.LoginException"/>
            </Method>
            <Method signature="getServerPrincipalName(javax.crypto.SecretKey)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getPrincipalHostName(java.security.Principal)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getServicePermission(java.lang.String,java.lang.String)" returnType="[ext]java.security.Permission" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.Krb5Helper" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="isAvailable()" isStatic="true" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getClientSubject(java.security.AccessControlContext)" isStatic="true" returnType="[ext]javax.security.auth.Subject" visibility="public">
                <Throw mangling="javax.security.auth.login.LoginException"/>
            </Method>
            <Method signature="getServerSubject(java.security.AccessControlContext)" isStatic="true" returnType="[ext]javax.security.auth.Subject" visibility="public">
                <Throw mangling="javax.security.auth.login.LoginException"/>
            </Method>
            <Method signature="getServerKeys(java.security.AccessControlContext)" isStatic="true" returnType="[ext]javax.crypto.SecretKey[]" visibility="public">
                <Throw mangling="javax.security.auth.login.LoginException"/>
            </Method>
            <Method signature="getServerPrincipalName(javax.crypto.SecretKey)" isStatic="true" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getPrincipalHostName(java.security.Principal)" isStatic="true" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getServicePermission(java.lang.String,java.lang.String)" isStatic="true" returnType="[ext]java.security.Permission" visibility="public"/>
        </Methods>
    </Class>
    <Interface mangling="sun.security.ssl.Krb5Proxy" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="getClientSubject(java.security.AccessControlContext)" returnType="[ext]javax.security.auth.Subject" isAbstract="true" visibility="public">
                <Throw mangling="javax.security.auth.login.LoginException"/>
            </Method>
            <Method signature="getServerSubject(java.security.AccessControlContext)" returnType="[ext]javax.security.auth.Subject" isAbstract="true" visibility="public">
                <Throw mangling="javax.security.auth.login.LoginException"/>
            </Method>
            <Method signature="getServerKeys(java.security.AccessControlContext)" returnType="[ext]javax.crypto.SecretKey[]" isAbstract="true" visibility="public">
                <Throw mangling="javax.security.auth.login.LoginException"/>
            </Method>
            <Method signature="getServerPrincipalName(javax.crypto.SecretKey)" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getPrincipalHostName(java.security.Principal)" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getServicePermission(java.lang.String,java.lang.String)" returnType="[ext]java.security.Permission" isAbstract="true" visibility="public"/>
        </Methods>
    </Interface>
    <Class mangling="sun.security.ssl.MAC" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="NULL" type="sun.security.ssl.MAC" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.CipherSuite.MacAlg,sun.security.ssl.ProtocolVersion,javax.crypto.SecretKey)" returnType="[ext]void">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="MAClen()" returnType="[ext]int"/>
            <Method signature="hashBlockLen()" returnType="[ext]int"/>
            <Method signature="minimalPaddingLen()" returnType="[ext]int"/>
            <Method signature="compute(byte,byte[],int,int,boolean)" returnType="[ext]byte[]" isFinal="true"/>
            <Method signature="compute(byte,java.nio.ByteBuffer,boolean)" returnType="[ext]byte[]" isFinal="true"/>
            <Method signature="seqNumOverflow()" returnType="[ext]boolean" isFinal="true"/>
            <Method signature="seqNumIsHuge()" returnType="[ext]boolean" isFinal="true"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.OutputRecord" extends="[ext]java.io.ByteArrayOutputStream" isGeneric="false">
        <Extends mangling="java.io.ByteArrayOutputStream"/>
        <Implements mangling="sun.security.ssl.Record"/>
        <Fields>
            <Field name="protocolVersion" type="sun.security.ssl.ProtocolVersion"/>
            <Field name="debug" type="sun.security.ssl.Debug" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(byte,int)" returnType="[ext]void"/>
            <Method signature="+ctor(byte)" returnType="[ext]void"/>
            <Method signature="setVersion(sun.security.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="setHelloVersion(sun.security.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="reset()" returnType="[ext]void" visibility="public"/>
            <Method signature="setHandshakeHash(sun.security.ssl.HandshakeHash)" returnType="[ext]void"/>
            <Method signature="doHashes()" returnType="[ext]void"/>
            <Method signature="isEmpty()" returnType="[ext]boolean"/>
            <Method signature="isAlert(byte)" returnType="[ext]boolean"/>
            <Method signature="addMAC(sun.security.ssl.MAC)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="encrypt(sun.security.ssl.CipherBox)" returnType="[ext]void"/>
            <Method signature="availableDataBytes()" returnType="[ext]int" isFinal="true"/>
            <Method signature="contentType()" returnType="[ext]byte" isFinal="true"/>
            <Method signature="write(java.io.OutputStream,boolean,java.io.ByteArrayOutputStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="writeBuffer(java.io.OutputStream,byte[],int,int,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.ProtocolList" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="min" type="sun.security.ssl.ProtocolVersion" isFinal="true"/>
            <Field name="max" type="sun.security.ssl.ProtocolVersion" isFinal="true"/>
            <Field name="helloVersion" type="sun.security.ssl.ProtocolVersion" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.lang.String[])" returnType="[ext]void"/>
            <Method signature="+ctor(java.util.ArrayList&lt;sun.security.ssl.ProtocolVersion&gt;)" returnType="[ext]void"/>
            <Method signature="contains(sun.security.ssl.ProtocolVersion)" returnType="[ext]boolean"/>
            <Method signature="collection()" returnType="[ext]java.util.Collection&lt;sun.security.ssl.ProtocolVersion&gt;"/>
            <Method signature="selectProtocolVersion(sun.security.ssl.ProtocolVersion)" returnType="sun.security.ssl.ProtocolVersion"/>
            <Method signature="toStringArray()" returnType="[ext]java.lang.String[]"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.ProtocolVersion" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]java.lang.Comparable" genParams="sun.security.ssl.ProtocolVersion"/>
        <Fields>
            <Field name="LIMIT_MAX_VALUE" type="int" isStatic="true" isFinal="true"/>
            <Field name="LIMIT_MIN_VALUE" type="int" isStatic="true" isFinal="true"/>
            <Field name="NONE" type="sun.security.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="SSL20Hello" type="sun.security.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="SSL30" type="sun.security.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="TLS10" type="sun.security.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="TLS11" type="sun.security.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="TLS12" type="sun.security.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="MIN" type="sun.security.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="MAX" type="sun.security.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="DEFAULT" type="sun.security.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="DEFAULT_HELLO" type="sun.security.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="v" type="int" isFinal="true" visibility="public"/>
            <Field name="major" type="byte" isFinal="true" visibility="public"/>
            <Field name="minor" type="byte" isFinal="true" visibility="public"/>
            <Field name="name" type="java.lang.String" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="valueOf(int,int)" isStatic="true" returnType="sun.security.ssl.ProtocolVersion" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="sun.security.ssl.ProtocolVersion"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="compareTo(sun.security.ssl.ProtocolVersion)" returnType="[ext]int" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.RandomCookie" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="random_bytes" type="byte[]"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.security.SecureRandom)" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void"/>
        </Methods>
    </Class>
    <Interface mangling="sun.security.ssl.Record" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="ct_change_cipher_spec" type="byte" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="ct_alert" type="byte" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="ct_handshake" type="byte" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="ct_application_data" type="byte" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="headerSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxExpansion" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="trailerSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxDataSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxPadding" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxIVLength" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxRecordSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="enableCBCProtection" type="boolean" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxDataSizeMinusOneByteRecord" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxLargeRecordSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxAlertRecordSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
        </Fields>
        <Methods/>
    </Interface>
    <Class mangling="sun.security.ssl.RenegotiationInfoExtension" extends="sun.security.ssl.HelloExtension" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HelloExtension"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(byte[],byte[])" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="length()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="isEmpty()" returnType="[ext]boolean"/>
            <Method signature="getRenegotiatedConnection()" returnType="[ext]byte[]"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.RSAClientKeyExchange" extends="sun.security.ssl.HandshakeMessage" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HandshakeMessage"/>
        <Fields>
            <Field name="preMaster" type="javax.crypto.SecretKey"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,sun.security.ssl.ProtocolVersion,java.security.SecureRandom,java.security.PublicKey)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,sun.security.ssl.ProtocolVersion,java.security.SecureRandom,sun.security.ssl.HandshakeInStream,int,java.security.PrivateKey)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="generateDummySecret(sun.security.ssl.ProtocolVersion)" isStatic="true" returnType="[ext]javax.crypto.SecretKey"/>
            <Method signature="messageType()" returnType="[ext]int"/>
            <Method signature="messageLength()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.RSASignature" extends="[ext]java.security.SignatureSpi" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.security.SignatureSpi"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getInstance()" isStatic="true" returnType="[ext]java.security.Signature">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getInternalInstance()" isStatic="true" returnType="[ext]java.security.Signature">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
            </Method>
            <Method signature="setHashes(java.security.Signature,java.security.MessageDigest,java.security.MessageDigest)" isStatic="true" returnType="[ext]void"/>
            <Method signature="engineInitVerify(java.security.PublicKey)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="engineInitSign(java.security.PrivateKey)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="engineInitSign(java.security.PrivateKey,java.security.SecureRandom)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="engineUpdate(byte)" returnType="[ext]void" visibility="protected"/>
            <Method signature="engineUpdate(byte[],int,int)" returnType="[ext]void" visibility="protected"/>
            <Method signature="engineSign()" returnType="[ext]byte[]" visibility="protected">
                <Throw mangling="java.security.SignatureException"/>
            </Method>
            <Method signature="engineVerify(byte[])" returnType="[ext]boolean" visibility="protected">
                <Throw mangling="java.security.SignatureException"/>
            </Method>
            <Method signature="engineVerify(byte[],int,int)" returnType="[ext]boolean" visibility="protected">
                <Throw mangling="java.security.SignatureException"/>
            </Method>
            <Method signature="engineSetParameter(java.lang.String,java.lang.Object)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidParameterException"/>
            </Method>
            <Method signature="engineGetParameter(java.lang.String)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidParameterException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SecureKey" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="getCurrentSecurityContext()" isStatic="true" returnType="[ext]void"/>
            <Method signature="+ctor(java.lang.Object)" returnType="[ext]void"/>
            <Method signature="getAppKey()" returnType="[ext]void"/>
            <Method signature="getSecurityContext()" returnType="[ext]void"/>
            <Method signature="hashCode()" returnType="[ext]int" visibility="public"/>
            <Method signature="equals(java.lang.Object)" returnType="[ext]boolean" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.ServerHandshaker" extends="sun.security.ssl.Handshaker" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.Handshaker"/>
        <Fields>
            <Field name="preferableSignatureAlgorithm" type="sun.security.ssl.SignatureAndHashAlgorithm"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.SSLSocketImpl,sun.security.ssl.SSLContextImpl,sun.security.ssl.ProtocolList,byte,sun.security.ssl.ProtocolVersion,boolean,boolean,byte[],byte[])" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.SSLEngineImpl,sun.security.ssl.SSLContextImpl,sun.security.ssl.ProtocolList,byte,sun.security.ssl.ProtocolVersion,boolean,boolean,byte[],byte[])" returnType="[ext]void"/>
            <Method signature="setClientAuth(byte)" returnType="[ext]void"/>
            <Method signature="processMessage(byte,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="trySetCipherSuite(sun.security.ssl.CipherSuite)" returnType="[ext]boolean"/>
            <Method signature="getKickstartMessage()" returnType="sun.security.ssl.HandshakeMessage"/>
            <Method signature="handshakeAlert(byte)" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLProtocolException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.ServerNameExtension$ServerName" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="length" type="int" isFinal="true"/>
            <Field name="type" type="int" isFinal="true"/>
            <Field name="data" type="byte[]" isFinal="true"/>
            <Field name="hostname" type="java.lang.String" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(int,java.lang.String)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.ServerNameExtension" extends="sun.security.ssl.HelloExtension" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HelloExtension"/>
        <Fields>
            <Field name="NAME_HOST_NAME" type="int" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.util.List&lt;java.lang.String&gt;)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="length()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SessionId" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(boolean,java.security.SecureRandom)" returnType="[ext]void"/>
            <Method signature="+ctor(byte[])" returnType="[ext]void"/>
            <Method signature="length()" returnType="[ext]int"/>
            <Method signature="getId()" returnType="[ext]byte[]"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="hashCode()" returnType="[ext]int" visibility="public"/>
            <Method signature="equals(java.lang.Object)" returnType="[ext]boolean" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SignatureAlgorithmsExtension" extends="sun.security.ssl.HelloExtension" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HelloExtension"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;)" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getSignAlgorithms()" returnType="[ext]java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;"/>
            <Method signature="length()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SignatureAndHashAlgorithm$HashAlgorithm" extends="[ext]java.lang.Enum" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Enum" genParams="sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm"/>
        <Fields>
            <Field name="UNDEFINED" type="sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="NONE" type="sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="MD5" type="sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="SHA1" type="sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="SHA224" type="sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="SHA256" type="sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="SHA384" type="sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="SHA512" type="sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="name" type="java.lang.String" isFinal="true"/>
            <Field name="standardName" type="java.lang.String" isFinal="true"/>
            <Field name="value" type="int" isFinal="true"/>
            <Field name="length" type="int" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="values()" isStatic="true" returnType="[ext]sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm[]" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="[ext]sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm" visibility="public"/>
            <Method signature="valueOf(int)" isStatic="true" returnType="[ext]sun.security.ssl.SignatureAndHashAlgorithm.HashAlgorithm"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SignatureAndHashAlgorithm$SignatureAlgorithm" extends="[ext]java.lang.Enum" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Enum" genParams="sun.security.ssl.SignatureAndHashAlgorithm.SignatureAlgorithm"/>
        <Fields>
            <Field name="UNDEFINED" type="sun.security.ssl.SignatureAndHashAlgorithm.SignatureAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="ANONYMOUS" type="sun.security.ssl.SignatureAndHashAlgorithm.SignatureAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="RSA" type="sun.security.ssl.SignatureAndHashAlgorithm.SignatureAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="DSA" type="sun.security.ssl.SignatureAndHashAlgorithm.SignatureAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="ECDSA" type="sun.security.ssl.SignatureAndHashAlgorithm.SignatureAlgorithm" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="name" type="java.lang.String" isFinal="true"/>
            <Field name="value" type="int" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="values()" isStatic="true" returnType="[ext]sun.security.ssl.SignatureAndHashAlgorithm.SignatureAlgorithm[]" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="[ext]sun.security.ssl.SignatureAndHashAlgorithm.SignatureAlgorithm" visibility="public"/>
            <Method signature="valueOf(int)" isStatic="true" returnType="[ext]sun.security.ssl.SignatureAndHashAlgorithm.SignatureAlgorithm"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SignatureAndHashAlgorithm" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="SUPPORTED_ALG_PRIORITY_MAX_NUM" type="int" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="valueOf(int,int,int)" isStatic="true" returnType="sun.security.ssl.SignatureAndHashAlgorithm"/>
            <Method signature="getHashValue()" returnType="[ext]int"/>
            <Method signature="getSignatureValue()" returnType="[ext]int"/>
            <Method signature="getAlgorithmName()" returnType="[ext]java.lang.String"/>
            <Method signature="sizeInRecord()" isStatic="true" returnType="[ext]int"/>
            <Method signature="getSupportedAlgorithms(java.security.AlgorithmConstraints)" isStatic="true" returnType="[ext]java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;"/>
            <Method signature="getSupportedAlgorithms(java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;)" isStatic="true" returnType="[ext]java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;"/>
            <Method signature="getAlgorithmNames(java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;)" isStatic="true" returnType="[ext]java.lang.String[]"/>
            <Method signature="getHashAlgorithmNames(java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;)" isStatic="true" returnType="[ext]java.util.Set&lt;java.lang.String&gt;"/>
            <Method signature="getHashAlgorithmName(sun.security.ssl.SignatureAndHashAlgorithm)" isStatic="true" returnType="[ext]java.lang.String"/>
            <Method signature="getPreferableAlgorithm(java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;,java.lang.String)" isStatic="true" returnType="sun.security.ssl.SignatureAndHashAlgorithm"/>
            <Method signature="getPreferableAlgorithm(java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;,java.lang.String,java.security.PrivateKey)" isStatic="true" returnType="sun.security.ssl.SignatureAndHashAlgorithm"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLAlgorithmConstraints$BasicDisabledAlgConstraints" extends="[ext]sun.security.util.DisabledAlgorithmConstraints" isGeneric="false">
        <Extends mangling="sun.security.util.DisabledAlgorithmConstraints"/>
        <Methods>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void"/>
            <Method signature="decomposes(sun.security.ssl.CipherSuite.KeyExchange,boolean)" returnType="[ext]java.util.Set&lt;java.lang.String&gt;" visibility="protected"/>
            <Method signature="decomposes(sun.security.ssl.CipherSuite.BulkCipher)" returnType="[ext]java.util.Set&lt;java.lang.String&gt;" visibility="protected"/>
            <Method signature="decomposes(sun.security.ssl.CipherSuite.MacAlg)" returnType="[ext]java.util.Set&lt;java.lang.String&gt;" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLAlgorithmConstraints$SupportedSignatureAlgorithmConstraints" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]java.security.AlgorithmConstraints"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String[])" returnType="[ext]void"/>
            <Method signature="permits(java.util.Set&lt;java.security.CryptoPrimitive&gt;,java.lang.String,java.security.AlgorithmParameters)" returnType="[ext]boolean" visibility="public"/>
            <Method signature="permits(java.util.Set&lt;java.security.CryptoPrimitive&gt;,java.security.Key)" returnType="[ext]boolean" isFinal="true" visibility="public"/>
            <Method signature="permits(java.util.Set&lt;java.security.CryptoPrimitive&gt;,java.lang.String,java.security.Key,java.security.AlgorithmParameters)" returnType="[ext]boolean" isFinal="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLAlgorithmConstraints" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]java.security.AlgorithmConstraints"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.security.AlgorithmConstraints)" returnType="[ext]void"/>
            <Method signature="+ctor(javax.net.ssl.SSLSocket,boolean)" returnType="[ext]void"/>
            <Method signature="+ctor(javax.net.ssl.SSLEngine,boolean)" returnType="[ext]void"/>
            <Method signature="+ctor(javax.net.ssl.SSLSocket,java.lang.String[],boolean)" returnType="[ext]void"/>
            <Method signature="+ctor(javax.net.ssl.SSLEngine,java.lang.String[],boolean)" returnType="[ext]void"/>
            <Method signature="permits(java.util.Set&lt;java.security.CryptoPrimitive&gt;,java.lang.String,java.security.AlgorithmParameters)" returnType="[ext]boolean" visibility="public"/>
            <Method signature="permits(java.util.Set&lt;java.security.CryptoPrimitive&gt;,java.security.Key)" returnType="[ext]boolean" visibility="public"/>
            <Method signature="permits(java.util.Set&lt;java.security.CryptoPrimitive&gt;,java.lang.String,java.security.Key,java.security.AlgorithmParameters)" returnType="[ext]boolean" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLContextImpl$ConservativeSSLContext" extends="sun.security.ssl.SSLContextImpl" isGeneric="false">
        <Extends mangling="sun.security.ssl.SSLContextImpl"/>
        <Fields/>
        <Methods>
            <Method signature="getDefaultServerSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters"/>
            <Method signature="getDefaultClientSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters"/>
            <Method signature="getSupportedSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLContextImpl$TLS11Context" extends="sun.security.ssl.SSLContextImpl" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="sun.security.ssl.SSLContextImpl"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="getDefaultServerSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters"/>
            <Method signature="getDefaultClientSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters"/>
            <Method signature="getSupportedSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLContextImpl$TLS12Context" extends="sun.security.ssl.SSLContextImpl" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="sun.security.ssl.SSLContextImpl"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="getDefaultServerSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters"/>
            <Method signature="getDefaultClientSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters"/>
            <Method signature="getSupportedSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLContextImpl" extends="[ext]javax.net.ssl.SSLContextSpi" isGeneric="false" visibility="public">
        <Extends mangling="javax.net.ssl.SSLContextSpi"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.KeyManagementException"/>
            </Method>
            <Method signature="engineGetSocketFactory()" returnType="[ext]javax.net.ssl.SSLSocketFactory" visibility="protected"/>
            <Method signature="engineGetServerSocketFactory()" returnType="[ext]javax.net.ssl.SSLServerSocketFactory" visibility="protected"/>
            <Method signature="engineCreateSSLEngine()" returnType="[ext]javax.net.ssl.SSLEngine" visibility="protected"/>
            <Method signature="engineCreateSSLEngine(java.lang.String,int)" returnType="[ext]javax.net.ssl.SSLEngine" visibility="protected"/>
            <Method signature="engineGetClientSessionContext()" returnType="[ext]javax.net.ssl.SSLSessionContext" visibility="protected"/>
            <Method signature="engineGetServerSessionContext()" returnType="[ext]javax.net.ssl.SSLSessionContext" visibility="protected"/>
            <Method signature="getSecureRandom()" returnType="[ext]java.security.SecureRandom"/>
            <Method signature="getX509KeyManager()" returnType="[ext]javax.net.ssl.X509ExtendedKeyManager"/>
            <Method signature="getX509TrustManager()" returnType="[ext]javax.net.ssl.X509TrustManager"/>
            <Method signature="getEphemeralKeyManager()" returnType="sun.security.ssl.EphemeralKeyManager"/>
            <Method signature="getDefaultServerSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters" isAbstract="true"/>
            <Method signature="getDefaultClientSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters" isAbstract="true"/>
            <Method signature="getSupportedSSLParams()" returnType="[ext]javax.net.ssl.SSLParameters" isAbstract="true"/>
            <Method signature="getSuportedProtocolList()" returnType="sun.security.ssl.ProtocolList"/>
            <Method signature="getDefaultProtocolList(boolean)" returnType="sun.security.ssl.ProtocolList"/>
            <Method signature="getSuportedCipherSuiteList()" returnType="sun.security.ssl.CipherSuiteList"/>
            <Method signature="getDefaultCipherSuiteList(boolean)" returnType="sun.security.ssl.CipherSuiteList"/>
            <Method signature="isDefaultProtocolList(sun.security.ssl.ProtocolList)" returnType="[ext]boolean"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLEngineImpl" extends="[ext]javax.net.ssl.SSLEngine" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="javax.net.ssl.SSLEngine"/>
        <Fields>
            <Field name="writer" type="sun.security.ssl.EngineWriter"/>
            <Field name="clauth_none" type="byte" isStatic="true" isFinal="true"/>
            <Field name="clauth_requested" type="byte" isStatic="true" isFinal="true"/>
            <Field name="clauth_required" type="byte" isStatic="true" isFinal="true"/>
            <Field name="inputRecord" type="sun.security.ssl.EngineInputRecord"/>
            <Field name="outputRecord" type="sun.security.ssl.EngineOutputRecord"/>
            <Field name="writeLock" type="java.lang.Object"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl)" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl,java.lang.String,int)" returnType="[ext]void"/>
            <Method signature="getAcc()" returnType="[ext]java.security.AccessControlContext"/>
            <Method signature="getHandshakeStatus()" returnType="[ext]javax.net.ssl.SSLEngineResult.HandshakeStatus" visibility="public"/>
            <Method signature="changeWriteCiphers()" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="setVersion(sun.security.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="beginHandshake()" returnType="[ext]void" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)" returnType="[ext]javax.net.ssl.SSLEngineResult" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)" returnType="[ext]javax.net.ssl.SSLEngineResult" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="needToSplitPayload(sun.security.ssl.CipherBox,sun.security.ssl.ProtocolVersion)" returnType="[ext]boolean"/>
            <Method signature="writeRecord(sun.security.ssl.EngineOutputRecord)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="closeOutbound()" returnType="[ext]void" visibility="public"/>
            <Method signature="isOutboundDone()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="closeInbound()" returnType="[ext]void" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="isInboundDone()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getSession()" returnType="[ext]javax.net.ssl.SSLSession" visibility="public"/>
            <Method signature="getHandshakeSession()" returnType="[ext]javax.net.ssl.SSLSession" visibility="public"/>
            <Method signature="setHandshakeSession(sun.security.ssl.SSLSessionImpl)" returnType="[ext]void"/>
            <Method signature="getDelegatedTask()" returnType="[ext]java.lang.Runnable" visibility="public"/>
            <Method signature="warning(byte)" returnType="[ext]void"/>
            <Method signature="fatal(byte,java.lang.String)" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="fatal(byte,java.lang.Throwable)" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="fatal(byte,java.lang.String,java.lang.Throwable)" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="setEnableSessionCreation(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnableSessionCreation()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setNeedClientAuth(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getNeedClientAuth()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setWantClientAuth(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getWantClientAuth()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setUseClientMode(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getUseClientMode()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setEnabledCipherSuites(java.lang.String[])" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnabledCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getSupportedProtocols()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setEnabledProtocols(java.lang.String[])" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnabledProtocols()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getSSLParameters()" returnType="[ext]javax.net.ssl.SSLParameters" visibility="public"/>
            <Method signature="setSSLParameters(javax.net.ssl.SSLParameters)" returnType="[ext]void" visibility="public"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLServerSocketFactoryImpl" extends="[ext]javax.net.ssl.SSLServerSocketFactory" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="javax.net.ssl.SSLServerSocketFactory"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.lang.Exception"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl)" returnType="[ext]void"/>
            <Method signature="createServerSocket()" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int,int)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int,int,java.net.InetAddress)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getDefaultCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLServerSocketImpl" extends="[ext]javax.net.ssl.SSLServerSocket" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.SSLServerSocket"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(int,int,sun.security.ssl.SSLContextImpl)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="+ctor(int,int,java.net.InetAddress,sun.security.ssl.SSLContextImpl)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getEnabledCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setEnabledCipherSuites(java.lang.String[])" returnType="[ext]void" visibility="public"/>
            <Method signature="getSupportedProtocols()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setEnabledProtocols(java.lang.String[])" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnabledProtocols()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setNeedClientAuth(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getNeedClientAuth()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setWantClientAuth(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getWantClientAuth()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setUseClientMode(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getUseClientMode()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setEnableSessionCreation(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnableSessionCreation()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getSSLParameters()" returnType="[ext]javax.net.ssl.SSLParameters" visibility="public"/>
            <Method signature="setSSLParameters(javax.net.ssl.SSLParameters)" returnType="[ext]void" visibility="public"/>
            <Method signature="accept()" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLSessionContextImpl$SessionCacheVisitor" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]sun.security.util.Cache$CacheVisitor"/>
        <Fields>
            <Field name="ids" type="java.util.Vector"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.SSLSessionContextImpl)" returnType="[ext]void"/>
            <Method signature="visit(java.util.Map&lt;java.lang.Object,java.lang.Object&gt;)" returnType="[ext]void" visibility="public"/>
            <Method signature="getSessionIds()" returnType="[ext]java.util.Enumeration&lt;byte[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLSessionContextImpl" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]javax.net.ssl.SSLSessionContext"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="getSession(byte[])" returnType="[ext]javax.net.ssl.SSLSession" visibility="public"/>
            <Method signature="getIds()" returnType="[ext]java.util.Enumeration&lt;byte[]" visibility="public"/>
            <Method signature="setSessionTimeout(int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.lang.IllegalArgumentException"/>
            </Method>
            <Method signature="getSessionTimeout()" returnType="[ext]int" visibility="public"/>
            <Method signature="setSessionCacheSize(int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.lang.IllegalArgumentException"/>
            </Method>
            <Method signature="getSessionCacheSize()" returnType="[ext]int" visibility="public"/>
            <Method signature="get(byte[])" returnType="sun.security.ssl.SSLSessionImpl"/>
            <Method signature="get(java.lang.String,int)" returnType="sun.security.ssl.SSLSessionImpl"/>
            <Method signature="put(sun.security.ssl.SSLSessionImpl)" returnType="[ext]void"/>
            <Method signature="remove(sun.security.ssl.SessionId)" returnType="[ext]void"/>
            <Method signature="isTimedout(javax.net.ssl.SSLSession)" returnType="[ext]boolean"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLSessionImpl" extends="[ext]javax.net.ssl.ExtendedSSLSession" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.ExtendedSSLSession"/>
        <Fields>
            <Field name="nullSession" type="sun.security.ssl.SSLSessionImpl" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;,java.security.SecureRandom,java.lang.String,int)" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.ProtocolVersion,sun.security.ssl.CipherSuite,java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;,sun.security.ssl.SessionId,java.lang.String,int)" returnType="[ext]void"/>
            <Method signature="setMasterSecret(javax.crypto.SecretKey)" returnType="[ext]void"/>
            <Method signature="getMasterSecret()" returnType="[ext]javax.crypto.SecretKey"/>
            <Method signature="setPeerCertificates(java.security.cert.X509Certificate[])" returnType="[ext]void"/>
            <Method signature="setLocalCertificates(java.security.cert.X509Certificate[])" returnType="[ext]void"/>
            <Method signature="setLocalPrivateKey(java.security.PrivateKey)" returnType="[ext]void"/>
            <Method signature="setPeerSupportedSignatureAlgorithms(java.util.Collection&lt;sun.security.ssl.SignatureAndHashAlgorithm&gt;)" returnType="[ext]void"/>
            <Method signature="setPeerPrincipal(java.security.Principal)" returnType="[ext]void"/>
            <Method signature="setLocalPrincipal(java.security.Principal)" returnType="[ext]void"/>
            <Method signature="isRejoinable()" returnType="[ext]boolean"/>
            <Method signature="isValid()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="isLocalAuthenticationValid()" returnType="[ext]boolean"/>
            <Method signature="getId()" returnType="[ext]byte[]" visibility="public"/>
            <Method signature="getSessionContext()" returnType="[ext]javax.net.ssl.SSLSessionContext" visibility="public"/>
            <Method signature="getSessionId()" returnType="sun.security.ssl.SessionId"/>
            <Method signature="getSuite()" returnType="sun.security.ssl.CipherSuite"/>
            <Method signature="setSuite(sun.security.ssl.CipherSuite)" returnType="[ext]void"/>
            <Method signature="getCipherSuite()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getProtocolVersion()" returnType="sun.security.ssl.ProtocolVersion"/>
            <Method signature="getProtocol()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getCompression()" returnType="[ext]byte"/>
            <Method signature="hashCode()" returnType="[ext]int" visibility="public"/>
            <Method signature="equals(java.lang.Object)" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getPeerCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getLocalCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public"/>
            <Method signature="getPeerCertificateChain()" returnType="[ext]javax.security.cert.X509Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getCertificateChain()" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getPeerPrincipal()" returnType="[ext]java.security.Principal" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getLocalPrincipal()" returnType="[ext]java.security.Principal" visibility="public"/>
            <Method signature="getCreationTime()" returnType="[ext]long" visibility="public"/>
            <Method signature="getLastAccessedTime()" returnType="[ext]long" visibility="public"/>
            <Method signature="setLastAccessedTime(long)" returnType="[ext]void"/>
            <Method signature="getPeerAddress()" returnType="[ext]java.net.InetAddress" visibility="public"/>
            <Method signature="getPeerHost()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getPeerPort()" returnType="[ext]int" visibility="public"/>
            <Method signature="setContext(sun.security.ssl.SSLSessionContextImpl)" returnType="[ext]void"/>
            <Method signature="invalidate()" returnType="[ext]void" visibility="public"/>
            <Method signature="putValue(java.lang.String,java.lang.Object)" returnType="[ext]void" visibility="public"/>
            <Method signature="getValue(java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="removeValue(java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="getValueNames()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="expandBufferSizes()" returnType="[ext]void" visibility="protected"/>
            <Method signature="getPacketBufferSize()" returnType="[ext]int" visibility="public"/>
            <Method signature="getApplicationBufferSize()" returnType="[ext]int" visibility="public"/>
            <Method signature="getLocalSupportedSignatureAlgorithms()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getPeerSupportedSignatureAlgorithms()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="finalize()" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLSocketFactoryImpl" extends="[ext]javax.net.ssl.SSLSocketFactory" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="javax.net.ssl.SSLSocketFactory"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.lang.Exception"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl)" returnType="[ext]void"/>
            <Method signature="createSocket()" returnType="[ext]java.net.Socket" visibility="public"/>
            <Method signature="createSocket(java.lang.String,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.net.UnknownHostException"/>
            </Method>
            <Method signature="createSocket(java.net.Socket,java.lang.String,int,boolean)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.lang.String,int,java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.net.InetAddress,int,java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getDefaultCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLSocketImpl$NotifyHandshakeThread" extends="[ext]java.lang.Thread" isGeneric="false">
        <Extends mangling="java.lang.Thread"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.util.Set&lt;java.util.Map.Entry&lt;javax.net.ssl.HandshakeCompletedListener,java.security.AccessControlContext&gt;&gt;,javax.net.ssl.HandshakeCompletedEvent)" returnType="[ext]void"/>
            <Method signature="run()" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SSLSocketImpl" extends="sun.security.ssl.BaseSSLSocketImpl" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="sun.security.ssl.BaseSSLSocketImpl"/>
        <Fields>
            <Field name="writeLock" type="java.util.concurrent.locks.ReentrantLock" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl,java.lang.String,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.net.UnknownHostException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl,java.net.InetAddress,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl,java.lang.String,int,java.net.InetAddress,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.net.UnknownHostException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl,java.net.InetAddress,int,java.net.InetAddress,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl,boolean,sun.security.ssl.CipherSuiteList,byte,boolean,sun.security.ssl.ProtocolList,java.lang.String,java.security.AlgorithmConstraints)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl)" returnType="[ext]void"/>
            <Method signature="+ctor(sun.security.ssl.SSLContextImpl,java.net.Socket,java.lang.String,int,boolean)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="connect(java.net.SocketAddress,int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="doneConnect()" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getAcc()" returnType="[ext]java.security.AccessControlContext"/>
            <Method signature="writeRecord(sun.security.ssl.OutputRecord)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="writeRecord(sun.security.ssl.OutputRecord,boolean)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="needToSplitPayload()" returnType="[ext]boolean"/>
            <Method signature="readDataRecord(sun.security.ssl.InputRecord)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getAppInputStream()" returnType="sun.security.ssl.AppInputStream"/>
            <Method signature="getAppOutputStream()" returnType="sun.security.ssl.AppOutputStream"/>
            <Method signature="startHandshake()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="isClosed()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="checkEOF()" returnType="[ext]boolean">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="checkWrite()" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="closeSocket()" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="close()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="waitForClose(boolean)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="handleException(java.lang.Exception)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="warning(byte)" returnType="[ext]void"/>
            <Method signature="fatal(byte,java.lang.String)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="fatal(byte,java.lang.Throwable)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="fatal(byte,java.lang.String,java.lang.Throwable)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="changeWriteCiphers()" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="setVersion(sun.security.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="getHost()" returnType="[ext]java.lang.String"/>
            <Method signature="getRawHostname()" returnType="[ext]java.lang.String"/>
            <Method signature="setHost(java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="getInputStream()" returnType="[ext]java.io.InputStream" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getOutputStream()" returnType="[ext]java.io.OutputStream" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getSession()" returnType="[ext]javax.net.ssl.SSLSession" visibility="public"/>
            <Method signature="getHandshakeSession()" returnType="[ext]javax.net.ssl.SSLSession" visibility="public"/>
            <Method signature="setHandshakeSession(sun.security.ssl.SSLSessionImpl)" returnType="[ext]void"/>
            <Method signature="setEnableSessionCreation(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnableSessionCreation()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setNeedClientAuth(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getNeedClientAuth()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setWantClientAuth(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getWantClientAuth()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setUseClientMode(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getUseClientMode()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setEnabledCipherSuites(java.lang.String[])" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnabledCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getSupportedProtocols()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setEnabledProtocols(java.lang.String[])" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnabledProtocols()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setSoTimeout(int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)" returnType="[ext]void" visibility="public"/>
            <Method signature="removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)" returnType="[ext]void" visibility="public"/>
            <Method signature="getSSLParameters()" returnType="[ext]javax.net.ssl.SSLParameters" visibility="public"/>
            <Method signature="setSSLParameters(javax.net.ssl.SSLParameters)" returnType="[ext]void" visibility="public"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SunJSSE" extends="[ext]java.security.Provider" isGeneric="false" visibility="public">
        <Extends mangling="java.security.Provider"/>
        <Fields>
            <Field name="cryptoProvider" type="java.security.Provider" isStatic="true"/>
        </Fields>
        <Methods>
            <Method signature="isFIPS()" isStatic="true" returnType="[ext]boolean" visibility="protected"/>
            <Method signature="+ctor()" returnType="[ext]void" visibility="protected"/>
            <Method signature="+ctor(java.security.Provider)" returnType="[ext]void" visibility="protected"/>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="protected"/>
            <Method signature="finalize()" returnType="[ext]void" isFinal="true" visibility="protected">
                <Throw mangling="java.lang.Throwable"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SunX509KeyManagerImpl$X509Credentials" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="privateKey" type="java.security.PrivateKey"/>
            <Field name="certificates" type="java.security.cert.X509Certificate[]"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.security.PrivateKey,java.security.cert.X509Certificate[])" returnType="[ext]void"/>
            <Method signature="getIssuerX500Principals()" returnType="[ext]java.util.Set&lt;javax.security.auth.x500.X500Principal&gt;"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SunX509KeyManagerImpl" extends="[ext]javax.net.ssl.X509ExtendedKeyManager" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.X509ExtendedKeyManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.security.KeyStore,char[])" returnType="[ext]void">
                <Throw mangling="java.security.KeyStoreException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.UnrecoverableKeyException"/>
            </Method>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SupportedEllipticCurvesExtension" extends="sun.security.ssl.HelloExtension" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HelloExtension"/>
        <Fields>
            <Field name="DEFAULT" type="sun.security.ssl.SupportedEllipticCurvesExtension" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="contains(int)" returnType="[ext]boolean"/>
            <Method signature="curveIds()" returnType="[ext]int[]"/>
            <Method signature="length()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="isSupported(int)" isStatic="true" returnType="[ext]boolean"/>
            <Method signature="getCurveIndex(java.security.spec.ECParameterSpec)" isStatic="true" returnType="[ext]int"/>
            <Method signature="getCurveOid(int)" isStatic="true" returnType="[ext]java.lang.String"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.SupportedEllipticPointFormatsExtension" extends="sun.security.ssl.HelloExtension" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HelloExtension"/>
        <Fields>
            <Field name="FMT_UNCOMPRESSED" type="int" isStatic="true" isFinal="true"/>
            <Field name="FMT_ANSIX962_COMPRESSED_PRIME" type="int" isStatic="true" isFinal="true"/>
            <Field name="FMT_ANSIX962_COMPRESSED_CHAR2" type="int" isStatic="true" isFinal="true"/>
            <Field name="DEFAULT" type="sun.security.ssl.HelloExtension" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="length()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.TrustManagerFactoryImpl$PKIXFactory" extends="sun.security.ssl.TrustManagerFactoryImpl" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="sun.security.ssl.TrustManagerFactoryImpl"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="getInstance(java.security.KeyStore)" returnType="[ext]javax.net.ssl.X509TrustManager">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="getInstance(javax.net.ssl.ManagerFactoryParameters)" returnType="[ext]javax.net.ssl.X509TrustManager">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.TrustManagerFactoryImpl$SimpleFactory" extends="sun.security.ssl.TrustManagerFactoryImpl" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="sun.security.ssl.TrustManagerFactoryImpl"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="getInstance(java.security.KeyStore)" returnType="[ext]javax.net.ssl.X509TrustManager">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="getInstance(javax.net.ssl.ManagerFactoryParameters)" returnType="[ext]javax.net.ssl.X509TrustManager">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.TrustManagerFactoryImpl" extends="[ext]javax.net.ssl.TrustManagerFactorySpi" isGeneric="false">
        <Extends mangling="javax.net.ssl.TrustManagerFactorySpi"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="engineInit(java.security.KeyStore)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="getInstance(java.security.KeyStore)" returnType="[ext]javax.net.ssl.X509TrustManager" isAbstract="true">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="getInstance(javax.net.ssl.ManagerFactoryParameters)" returnType="[ext]javax.net.ssl.X509TrustManager" isAbstract="true">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
            <Method signature="engineInit(javax.net.ssl.ManagerFactoryParameters)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
            <Method signature="engineGetTrustManagers()" returnType="[ext]javax.net.ssl.TrustManager[]" visibility="protected"/>
            <Method signature="getCacertsKeyStore(java.lang.String)" isStatic="true" returnType="[ext]java.security.KeyStore">
                <Throw mangling="java.lang.Exception"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.UnknownExtension" extends="sun.security.ssl.HelloExtension" isGeneric="false" isFinal="true">
        <Extends mangling="sun.security.ssl.HelloExtension"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(sun.security.ssl.HandshakeInStream,int,sun.security.ssl.ExtensionType)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="length()" returnType="[ext]int"/>
            <Method signature="send(sun.security.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.X509KeyManagerImpl$CheckResult" extends="[ext]java.lang.Enum" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Enum" genParams="sun.security.ssl.X509KeyManagerImpl.CheckResult"/>
        <Fields>
            <Field name="OK" type="sun.security.ssl.X509KeyManagerImpl.CheckResult" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="EXPIRED" type="sun.security.ssl.X509KeyManagerImpl.CheckResult" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="EXTENSION_MISMATCH" type="sun.security.ssl.X509KeyManagerImpl.CheckResult" isStatic="true" isFinal="true" visibility="public"/>
        </Fields>
        <Methods>
            <Method signature="values()" isStatic="true" returnType="[ext]sun.security.ssl.X509KeyManagerImpl.CheckResult[]" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="[ext]sun.security.ssl.X509KeyManagerImpl.CheckResult" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.X509KeyManagerImpl$CheckType" extends="[ext]java.lang.Enum" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Enum" genParams="sun.security.ssl.X509KeyManagerImpl.CheckType"/>
        <Fields>
            <Field name="NONE" type="sun.security.ssl.X509KeyManagerImpl.CheckType" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="CLIENT" type="sun.security.ssl.X509KeyManagerImpl.CheckType" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="SERVER" type="sun.security.ssl.X509KeyManagerImpl.CheckType" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="validEku" type="java.util.Set" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="values()" isStatic="true" returnType="[ext]sun.security.ssl.X509KeyManagerImpl.CheckType[]" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="[ext]sun.security.ssl.X509KeyManagerImpl.CheckType" visibility="public"/>
            <Method signature="check(java.security.cert.X509Certificate,java.util.Date)" returnType="[ext]sun.security.ssl.X509KeyManagerImpl.CheckResult"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.X509KeyManagerImpl$EntryStatus" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]java.lang.Comparable" genParams="sun.security.ssl.X509KeyManagerImpl.EntryStatus"/>
        <Fields>
            <Field name="builderIndex" type="int" isFinal="true"/>
            <Field name="keyIndex" type="int" isFinal="true"/>
            <Field name="alias" type="java.lang.String" isFinal="true"/>
            <Field name="checkResult" type="sun.security.ssl.X509KeyManagerImpl.CheckResult" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(int,int,java.lang.String,java.security.cert.Certificate[],sun.security.ssl.X509KeyManagerImpl.CheckResult)" returnType="[ext]void"/>
            <Method signature="compareTo(sun.security.ssl.X509KeyManagerImpl.EntryStatus)" returnType="[ext]int" visibility="public"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.X509KeyManagerImpl$KeyType" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="keyAlgorithm" type="java.lang.String" isFinal="true"/>
            <Field name="sigKeyAlgorithm" type="java.lang.String" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void"/>
            <Method signature="matches(java.security.cert.Certificate[])" returnType="[ext]boolean"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.X509KeyManagerImpl$SizedMap" extends="[ext]java.util.LinkedHashMap" isGeneric="true" genParams="K,V">
        <Extends mangling="java.util.LinkedHashMap" genParams="K,V"/>
        <Methods>
            <Method signature="removeEldestEntry(java.util.Map.Entry&lt;K,V&gt;)" returnType="[ext]boolean" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.X509KeyManagerImpl" extends="[ext]javax.net.ssl.X509ExtendedKeyManager" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.X509ExtendedKeyManager"/>
        <Implements mangling="[ext]javax.net.ssl.X509KeyManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.security.KeyStore.Builder)" returnType="[ext]void"/>
            <Method signature="+ctor(java.util.List&lt;java.security.KeyStore.Builder&gt;)" returnType="[ext]void"/>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getAliases(java.lang.String,java.security.Principal[],sun.security.ssl.X509KeyManagerImpl.CheckType,java.security.AlgorithmConstraints)" returnType="[ext]java.lang.String[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.security.ssl.X509TrustManagerImpl" extends="[ext]javax.net.ssl.X509ExtendedTrustManager" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.X509ExtendedTrustManager"/>
        <Implements mangling="[ext]javax.net.ssl.X509TrustManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String,java.security.KeyStore)" returnType="[ext]void">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="+ctor(java.lang.String,java.security.cert.PKIXBuilderParameters)" returnType="[ext]void"/>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="getAcceptedIssuers()" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkIdentity(java.lang.String,java.security.cert.X509Certificate,java.lang.String)" isStatic="true" returnType="[ext]void">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.Provider" extends="sun.security.ssl.SunJSSE" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="sun.security.ssl.SunJSSE"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.security.Provider)" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="isFIPS()" isStatic="true" returnType="[ext]boolean" visibility="public"/>
            <Method signature="install()" isStatic="true" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.X509ExtendedTrustManager" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]javax.net.ssl.X509TrustManager"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="protected"/>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String,java.lang.String)" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String,java.lang.String)" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
        </Methods>
    </Class>
</BlackBox>
