<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<BlackBox name="jsse.jar" xmlns="http://tempuri.org/BlackBoxes.xsd">
    <Class mangling="javax.net.ServerSocketFactory" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="protected"/>
            <Method signature="getDefault()" isStatic="true" returnType="javax.net.ServerSocketFactory" visibility="public"/>
            <Method signature="createServerSocket()" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int)" returnType="[ext]java.net.ServerSocket" isAbstract="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int,int)" returnType="[ext]java.net.ServerSocket" isAbstract="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int,int,java.net.InetAddress)" returnType="[ext]java.net.ServerSocket" isAbstract="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="javax.net.DefaultServerSocketFactory" extends="javax.net.ServerSocketFactory" isGeneric="false">
        <Extends mangling="javax.net.ServerSocketFactory"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="createServerSocket()" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int,int)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int,int,java.net.InetAddress)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="javax.net.SocketFactory" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="protected"/>
            <Method signature="getDefault()" isStatic="true" returnType="javax.net.SocketFactory" visibility="public"/>
            <Method signature="createSocket()" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.lang.String,int)" returnType="[ext]java.net.Socket" isAbstract="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.net.UnknownHostException"/>
            </Method>
            <Method signature="createSocket(java.lang.String,int,java.net.InetAddress,int)" returnType="[ext]java.net.Socket" isAbstract="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.net.UnknownHostException"/>
            </Method>
            <Method signature="createSocket(java.net.InetAddress,int)" returnType="[ext]java.net.Socket" isAbstract="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.net.InetAddress,int,java.net.InetAddress,int)" returnType="[ext]java.net.Socket" isAbstract="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="javax.net.DefaultSocketFactory" extends="javax.net.SocketFactory" isGeneric="false">
        <Extends mangling="javax.net.SocketFactory"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="createSocket()" returnType="[ext]java.net.Socket" visibility="public"/>
            <Method signature="createSocket(java.lang.String,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.net.UnknownHostException"/>
            </Method>
            <Method signature="createSocket(java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.lang.String,int,java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.net.UnknownHostException"/>
            </Method>
            <Method signature="createSocket(java.net.InetAddress,int,java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.SSLPermission" extends="[ext]java.security.BasicPermission" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.security.BasicPermission"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String,java.lang.String)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.HandshakeCompletedEvent" extends="[ext]java.util.EventObject" isGeneric="false" visibility="public">
        <Extends mangling="java.util.EventObject"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(javax.net.ssl.SSLSocket,javax.net.ssl.SSLSession)" returnType="[ext]void" visibility="public"/>
            <Method signature="getSession()" returnType="javax.net.ssl.SSLSession" visibility="public"/>
            <Method signature="getCipherSuite()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getLocalCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public"/>
            <Method signature="getPeerCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getPeerCertificateChain()" returnType="[ext]javax.security.cert.X509Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getPeerPrincipal()" returnType="[ext]java.security.Principal" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getLocalPrincipal()" returnType="[ext]java.security.Principal" visibility="public"/>
            <Method signature="getSocket()" returnType="javax.net.ssl.SSLSocket" visibility="public"/>
        </Methods>
    </Class>
    <Interface mangling="javax.net.ssl.SSLSession" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="getId()" returnType="[ext]byte[]" isAbstract="true" visibility="public"/>
            <Method signature="getSessionContext()" returnType="javax.net.ssl.SSLSessionContext" isAbstract="true" visibility="public"/>
            <Method signature="getCreationTime()" returnType="[ext]long" isAbstract="true" visibility="public"/>
            <Method signature="getLastAccessedTime()" returnType="[ext]long" isAbstract="true" visibility="public"/>
            <Method signature="invalidate()" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="isValid()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="putValue(java.lang.String,java.lang.Object)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getValue(java.lang.String)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="removeValue(java.lang.String)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getValueNames()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="getPeerCertificates()" returnType="[ext]java.security.cert.Certificate[]" isAbstract="true" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getLocalCertificates()" returnType="[ext]java.security.cert.Certificate[]" isAbstract="true" visibility="public"/>
            <Method signature="getPeerCertificateChain()" returnType="[ext]javax.security.cert.X509Certificate[]" isAbstract="true" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getPeerPrincipal()" returnType="[ext]java.security.Principal" isAbstract="true" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getLocalPrincipal()" returnType="[ext]java.security.Principal" isAbstract="true" visibility="public"/>
            <Method signature="getCipherSuite()" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getProtocol()" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getPeerHost()" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getPeerPort()" returnType="[ext]int" isAbstract="true" visibility="public"/>
            <Method signature="getPacketBufferSize()" returnType="[ext]int" isAbstract="true" visibility="public"/>
            <Method signature="getApplicationBufferSize()" returnType="[ext]int" isAbstract="true" visibility="public"/>
        </Methods>
    </Interface>
    <Class mangling="javax.net.ssl.SSLSocket" extends="[ext]java.net.Socket" isGeneric="false" visibility="public">
        <Extends mangling="java.net.Socket"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="protected"/>
            <Method signature="+ctor(java.lang.String,int)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.net.UnknownHostException"/>
            </Method>
            <Method signature="+ctor(java.net.InetAddress,int)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(java.lang.String,int,java.net.InetAddress,int)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.net.UnknownHostException"/>
            </Method>
            <Method signature="+ctor(java.net.InetAddress,int,java.net.InetAddress,int)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="getEnabledCipherSuites()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="setEnabledCipherSuites(java.lang.String[])" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getSupportedProtocols()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="getEnabledProtocols()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="setEnabledProtocols(java.lang.String[])" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getSession()" returnType="javax.net.ssl.SSLSession" isAbstract="true" visibility="public"/>
            <Method signature="addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="startHandshake()" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setUseClientMode(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getUseClientMode()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="setNeedClientAuth(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getNeedClientAuth()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="setWantClientAuth(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getWantClientAuth()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="setEnableSessionCreation(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getEnableSessionCreation()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.SSLPeerUnverifiedException" extends="javax.net.ssl.SSLException" isGeneric="false" visibility="public">
        <Extends mangling="javax.net.ssl.SSLException"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.SSLException" extends="[ext]java.io.IOException" isGeneric="false" visibility="public">
        <Extends mangling="java.io.IOException"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String,java.lang.Throwable)" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.Throwable)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Interface mangling="javax.net.ssl.SSLSessionContext" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="getSession(byte[])" returnType="javax.net.ssl.SSLSession" isAbstract="true" visibility="public"/>
            <Method signature="getIds()" returnType="[ext]java.util.Enumeration" isAbstract="true" visibility="public"/>
            <Method signature="setSessionTimeout(int)" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="java.lang.IllegalArgumentException"/>
            </Method>
            <Method signature="getSessionTimeout()" returnType="[ext]int" isAbstract="true" visibility="public"/>
            <Method signature="setSessionCacheSize(int)" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="java.lang.IllegalArgumentException"/>
            </Method>
            <Method signature="getSessionCacheSize()" returnType="[ext]int" isAbstract="true" visibility="public"/>
        </Methods>
    </Interface>
    <Interface mangling="javax.net.ssl.HandshakeCompletedListener" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]java.util.EventListener"/>
        <Methods>
            <Method signature="handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent)" returnType="[ext]void" isAbstract="true" visibility="public"/>
        </Methods>
    </Interface>
    <Class mangling="javax.net.ssl.SSLProtocolException" extends="javax.net.ssl.SSLException" isGeneric="false" visibility="public">
        <Extends mangling="javax.net.ssl.SSLException"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Interface mangling="javax.net.ssl.HostnameVerifier" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="verify(java.lang.String,javax.net.ssl.SSLSession)" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
        </Methods>
    </Interface>
    <Class mangling="javax.net.ssl.SSLServerSocket" extends="[ext]java.net.ServerSocket" isGeneric="false" visibility="public">
        <Extends mangling="java.net.ServerSocket"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(int)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(int,int)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(int,int,java.net.InetAddress)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getEnabledCipherSuites()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="setEnabledCipherSuites(java.lang.String[])" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="getSupportedProtocols()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="getEnabledProtocols()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="setEnabledProtocols(java.lang.String[])" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="setNeedClientAuth(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getNeedClientAuth()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="setWantClientAuth(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getWantClientAuth()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="setUseClientMode(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getUseClientMode()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="setEnableSessionCreation(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getEnableSessionCreation()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.HttpsURLConnection$DefaultHostnameVerifier" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.HostnameVerifier"/>
        <Methods>
            <Method signature="verify(java.lang.String,javax.net.ssl.SSLSession)" returnType="[ext]boolean" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.SSLEngine" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="protected"/>
            <Method signature="+ctor(java.lang.String,int)" returnType="[ext]void" visibility="protected"/>
            <Method signature="getPeerHost()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getPeerPort()" returnType="[ext]int" visibility="public"/>
            <Method signature="wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)" returnType="javax.net.ssl.SSLEngineResult" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer)" returnType="javax.net.ssl.SSLEngineResult" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)" returnType="javax.net.ssl.SSLEngineResult" isAbstract="true" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)" returnType="javax.net.ssl.SSLEngineResult" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])" returnType="javax.net.ssl.SSLEngineResult" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)" returnType="javax.net.ssl.SSLEngineResult" isAbstract="true" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="getDelegatedTask()" returnType="[ext]java.lang.Runnable" isAbstract="true" visibility="public"/>
            <Method signature="closeInbound()" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="isInboundDone()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="closeOutbound()" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="isOutboundDone()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="getEnabledCipherSuites()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="setEnabledCipherSuites(java.lang.String[])" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getSupportedProtocols()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="getEnabledProtocols()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="setEnabledProtocols(java.lang.String[])" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getSession()" returnType="javax.net.ssl.SSLSession" isAbstract="true" visibility="public"/>
            <Method signature="beginHandshake()" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="getHandshakeStatus()" returnType="[ext]javax.net.ssl.SSLEngineResult.HandshakeStatus" isAbstract="true" visibility="public"/>
            <Method signature="setUseClientMode(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getUseClientMode()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="setNeedClientAuth(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getNeedClientAuth()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="setWantClientAuth(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getWantClientAuth()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="setEnableSessionCreation(boolean)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="getEnableSessionCreation()" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.HttpsURLConnection" extends="[ext]java.net.HttpURLConnection" isGeneric="false" visibility="public">
        <Extends mangling="java.net.HttpURLConnection"/>
        <Fields>
            <Field name="hostnameVerifier" type="javax.net.ssl.HostnameVerifier" visibility="protected"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.net.URL)" returnType="[ext]void" visibility="protected"/>
            <Method signature="getCipherSuite()" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getLocalCertificates()" returnType="[ext]java.security.cert.Certificate[]" isAbstract="true" visibility="public"/>
            <Method signature="getServerCertificates()" returnType="[ext]java.security.cert.Certificate[]" isAbstract="true" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getPeerPrincipal()" returnType="[ext]java.security.Principal" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getLocalPrincipal()" returnType="[ext]java.security.Principal" visibility="public"/>
            <Method signature="setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)" isStatic="true" returnType="[ext]void" visibility="public"/>
            <Method signature="getDefaultHostnameVerifier()" isStatic="true" returnType="javax.net.ssl.HostnameVerifier" visibility="public"/>
            <Method signature="setHostnameVerifier(javax.net.ssl.HostnameVerifier)" returnType="[ext]void" visibility="public"/>
            <Method signature="getHostnameVerifier()" returnType="javax.net.ssl.HostnameVerifier" visibility="public"/>
            <Method signature="setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)" isStatic="true" returnType="[ext]void" visibility="public"/>
            <Method signature="getDefaultSSLSocketFactory()" isStatic="true" returnType="javax.net.ssl.SSLSocketFactory" visibility="public"/>
            <Method signature="setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)" returnType="[ext]void" visibility="public"/>
            <Method signature="getSSLSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.SSLSocketFactory" extends="javax.net.SocketFactory" isGeneric="false" visibility="public">
        <Extends mangling="javax.net.SocketFactory"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="getDefault()" isStatic="true" returnType="javax.net.SocketFactory" visibility="public"/>
            <Method signature="getDefaultCipherSuites()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="createSocket(java.net.Socket,java.lang.String,int,boolean)" returnType="[ext]java.net.Socket" isAbstract="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.SSLServerSocketFactory" extends="javax.net.ServerSocketFactory" isGeneric="false" visibility="public">
        <Extends mangling="javax.net.ServerSocketFactory"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="protected"/>
            <Method signature="getDefault()" isStatic="true" returnType="javax.net.ServerSocketFactory" visibility="public"/>
            <Method signature="getDefaultCipherSuites()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.DefaultSSLServerSocketFactory" extends="javax.net.ssl.SSLServerSocketFactory" isGeneric="false">
        <Extends mangling="javax.net.ssl.SSLServerSocketFactory"/>
        <Fields>
            <Field name="reason" type="java.lang.String"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void"/>
            <Method signature="createServerSocket(int)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int,int)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int,int,java.net.InetAddress)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getDefaultCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
        </Methods>
    </Class>
    <Interface mangling="javax.net.ssl.KeyManager" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
    </Interface>
    <Class mangling="javax.net.ssl.SSLSessionBindingEvent" extends="[ext]java.util.EventObject" isGeneric="false" visibility="public">
        <Extends mangling="java.util.EventObject"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(javax.net.ssl.SSLSession,java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="getName()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getSession()" returnType="javax.net.ssl.SSLSession" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.KeyManagerFactory" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="getDefaultAlgorithm()" isStatic="true" returnType="[ext]java.lang.String" isFinal="true" visibility="public"/>
            <Method signature="+ctor(javax.net.ssl.KeyManagerFactorySpi,java.security.Provider,java.lang.String)" returnType="[ext]void" visibility="protected"/>
            <Method signature="getAlgorithm()" returnType="[ext]java.lang.String" isFinal="true" visibility="public"/>
            <Method signature="getInstance(java.lang.String)" isStatic="true" returnType="javax.net.ssl.KeyManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.lang.String)" isStatic="true" returnType="javax.net.ssl.KeyManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.security.Provider)" isStatic="true" returnType="javax.net.ssl.KeyManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getProvider()" returnType="[ext]java.security.Provider" isFinal="true" visibility="public"/>
            <Method signature="init(java.security.KeyStore,char[])" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.security.KeyStoreException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.UnrecoverableKeyException"/>
            </Method>
            <Method signature="init(javax.net.ssl.ManagerFactoryParameters)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
            <Method signature="getKeyManagers()" returnType="[ext]javax.net.ssl.KeyManager[]" isFinal="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.KeyManagerFactorySpi" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="engineInit(java.security.KeyStore,char[])" returnType="[ext]void" isAbstract="true" visibility="protected">
                <Throw mangling="java.security.KeyStoreException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.UnrecoverableKeyException"/>
            </Method>
            <Method signature="engineInit(javax.net.ssl.ManagerFactoryParameters)" returnType="[ext]void" isAbstract="true" visibility="protected">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
            <Method signature="engineGetKeyManagers()" returnType="[ext]javax.net.ssl.KeyManager[]" isAbstract="true" visibility="protected"/>
        </Methods>
    </Class>
    <Interface mangling="javax.net.ssl.ManagerFactoryParameters" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
    </Interface>
    <Interface mangling="javax.net.ssl.SSLSessionBindingListener" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]java.util.EventListener"/>
        <Methods>
            <Method signature="valueBound(javax.net.ssl.SSLSessionBindingEvent)" returnType="[ext]void" isAbstract="true" visibility="public"/>
            <Method signature="valueUnbound(javax.net.ssl.SSLSessionBindingEvent)" returnType="[ext]void" isAbstract="true" visibility="public"/>
        </Methods>
    </Interface>
    <Class mangling="javax.net.ssl.SSLContext" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(javax.net.ssl.SSLContextSpi,java.security.Provider,java.lang.String)" returnType="[ext]void" visibility="protected"/>
            <Method signature="getInstance(java.lang.String)" isStatic="true" returnType="javax.net.ssl.SSLContext" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.lang.String)" isStatic="true" returnType="javax.net.ssl.SSLContext" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.security.Provider)" isStatic="true" returnType="javax.net.ssl.SSLContext" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getProtocol()" returnType="[ext]java.lang.String" isFinal="true" visibility="public"/>
            <Method signature="getProvider()" returnType="[ext]java.security.Provider" isFinal="true" visibility="public"/>
            <Method signature="init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.security.KeyManagementException"/>
            </Method>
            <Method signature="getSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory" isFinal="true" visibility="public"/>
            <Method signature="getServerSocketFactory()" returnType="javax.net.ssl.SSLServerSocketFactory" isFinal="true" visibility="public"/>
            <Method signature="createSSLEngine()" returnType="javax.net.ssl.SSLEngine" isFinal="true" visibility="public"/>
            <Method signature="createSSLEngine(java.lang.String,int)" returnType="javax.net.ssl.SSLEngine" isFinal="true" visibility="public"/>
            <Method signature="getServerSessionContext()" returnType="javax.net.ssl.SSLSessionContext" isFinal="true" visibility="public"/>
            <Method signature="getClientSessionContext()" returnType="javax.net.ssl.SSLSessionContext" isFinal="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.DefaultSSLSocketFactory" extends="javax.net.ssl.SSLSocketFactory" isGeneric="false">
        <Extends mangling="javax.net.ssl.SSLSocketFactory"/>
        <Fields>
            <Field name="reason" type="java.lang.String"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void"/>
            <Method signature="createSocket(java.lang.String,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.net.Socket,java.lang.String,int,boolean)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.lang.String,int,java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.net.InetAddress,int,java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getDefaultCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.SSLContextSpi" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)" returnType="[ext]void" isAbstract="true" visibility="protected">
                <Throw mangling="java.security.KeyManagementException"/>
            </Method>
            <Method signature="engineGetSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory" isAbstract="true" visibility="protected"/>
            <Method signature="engineGetServerSocketFactory()" returnType="javax.net.ssl.SSLServerSocketFactory" isAbstract="true" visibility="protected"/>
            <Method signature="engineCreateSSLEngine()" returnType="javax.net.ssl.SSLEngine" isAbstract="true" visibility="protected"/>
            <Method signature="engineCreateSSLEngine(java.lang.String,int)" returnType="javax.net.ssl.SSLEngine" isAbstract="true" visibility="protected"/>
            <Method signature="engineGetServerSessionContext()" returnType="javax.net.ssl.SSLSessionContext" isAbstract="true" visibility="protected"/>
            <Method signature="engineGetClientSessionContext()" returnType="javax.net.ssl.SSLSessionContext" isAbstract="true" visibility="protected"/>
        </Methods>
    </Class>
    <Interface mangling="javax.net.ssl.TrustManager" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
    </Interface>
    <Class mangling="javax.net.ssl.SSLEngineResult$Status" extends="[ext]java.lang.Enum" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.lang.Enum" genParams="javax.net.ssl.SSLEngineResult.Status"/>
        <Fields>
            <Field name="BUFFER_UNDERFLOW" type="javax.net.ssl.SSLEngineResult.Status" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="BUFFER_OVERFLOW" type="javax.net.ssl.SSLEngineResult.Status" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="OK" type="javax.net.ssl.SSLEngineResult.Status" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="CLOSED" type="javax.net.ssl.SSLEngineResult.Status" isStatic="true" isFinal="true" visibility="public"/>
        </Fields>
        <Methods>
            <Method signature="values()" isStatic="true" returnType="[ext]javax.net.ssl.SSLEngineResult.Status[]" isFinal="true" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="[ext]javax.net.ssl.SSLEngineResult.Status" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.SSLEngineResult$HandshakeStatus" extends="[ext]java.lang.Enum" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.lang.Enum" genParams="javax.net.ssl.SSLEngineResult.HandshakeStatus"/>
        <Fields>
            <Field name="NOT_HANDSHAKING" type="javax.net.ssl.SSLEngineResult.HandshakeStatus" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="FINISHED" type="javax.net.ssl.SSLEngineResult.HandshakeStatus" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="NEED_TASK" type="javax.net.ssl.SSLEngineResult.HandshakeStatus" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="NEED_WRAP" type="javax.net.ssl.SSLEngineResult.HandshakeStatus" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="NEED_UNWRAP" type="javax.net.ssl.SSLEngineResult.HandshakeStatus" isStatic="true" isFinal="true" visibility="public"/>
        </Fields>
        <Methods>
            <Method signature="values()" isStatic="true" returnType="[ext]javax.net.ssl.SSLEngineResult.HandshakeStatus[]" isFinal="true" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="[ext]javax.net.ssl.SSLEngineResult.HandshakeStatus" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.SSLEngineResult" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(javax.net.ssl.SSLEngineResult.Status,javax.net.ssl.SSLEngineResult.HandshakeStatus,int,int)" returnType="[ext]void" visibility="public"/>
            <Method signature="getStatus()" returnType="[ext]javax.net.ssl.SSLEngineResult.Status" isFinal="true" visibility="public"/>
            <Method signature="getHandshakeStatus()" returnType="[ext]javax.net.ssl.SSLEngineResult.HandshakeStatus" isFinal="true" visibility="public"/>
            <Method signature="bytesConsumed()" returnType="[ext]int" isFinal="true" visibility="public"/>
            <Method signature="bytesProduced()" returnType="[ext]int" isFinal="true" visibility="public"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.TrustManagerFactory" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="getDefaultAlgorithm()" isStatic="true" returnType="[ext]java.lang.String" isFinal="true" visibility="public"/>
            <Method signature="+ctor(javax.net.ssl.TrustManagerFactorySpi,java.security.Provider,java.lang.String)" returnType="[ext]void" visibility="protected"/>
            <Method signature="getAlgorithm()" returnType="[ext]java.lang.String" isFinal="true" visibility="public"/>
            <Method signature="getInstance(java.lang.String)" isStatic="true" returnType="javax.net.ssl.TrustManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.lang.String)" isStatic="true" returnType="javax.net.ssl.TrustManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.security.Provider)" isStatic="true" returnType="javax.net.ssl.TrustManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getProvider()" returnType="[ext]java.security.Provider" isFinal="true" visibility="public"/>
            <Method signature="init(java.security.KeyStore)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="init(javax.net.ssl.ManagerFactoryParameters)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
            <Method signature="getTrustManagers()" returnType="[ext]javax.net.ssl.TrustManager[]" isFinal="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.TrustManagerFactorySpi" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="engineInit(java.security.KeyStore)" returnType="[ext]void" isAbstract="true" visibility="protected">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="engineInit(javax.net.ssl.ManagerFactoryParameters)" returnType="[ext]void" isAbstract="true" visibility="protected">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
            <Method signature="engineGetTrustManagers()" returnType="[ext]javax.net.ssl.TrustManager[]" isAbstract="true" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.SSLHandshakeException" extends="javax.net.ssl.SSLException" isGeneric="false" visibility="public">
        <Extends mangling="javax.net.ssl.SSLException"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Interface mangling="javax.net.ssl.X509KeyManager" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.KeyManager"/>
        <Methods>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" isAbstract="true" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" isAbstract="true" visibility="public"/>
        </Methods>
    </Interface>
    <Class mangling="javax.net.ssl.SSLKeyException" extends="javax.net.ssl.SSLException" isGeneric="false" visibility="public">
        <Extends mangling="javax.net.ssl.SSLException"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Interface mangling="javax.net.ssl.X509TrustManager" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.TrustManager"/>
        <Methods>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="getAcceptedIssuers()" returnType="[ext]java.security.cert.X509Certificate[]" isAbstract="true" visibility="public"/>
        </Methods>
    </Interface>
    <Class mangling="javax.net.ssl.CertPathTrustManagerParameters" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.ManagerFactoryParameters"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.security.cert.CertPathParameters)" returnType="[ext]void" visibility="public"/>
            <Method signature="getParameters()" returnType="[ext]java.security.cert.CertPathParameters" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.KeyStoreBuilderParameters" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.ManagerFactoryParameters"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.security.KeyStore.Builder)" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.util.List)" returnType="[ext]void" visibility="public"/>
            <Method signature="getParameters()" returnType="[ext]java.util.List" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.net.ssl.X509ExtendedKeyManager" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.X509KeyManager"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="protected"/>
            <Method signature="chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.security.cert.Certificate" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="equals(java.lang.Object)" returnType="[ext]boolean" visibility="public"/>
            <Method signature="hashCode()" returnType="[ext]int" visibility="public"/>
            <Method signature="getEncoded()" returnType="[ext]byte[]" isAbstract="true" visibility="public">
                <Throw mangling="javax.security.cert.CertificateEncodingException"/>
            </Method>
            <Method signature="verify(java.security.PublicKey)" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="javax.security.cert.CertificateException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.InvalidKeyException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
                <Throw mangling="java.security.SignatureException"/>
            </Method>
            <Method signature="verify(java.security.PublicKey,java.lang.String)" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="javax.security.cert.CertificateException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.InvalidKeyException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
                <Throw mangling="java.security.SignatureException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getPublicKey()" returnType="[ext]java.security.PublicKey" isAbstract="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.security.cert.CertificateEncodingException" extends="javax.security.cert.CertificateException" isGeneric="false" visibility="public">
        <Extends mangling="javax.security.cert.CertificateException"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.security.cert.CertificateException" extends="[ext]java.lang.Exception" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Exception"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.security.cert.CertificateParsingException" extends="javax.security.cert.CertificateException" isGeneric="false" visibility="public">
        <Extends mangling="javax.security.cert.CertificateException"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.security.cert.CertificateExpiredException" extends="javax.security.cert.CertificateException" isGeneric="false" visibility="public">
        <Extends mangling="javax.security.cert.CertificateException"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.security.cert.CertificateNotYetValidException" extends="javax.security.cert.CertificateException" isGeneric="false" visibility="public">
        <Extends mangling="javax.security.cert.CertificateException"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="javax.security.cert.X509Certificate" extends="javax.security.cert.Certificate" isGeneric="false" visibility="public">
        <Extends mangling="javax.security.cert.Certificate"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="getInstance(java.io.InputStream)" isStatic="true" returnType="javax.security.cert.X509Certificate" isFinal="true" visibility="public">
                <Throw mangling="javax.security.cert.CertificateException"/>
            </Method>
            <Method signature="getInstance(byte[])" isStatic="true" returnType="javax.security.cert.X509Certificate" isFinal="true" visibility="public">
                <Throw mangling="javax.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkValidity()" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="javax.security.cert.CertificateExpiredException"/>
                <Throw mangling="javax.security.cert.CertificateNotYetValidException"/>
            </Method>
            <Method signature="checkValidity(java.util.Date)" returnType="[ext]void" isAbstract="true" visibility="public">
                <Throw mangling="javax.security.cert.CertificateExpiredException"/>
                <Throw mangling="javax.security.cert.CertificateNotYetValidException"/>
            </Method>
            <Method signature="getVersion()" returnType="[ext]int" isAbstract="true" visibility="public"/>
            <Method signature="getSerialNumber()" returnType="[ext]java.math.BigInteger" isAbstract="true" visibility="public"/>
            <Method signature="getIssuerDN()" returnType="[ext]java.security.Principal" isAbstract="true" visibility="public"/>
            <Method signature="getSubjectDN()" returnType="[ext]java.security.Principal" isAbstract="true" visibility="public"/>
            <Method signature="getNotBefore()" returnType="[ext]java.util.Date" isAbstract="true" visibility="public"/>
            <Method signature="getNotAfter()" returnType="[ext]java.util.Date" isAbstract="true" visibility="public"/>
            <Method signature="getSigAlgName()" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getSigAlgOID()" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getSigAlgParams()" returnType="[ext]byte[]" isAbstract="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.net.www.protocol.https.Handler" extends="[ext]sun.net.www.protocol.http.Handler" isGeneric="false" visibility="public">
        <Extends mangling="sun.net.www.protocol.http.Handler"/>
        <Fields>
            <Field name="proxy" type="java.lang.String" visibility="protected"/>
            <Field name="proxyPort" type="int" visibility="protected"/>
        </Fields>
        <Methods>
            <Method signature="getDefaultPort()" returnType="[ext]int" visibility="protected"/>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String,int)" returnType="[ext]void" visibility="public"/>
            <Method signature="openConnection(java.net.URL)" returnType="[ext]java.net.URLConnection" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="openConnection(java.net.URL,java.net.Proxy)" returnType="[ext]java.net.URLConnection" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection" extends="[ext]sun.net.www.protocol.http.HttpURLConnection" isGeneric="false" visibility="public">
        <Extends mangling="sun.net.www.protocol.http.HttpURLConnection"/>
        <Methods>
            <Method signature="+ctor(java.net.URL,sun.net.www.protocol.http.Handler)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getSSLSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory" isAbstract="true" visibility="protected"/>
            <Method signature="getHostnameVerifier()" returnType="javax.net.ssl.HostnameVerifier" isAbstract="true" visibility="protected"/>
            <Method signature="setNewClient(java.net.URL)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setNewClient(java.net.URL,boolean)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setProxiedClient(java.net.URL,java.lang.String,int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setProxiedClient(java.net.URL,java.lang.String,int,boolean)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="proxiedConnect(java.net.URL,java.lang.String,int,boolean)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="isConnected()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setConnected(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="connect()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getNewHttpClient(java.net.URL,java.net.Proxy,int)" returnType="[ext]sun.net.www.http.HttpClient" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getNewHttpClient(java.net.URL,java.net.Proxy,int,boolean)" returnType="[ext]sun.net.www.http.HttpClient" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getCipherSuite()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getLocalCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public"/>
            <Method signature="getServerCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getServerCertificateChain()" returnType="[ext]javax.security.cert.X509Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getPeerPrincipal()" returnType="[ext]java.security.Principal">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getLocalPrincipal()" returnType="[ext]java.security.Principal"/>
        </Methods>
    </Class>
    <Class mangling="sun.net.www.protocol.https.HttpsURLConnectionImpl" extends="javax.net.ssl.HttpsURLConnection" isGeneric="false" visibility="public">
        <Extends mangling="javax.net.ssl.HttpsURLConnection"/>
        <Fields>
            <Field name="delegate" type="sun.net.www.protocol.https.DelegateHttpsURLConnection" visibility="protected"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.net.URL,sun.net.www.protocol.https.Handler)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(java.net.URL,java.net.Proxy,sun.net.www.protocol.https.Handler)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(java.net.URL)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setNewClient(java.net.URL)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setNewClient(java.net.URL,boolean)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setProxiedClient(java.net.URL,java.lang.String,int)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setProxiedClient(java.net.URL,java.lang.String,int,boolean)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="connect()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="isConnected()" returnType="[ext]boolean" visibility="protected"/>
            <Method signature="setConnected(boolean)" returnType="[ext]void" visibility="protected"/>
            <Method signature="getCipherSuite()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getLocalCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public"/>
            <Method signature="getServerCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getServerCertificateChain()" returnType="[ext]javax.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getPeerPrincipal()" returnType="[ext]java.security.Principal" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getLocalPrincipal()" returnType="[ext]java.security.Principal" visibility="public"/>
            <Method signature="getOutputStream()" returnType="[ext]java.io.OutputStream" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getInputStream()" returnType="[ext]java.io.InputStream" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getErrorStream()" returnType="[ext]java.io.InputStream" visibility="public"/>
            <Method signature="disconnect()" returnType="[ext]void" visibility="public"/>
            <Method signature="usingProxy()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getHeaderFields()" returnType="[ext]java.util.Map" visibility="public"/>
            <Method signature="getHeaderField(java.lang.String)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getHeaderField(int)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getHeaderFieldKey(int)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="setRequestProperty(java.lang.String,java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="addRequestProperty(java.lang.String,java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="getResponseCode()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getRequestProperty(java.lang.String)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getRequestProperties()" returnType="[ext]java.util.Map" visibility="public"/>
            <Method signature="setInstanceFollowRedirects(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getInstanceFollowRedirects()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setRequestMethod(java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.net.ProtocolException"/>
            </Method>
            <Method signature="getRequestMethod()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getResponseMessage()" returnType="[ext]java.lang.String" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getHeaderFieldDate(java.lang.String,long)" returnType="[ext]long" visibility="public"/>
            <Method signature="getPermission()" returnType="[ext]java.security.Permission" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getURL()" returnType="[ext]java.net.URL" visibility="public"/>
            <Method signature="getContentLength()" returnType="[ext]int" visibility="public"/>
            <Method signature="getContentType()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getContentEncoding()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getExpiration()" returnType="[ext]long" visibility="public"/>
            <Method signature="getDate()" returnType="[ext]long" visibility="public"/>
            <Method signature="getLastModified()" returnType="[ext]long" visibility="public"/>
            <Method signature="getHeaderFieldInt(java.lang.String,int)" returnType="[ext]int" visibility="public"/>
            <Method signature="getContent()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getContent(java.lang.Class[])" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="setDoInput(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getDoInput()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setDoOutput(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getDoOutput()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setAllowUserInteraction(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getAllowUserInteraction()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setUseCaches(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getUseCaches()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setIfModifiedSince(long)" returnType="[ext]void" visibility="public"/>
            <Method signature="getIfModifiedSince()" returnType="[ext]long" visibility="public"/>
            <Method signature="getDefaultUseCaches()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setDefaultUseCaches(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="finalize()" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.lang.Throwable"/>
            </Method>
            <Method signature="equals(java.lang.Object)" returnType="[ext]boolean" visibility="public"/>
            <Method signature="hashCode()" returnType="[ext]int" visibility="public"/>
            <Method signature="setConnectTimeout(int)" returnType="[ext]void" visibility="public"/>
            <Method signature="getConnectTimeout()" returnType="[ext]int" visibility="public"/>
            <Method signature="setReadTimeout(int)" returnType="[ext]void" visibility="public"/>
            <Method signature="getReadTimeout()" returnType="[ext]int" visibility="public"/>
            <Method signature="setFixedLengthStreamingMode(int)" returnType="[ext]void" visibility="public"/>
            <Method signature="setChunkedStreamingMode(int)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="sun.net.www.protocol.https.DelegateHttpsURLConnection" extends="sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection" isGeneric="false" visibility="public">
        <Extends mangling="sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection"/>
        <Fields>
            <Field name="httpsURLConnection" type="javax.net.ssl.HttpsURLConnection" visibility="public"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.net.URL,sun.net.www.protocol.http.Handler,javax.net.ssl.HttpsURLConnection)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler,javax.net.ssl.HttpsURLConnection)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getSSLSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory" visibility="protected"/>
            <Method signature="getHostnameVerifier()" returnType="javax.net.ssl.HostnameVerifier" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="sun.net.www.protocol.https.HttpsClient" extends="[ext]sun.net.www.http.HttpClient" isGeneric="false" isFinal="true">
        <Extends mangling="sun.net.www.http.HttpClient"/>
        <Implements mangling="javax.net.ssl.HandshakeCompletedListener"/>
        <Fields/>
        <Methods>
            <Method signature="getDefaultPort()" returnType="[ext]int" visibility="protected"/>
            <Method signature="+ctor(javax.net.ssl.SSLSocketFactory,java.net.URL,java.lang.String,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(javax.net.ssl.SSLSocketFactory,java.net.URL,java.lang.String,int,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(javax.net.ssl.SSLSocketFactory,java.net.URL,java.net.Proxy,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier)" isStatic="true" returnType="[ext]sun.net.www.http.HttpClient">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,boolean)" isStatic="true" returnType="[ext]sun.net.www.http.HttpClient">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int)" isStatic="true" returnType="[ext]sun.net.www.http.HttpClient">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean)" isStatic="true" returnType="[ext]sun.net.www.http.HttpClient">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.lang.String,int,boolean,int)" isStatic="true" returnType="[ext]sun.net.www.http.HttpClient">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="New(javax.net.ssl.SSLSocketFactory,java.net.URL,javax.net.ssl.HostnameVerifier,java.net.Proxy,boolean,int)" isStatic="true" returnType="[ext]sun.net.www.http.HttpClient">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setHostnameVerifier(javax.net.ssl.HostnameVerifier)" returnType="[ext]void"/>
            <Method signature="setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)" returnType="[ext]void"/>
            <Method signature="getSSLSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory"/>
            <Method signature="needsTunneling()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="afterConnect()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.net.UnknownHostException"/>
            </Method>
            <Method signature="putInKeepAliveCache()" returnType="[ext]void" visibility="protected"/>
            <Method signature="closeIdleConnection()" returnType="[ext]void" visibility="public"/>
            <Method signature="getCipherSuite()" returnType="[ext]java.lang.String"/>
            <Method signature="getLocalCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public"/>
            <Method signature="getServerCertificates()" returnType="[ext]java.security.cert.Certificate[]">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getServerCertificateChain()" returnType="[ext]javax.security.cert.X509Certificate[]">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getPeerPrincipal()" returnType="[ext]java.security.Principal">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getLocalPrincipal()" returnType="[ext]java.security.Principal"/>
            <Method signature="handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent)" returnType="[ext]void" visibility="public"/>
            <Method signature="getProxyHostUsed()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getProxyPortUsed()" returnType="[ext]int" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.Debug" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="Help()" isStatic="true" returnType="[ext]void" visibility="public"/>
            <Method signature="getInstance(java.lang.String)" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.Debug" visibility="public"/>
            <Method signature="getInstance(java.lang.String,java.lang.String)" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.Debug" visibility="public"/>
            <Method signature="isOn(java.lang.String)" isStatic="true" returnType="[ext]boolean" visibility="public"/>
            <Method signature="println(java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="println()" returnType="[ext]void" visibility="public"/>
            <Method signature="println(java.lang.String,java.lang.String)" isStatic="true" returnType="[ext]void" visibility="public"/>
            <Method signature="println(java.io.PrintStream,java.lang.String,byte[])" isStatic="true" returnType="[ext]void"/>
            <Method signature="getBooleanProperty(java.lang.String,boolean)" isStatic="true" returnType="[ext]boolean"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SSLSocketFactoryImpl" extends="javax.net.ssl.SSLSocketFactory" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="javax.net.ssl.SSLSocketFactory"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.SSLContextImpl)" returnType="[ext]void"/>
            <Method signature="createSocket()" returnType="[ext]java.net.Socket" visibility="public"/>
            <Method signature="createSocket(java.lang.String,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.net.UnknownHostException"/>
            </Method>
            <Method signature="createSocket(java.net.Socket,java.lang.String,int,boolean)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.lang.String,int,java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createSocket(java.net.InetAddress,int,java.net.InetAddress,int)" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getDefaultCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SSLContextImpl" extends="javax.net.ssl.SSLContextSpi" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="javax.net.ssl.SSLContextSpi"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.KeyManagementException"/>
            </Method>
            <Method signature="engineGetSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory" visibility="protected"/>
            <Method signature="engineGetServerSocketFactory()" returnType="javax.net.ssl.SSLServerSocketFactory" visibility="protected"/>
            <Method signature="engineCreateSSLEngine()" returnType="javax.net.ssl.SSLEngine" visibility="protected"/>
            <Method signature="engineCreateSSLEngine(java.lang.String,int)" returnType="javax.net.ssl.SSLEngine" visibility="protected"/>
            <Method signature="engineGetClientSessionContext()" returnType="javax.net.ssl.SSLSessionContext" visibility="protected"/>
            <Method signature="engineGetServerSessionContext()" returnType="javax.net.ssl.SSLSessionContext" visibility="protected"/>
            <Method signature="getSecureRandom()" returnType="[ext]java.security.SecureRandom"/>
            <Method signature="getX509KeyManager()" returnType="javax.net.ssl.X509ExtendedKeyManager"/>
            <Method signature="getX509TrustManager()" returnType="javax.net.ssl.X509TrustManager"/>
            <Method signature="getEphemeralKeyManager()" returnType="com.sun.net.ssl.internal.ssl.EphemeralKeyManager"/>
            <Method signature="getDefaultContext()" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.SSLContextImpl"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.EphemeralKeyManager$EphemeralKeyPair" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods/>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.EphemeralKeyManager" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="getRSAKeyPair(boolean,java.security.SecureRandom)" returnType="[ext]java.security.KeyPair"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SSLSessionContextImpl" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.SSLSessionContext"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="getSession(byte[])" returnType="javax.net.ssl.SSLSession" visibility="public"/>
            <Method signature="getIds()" returnType="[ext]java.util.Enumeration" visibility="public"/>
            <Method signature="setSessionTimeout(int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.lang.IllegalArgumentException"/>
            </Method>
            <Method signature="getSessionTimeout()" returnType="[ext]int" visibility="public"/>
            <Method signature="setSessionCacheSize(int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.lang.IllegalArgumentException"/>
            </Method>
            <Method signature="getSessionCacheSize()" returnType="[ext]int" visibility="public"/>
            <Method signature="get(byte[])" returnType="com.sun.net.ssl.internal.ssl.SSLSessionImpl"/>
            <Method signature="get(java.lang.String,int)" returnType="com.sun.net.ssl.internal.ssl.SSLSessionImpl"/>
            <Method signature="put(com.sun.net.ssl.internal.ssl.SSLSessionImpl)" returnType="[ext]void"/>
            <Method signature="remove(com.sun.net.ssl.internal.ssl.SessionId)" returnType="[ext]void"/>
            <Method signature="checkTimeValidity(javax.net.ssl.SSLSession)" returnType="javax.net.ssl.SSLSession"/>
            <Method signature="isTimedout(javax.net.ssl.SSLSession)" returnType="[ext]boolean"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SSLSessionImpl" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.SSLSession"/>
        <Implements mangling="com.sun.net.ssl.internal.ssl.CipherSuiteConstants"/>
        <Fields>
            <Field name="nullSession" type="com.sun.net.ssl.internal.ssl.SSLSessionImpl" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.ProtocolVersion,com.sun.net.ssl.internal.ssl.CipherSuite,java.security.SecureRandom,java.lang.String,int)" returnType="[ext]void"/>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.ProtocolVersion,com.sun.net.ssl.internal.ssl.CipherSuite,com.sun.net.ssl.internal.ssl.SessionId,java.lang.String,int)" returnType="[ext]void"/>
            <Method signature="setMasterSecret(byte[])" returnType="[ext]void"/>
            <Method signature="getMasterSecret()" returnType="[ext]byte[]"/>
            <Method signature="setPeerCertificates(java.security.cert.X509Certificate[])" returnType="[ext]void"/>
            <Method signature="setLocalCertificates(java.security.cert.X509Certificate[])" returnType="[ext]void"/>
            <Method signature="setLocalPrivateKey(java.security.PrivateKey)" returnType="[ext]void"/>
            <Method signature="setPeerPrincipal(java.security.Principal)" returnType="[ext]void"/>
            <Method signature="setLocalPrincipal(java.security.Principal)" returnType="[ext]void"/>
            <Method signature="isRejoinable()" returnType="[ext]boolean"/>
            <Method signature="isValid()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="isLocalAuthenticationValid()" returnType="[ext]boolean"/>
            <Method signature="getId()" returnType="[ext]byte[]" visibility="public"/>
            <Method signature="getSessionContext()" returnType="javax.net.ssl.SSLSessionContext" visibility="public"/>
            <Method signature="getSessionId()" returnType="com.sun.net.ssl.internal.ssl.SessionId"/>
            <Method signature="getSuite()" returnType="com.sun.net.ssl.internal.ssl.CipherSuite"/>
            <Method signature="getCipherSuite()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getProtocolVersion()" returnType="com.sun.net.ssl.internal.ssl.ProtocolVersion"/>
            <Method signature="getProtocol()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getCompression()" returnType="[ext]byte"/>
            <Method signature="hashCode()" returnType="[ext]int" visibility="public"/>
            <Method signature="equals(java.lang.Object)" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getPeerCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getLocalCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public"/>
            <Method signature="getPeerCertificateChain()" returnType="[ext]javax.security.cert.X509Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getCertificateChain()" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getPeerPrincipal()" returnType="[ext]java.security.Principal" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getLocalPrincipal()" returnType="[ext]java.security.Principal" visibility="public"/>
            <Method signature="getCreationTime()" returnType="[ext]long" visibility="public"/>
            <Method signature="getLastAccessedTime()" returnType="[ext]long" visibility="public"/>
            <Method signature="setLastAccessedTime(long)" returnType="[ext]void"/>
            <Method signature="getPeerAddress()" returnType="[ext]java.net.InetAddress" visibility="public"/>
            <Method signature="getPeerHost()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getPeerPort()" returnType="[ext]int" visibility="public"/>
            <Method signature="setContext(com.sun.net.ssl.internal.ssl.SSLSessionContextImpl)" returnType="[ext]void"/>
            <Method signature="invalidate()" returnType="[ext]void" visibility="public"/>
            <Method signature="putValue(java.lang.String,java.lang.Object)" returnType="[ext]void" visibility="public"/>
            <Method signature="getValue(java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="removeValue(java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="getValueNames()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="expandBufferSizes()" returnType="[ext]void" visibility="protected"/>
            <Method signature="getPacketBufferSize()" returnType="[ext]int" visibility="public"/>
            <Method signature="getApplicationBufferSize()" returnType="[ext]int" visibility="public"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="finalize()" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.CipherSuite$KeyExchange" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="name" type="java.lang.String" isFinal="true"/>
            <Field name="allowed" type="boolean" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.lang.String,boolean)" returnType="[ext]void"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.CipherSuite$BulkCipher" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="name" type="java.lang.String" isFinal="true"/>
            <Field name="allowed" type="boolean" isFinal="true"/>
            <Field name="keySize" type="int" isFinal="true"/>
            <Field name="expandedKeySize" type="int" isFinal="true"/>
            <Field name="ivSize" type="int" isFinal="true"/>
            <Field name="exportable" type="boolean" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.lang.String,int,int,int,boolean)" returnType="[ext]void"/>
            <Method signature="+ctor(java.lang.String,int,int,boolean)" returnType="[ext]void"/>
            <Method signature="newCipher(com.sun.net.ssl.internal.ssl.ProtocolVersion,byte[],byte[],boolean)" returnType="com.sun.net.ssl.internal.ssl.CipherBox">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="isAvailable()" returnType="[ext]boolean"/>
            <Method signature="clearAvailableCache()" isStatic="true" returnType="[ext]void"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SessionId" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(boolean,java.security.SecureRandom)" returnType="[ext]void"/>
            <Method signature="+ctor(byte[])" returnType="[ext]void"/>
            <Method signature="length()" returnType="[ext]int"/>
            <Method signature="getId()" returnType="[ext]byte[]"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="hashCode()" returnType="[ext]int" visibility="public"/>
            <Method signature="equals(java.lang.Object)" returnType="[ext]boolean" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.CipherSuite$MacAlg" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="name" type="java.lang.String" isFinal="true"/>
            <Field name="size" type="int" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.lang.String,int)" returnType="[ext]void"/>
            <Method signature="newMac(com.sun.net.ssl.internal.ssl.ProtocolVersion,byte[])" returnType="com.sun.net.ssl.internal.ssl.MAC">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.CipherSuite" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]java.lang.Comparable"/>
        <Implements mangling="com.sun.net.ssl.internal.ssl.CipherSuiteConstants"/>
        <Fields>
            <Field name="SUPPORTED_SUITES_PRIORITY" type="int" isStatic="true" isFinal="true"/>
            <Field name="DEFAULT_SUITES_PRIORITY" type="int" isStatic="true" isFinal="true"/>
            <Field name="DYNAMIC_AVAILABILITY" type="boolean" isStatic="true" isFinal="true"/>
            <Field name="name" type="java.lang.String" isFinal="true"/>
            <Field name="id" type="int" isFinal="true"/>
            <Field name="priority" type="int" isFinal="true"/>
            <Field name="keyExchange" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange" isFinal="true"/>
            <Field name="cipher" type="com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher" isFinal="true"/>
            <Field name="macAlg" type="com.sun.net.ssl.internal.ssl.CipherSuite.MacAlg" isFinal="true"/>
            <Field name="exportable" type="boolean" isFinal="true"/>
            <Field name="allowed" type="boolean" isFinal="true"/>
            <Field name="C_NULL" type="com.sun.net.ssl.internal.ssl.CipherSuite" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="isAvailable()" returnType="[ext]boolean"/>
            <Method signature="compareTo(java.lang.Object)" returnType="[ext]int" visibility="public"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.CipherSuite"/>
            <Method signature="valueOf(int,int)" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.CipherSuite"/>
            <Method signature="allowedCipherSuites()" isStatic="true" returnType="[ext]java.util.Collection"/>
        </Methods>
    </Class>
    <Interface mangling="com.sun.net.ssl.internal.ssl.CipherSuiteConstants" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="K_NULL" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_RSA" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_RSA_EXPORT" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_DH_RSA" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_DH_DSS" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_DHE_DSS" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_DHE_RSA" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_DH_ANON" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_KRB5" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="K_KRB5_EXPORT" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="B_NULL" type="com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="B_RC4_40" type="com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="B_RC2_40" type="com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="B_DES_40" type="com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="B_RC4_128" type="com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="B_DES" type="com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="B_3DES" type="com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="B_IDEA" type="com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="B_AES_128" type="com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="B_AES_256" type="com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="M_NULL" type="com.sun.net.ssl.internal.ssl.CipherSuite.MacAlg" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="M_MD5" type="com.sun.net.ssl.internal.ssl.CipherSuite.MacAlg" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="M_SHA" type="com.sun.net.ssl.internal.ssl.CipherSuite.MacAlg" isStatic="true" isFinal="true" visibility="public"/>
        </Fields>
        <Methods/>
    </Interface>
    <Class mangling="com.sun.net.ssl.internal.ssl.ProtocolVersion" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="NONE" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="SSL20Hello" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="SSL30" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="TLS10" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="TLS11" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="MIN" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="MAX" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="DEFAULT" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="DEFAULT_HELLO" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isStatic="true" isFinal="true"/>
            <Field name="v" type="int" isFinal="true"/>
            <Field name="major" type="byte" isFinal="true"/>
            <Field name="minor" type="byte" isFinal="true"/>
            <Field name="name" type="java.lang.String" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="valueOf(int,int)" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.ProtocolVersion"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.ProtocolVersion"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.CipherBox" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="com.sun.net.ssl.internal.ssl.CipherSuiteConstants"/>
        <Fields>
            <Field name="NULL" type="com.sun.net.ssl.internal.ssl.CipherBox" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="newCipherBox(com.sun.net.ssl.internal.ssl.ProtocolVersion,com.sun.net.ssl.internal.ssl.CipherSuite.BulkCipher,byte[],byte[],boolean)" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.CipherBox">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="encrypt(byte[],int,int)" returnType="[ext]int"/>
            <Method signature="encrypt(java.nio.ByteBuffer)" returnType="[ext]int"/>
            <Method signature="decrypt(byte[],int,int)" returnType="[ext]int">
                <Throw mangling="javax.crypto.BadPaddingException"/>
            </Method>
            <Method signature="decrypt(java.nio.ByteBuffer)" returnType="[ext]int">
                <Throw mangling="javax.crypto.BadPaddingException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.MAC" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="NULL" type="com.sun.net.ssl.internal.ssl.MAC" isStatic="true" isFinal="true"/>
            <Field name="MD5_pad1" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="MD5_pad2" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="SHA_pad1" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="SHA_pad2" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="HMAC_ipad" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="HMAC_opad" type="byte[]" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.CipherSuite.MacAlg,com.sun.net.ssl.internal.ssl.ProtocolVersion,byte[])" returnType="[ext]void"/>
            <Method signature="MAClen()" returnType="[ext]int"/>
            <Method signature="compute(byte,byte[],int,int)" returnType="[ext]byte[]" isFinal="true"/>
            <Method signature="compute(byte,java.nio.ByteBuffer)" returnType="[ext]byte[]" isFinal="true"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SSLServerSocketFactoryImpl" extends="javax.net.ssl.SSLServerSocketFactory" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="javax.net.ssl.SSLServerSocketFactory"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.SSLContextImpl)" returnType="[ext]void"/>
            <Method signature="createServerSocket()" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int,int)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="createServerSocket(int,int,java.net.InetAddress)" returnType="[ext]java.net.ServerSocket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getDefaultCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.JsseX509TrustManager" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.X509TrustManager"/>
        <Fields>
            <Field name="trustManager" type="javax.net.ssl.X509TrustManager"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(javax.net.ssl.TrustManager[])" returnType="[ext]void"/>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="getAcceptedIssuers()" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.JsseX509KeyManager$AbstractWrapper" extends="javax.net.ssl.X509ExtendedKeyManager" isGeneric="false">
        <Extends mangling="javax.net.ssl.X509ExtendedKeyManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(javax.net.ssl.X509KeyManager)" returnType="[ext]void"/>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.JsseX509KeyManager" extends="javax.net.ssl.X509ExtendedKeyManager" isGeneric="false">
        <Extends mangling="javax.net.ssl.X509ExtendedKeyManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(javax.net.ssl.KeyManager[])" returnType="[ext]void"/>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SecureKey" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="getCurrentSecurityContext()" isStatic="true" returnType="[ext]void"/>
            <Method signature="+ctor(java.lang.Object)" returnType="[ext]void"/>
            <Method signature="getAppKey()" returnType="[ext]void"/>
            <Method signature="getSecurityContext()" returnType="[ext]void"/>
            <Method signature="hashCode()" returnType="[ext]int" visibility="public"/>
            <Method signature="equals(java.lang.Object)" returnType="[ext]boolean" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SSLSocketImpl$NotifyHandshakeThread" extends="[ext]java.lang.Thread" isGeneric="false">
        <Extends mangling="java.lang.Thread"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.util.Set,javax.net.ssl.HandshakeCompletedEvent)" returnType="[ext]void"/>
            <Method signature="run()" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.BaseSSLSocketImpl" extends="javax.net.ssl.SSLSocket" isGeneric="false">
        <Extends mangling="javax.net.ssl.SSLSocket"/>
        <Fields>
            <Field name="self" type="java.net.Socket" isFinal="true"/>
            <Field name="requireCloseNotify" type="boolean" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="+ctor(java.net.Socket)" returnType="[ext]void"/>
            <Method signature="getChannel()" returnType="[ext]java.nio.channels.SocketChannel" isFinal="true" visibility="public"/>
            <Method signature="bind(java.net.SocketAddress)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getLocalSocketAddress()" returnType="[ext]java.net.SocketAddress" visibility="public"/>
            <Method signature="getRemoteSocketAddress()" returnType="[ext]java.net.SocketAddress" visibility="public"/>
            <Method signature="connect(java.net.SocketAddress)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="isConnected()" returnType="[ext]boolean" isFinal="true" visibility="public"/>
            <Method signature="isBound()" returnType="[ext]boolean" isFinal="true" visibility="public"/>
            <Method signature="shutdownInput()" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="shutdownOutput()" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="isInputShutdown()" returnType="[ext]boolean" isFinal="true" visibility="public"/>
            <Method signature="isOutputShutdown()" returnType="[ext]boolean" isFinal="true" visibility="public"/>
            <Method signature="finalize()" returnType="[ext]void" isFinal="true" visibility="protected">
                <Throw mangling="java.lang.Throwable"/>
            </Method>
            <Method signature="getInetAddress()" returnType="[ext]java.net.InetAddress" isFinal="true" visibility="public"/>
            <Method signature="getLocalAddress()" returnType="[ext]java.net.InetAddress" isFinal="true" visibility="public"/>
            <Method signature="getPort()" returnType="[ext]int" isFinal="true" visibility="public"/>
            <Method signature="getLocalPort()" returnType="[ext]int" isFinal="true" visibility="public"/>
            <Method signature="setTcpNoDelay(boolean)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getTcpNoDelay()" returnType="[ext]boolean" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setSoLinger(boolean,int)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getSoLinger()" returnType="[ext]int" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="sendUrgentData(int)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setOOBInline(boolean)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getOOBInline()" returnType="[ext]boolean" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getSoTimeout()" returnType="[ext]int" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setSendBufferSize(int)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getSendBufferSize()" returnType="[ext]int" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setReceiveBufferSize(int)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getReceiveBufferSize()" returnType="[ext]int" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setKeepAlive(boolean)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getKeepAlive()" returnType="[ext]boolean" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setTrafficClass(int)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getTrafficClass()" returnType="[ext]int" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setReuseAddress(boolean)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="getReuseAddress()" returnType="[ext]boolean" isFinal="true" visibility="public">
                <Throw mangling="java.net.SocketException"/>
            </Method>
            <Method signature="setPerformancePreferences(int,int,int)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.CipherSuiteList" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.CipherSuite)" returnType="[ext]void"/>
            <Method signature="+ctor(java.lang.String[])" returnType="[ext]void"/>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="contains(com.sun.net.ssl.internal.ssl.CipherSuite)" returnType="[ext]boolean"/>
            <Method signature="iterator()" returnType="[ext]java.util.Iterator"/>
            <Method signature="size()" returnType="[ext]int"/>
            <Method signature="toStringArray()" returnType="[ext]java.lang.String[]"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="send(com.sun.net.ssl.internal.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="clearAvailableCache()" isStatic="true" returnType="[ext]void"/>
            <Method signature="getSupported()" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.CipherSuiteList"/>
            <Method signature="getDefault()" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.CipherSuiteList"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.InputRecord" extends="[ext]java.io.ByteArrayInputStream" isGeneric="false">
        <Extends mangling="java.io.ByteArrayInputStream"/>
        <Implements mangling="com.sun.net.ssl.internal.ssl.Record"/>
        <Fields>
            <Field name="formatVerified" type="boolean"/>
            <Field name="debug" type="com.sun.net.ssl.internal.ssl.Debug" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="setHelloVersion(com.sun.net.ssl.internal.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="getHelloVersion()" returnType="com.sun.net.ssl.internal.ssl.ProtocolVersion"/>
            <Method signature="enableFormatChecks()" returnType="[ext]void"/>
            <Method signature="isAppDataValid()" returnType="[ext]boolean"/>
            <Method signature="setAppDataValid(boolean)" returnType="[ext]void"/>
            <Method signature="contentType()" returnType="[ext]byte"/>
            <Method signature="setHandshakeHash(com.sun.net.ssl.internal.ssl.HandshakeHash)" returnType="[ext]void"/>
            <Method signature="getHandshakeHash()" returnType="com.sun.net.ssl.internal.ssl.HandshakeHash"/>
            <Method signature="checkMAC(com.sun.net.ssl.internal.ssl.MAC)" returnType="[ext]boolean"/>
            <Method signature="decrypt(com.sun.net.ssl.internal.ssl.CipherBox)" returnType="[ext]void">
                <Throw mangling="javax.crypto.BadPaddingException"/>
            </Method>
            <Method signature="ignore(int)" returnType="[ext]void"/>
            <Method signature="doHashes()" returnType="[ext]void"/>
            <Method signature="queueHandshake(com.sun.net.ssl.internal.ssl.InputRecord)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="close()" returnType="[ext]void" visibility="public"/>
            <Method signature="read(java.io.InputStream,java.io.OutputStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="writeBuffer(java.io.OutputStream,byte[],int,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="contentName(int)" isStatic="true" returnType="[ext]java.lang.String"/>
        </Methods>
    </Class>
    <Interface mangling="com.sun.net.ssl.internal.ssl.Record" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="ct_change_cipher_spec" type="byte" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="ct_alert" type="byte" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="ct_handshake" type="byte" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="ct_application_data" type="byte" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="headerSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxExpansion" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="trailerSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxDataSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxPadding" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxRecordSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxLargeRecordSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="maxAlertRecordSize" type="int" isStatic="true" isFinal="true" visibility="public"/>
        </Fields>
    </Interface>
    <Class mangling="com.sun.net.ssl.internal.ssl.HandshakeMessage$DistinguishedName" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="name" type="byte[]"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(javax.security.auth.x500.X500Principal)" returnType="[ext]void"/>
            <Method signature="getX500Principal()" returnType="[ext]javax.security.auth.x500.X500Principal">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="length()" returnType="[ext]int"/>
            <Method signature="send(com.sun.net.ssl.internal.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.HandshakeMessage" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="com.sun.net.ssl.internal.ssl.CipherSuiteConstants"/>
        <Fields>
            <Field name="ht_hello_request" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_client_hello" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_server_hello" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_certificate" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_server_key_exchange" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_certificate_request" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_server_hello_done" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_certificate_verify" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_client_key_exchange" type="byte" isStatic="true" isFinal="true"/>
            <Field name="ht_finished" type="byte" isStatic="true" isFinal="true"/>
            <Field name="debug" type="com.sun.net.ssl.internal.ssl.Debug" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="toByteArray(java.math.BigInteger)" isStatic="true" returnType="[ext]byte[]"/>
            <Method signature="write(com.sun.net.ssl.internal.ssl.HandshakeOutStream)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="messageType()" returnType="[ext]int" isAbstract="true"/>
            <Method signature="messageLength()" returnType="[ext]int" isAbstract="true"/>
            <Method signature="send(com.sun.net.ssl.internal.ssl.HandshakeOutStream)" returnType="[ext]void" isAbstract="true">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void" isAbstract="true">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.Handshaker$DelegatedTask" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]java.lang.Runnable"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.Handshaker,java.security.PrivilegedExceptionAction)" returnType="[ext]void"/>
            <Method signature="run()" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.Handshaker" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="com.sun.net.ssl.internal.ssl.CipherSuiteConstants"/>
        <Fields>
            <Field name="protocolVersion" type="com.sun.net.ssl.internal.ssl.ProtocolVersion"/>
            <Field name="enabledProtocols" type="com.sun.net.ssl.internal.ssl.ProtocolList"/>
            <Field name="conn" type="com.sun.net.ssl.internal.ssl.SSLSocketImpl"/>
            <Field name="engine" type="com.sun.net.ssl.internal.ssl.SSLEngineImpl"/>
            <Field name="handshakeHash" type="com.sun.net.ssl.internal.ssl.HandshakeHash"/>
            <Field name="input" type="com.sun.net.ssl.internal.ssl.HandshakeInStream"/>
            <Field name="output" type="com.sun.net.ssl.internal.ssl.HandshakeOutStream"/>
            <Field name="state" type="int"/>
            <Field name="sslContext" type="com.sun.net.ssl.internal.ssl.SSLContextImpl"/>
            <Field name="clnt_random" type="com.sun.net.ssl.internal.ssl.RandomCookie"/>
            <Field name="svr_random" type="com.sun.net.ssl.internal.ssl.RandomCookie"/>
            <Field name="session" type="com.sun.net.ssl.internal.ssl.SSLSessionImpl"/>
            <Field name="enabledCipherSuites" type="com.sun.net.ssl.internal.ssl.CipherSuiteList"/>
            <Field name="cipherSuite" type="com.sun.net.ssl.internal.ssl.CipherSuite"/>
            <Field name="keyExchange" type="com.sun.net.ssl.internal.ssl.CipherSuite.KeyExchange"/>
            <Field name="resumingSession" type="boolean"/>
            <Field name="enableNewSession" type="boolean"/>
            <Field name="debug" type="com.sun.net.ssl.internal.ssl.Debug" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.SSLSocketImpl,com.sun.net.ssl.internal.ssl.SSLContextImpl,com.sun.net.ssl.internal.ssl.ProtocolList,boolean,boolean)" returnType="[ext]void"/>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.SSLEngineImpl,com.sun.net.ssl.internal.ssl.SSLContextImpl,com.sun.net.ssl.internal.ssl.ProtocolList,boolean,boolean)" returnType="[ext]void"/>
            <Method signature="fatalSE(byte,java.lang.String)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="fatalSE(byte,java.lang.Throwable)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="fatalSE(byte,java.lang.String,java.lang.Throwable)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="warningSE(byte)" returnType="[ext]void"/>
            <Method signature="getHostSE()" returnType="[ext]java.lang.String"/>
            <Method signature="getHostAddressSE()" returnType="[ext]java.lang.String"/>
            <Method signature="isLoopbackSE()" returnType="[ext]boolean"/>
            <Method signature="getPortSE()" returnType="[ext]int"/>
            <Method signature="getLocalPortSE()" returnType="[ext]int"/>
            <Method signature="getAccSE()" returnType="[ext]java.security.AccessControlContext"/>
            <Method signature="setVersion(com.sun.net.ssl.internal.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="setEnabledProtocols(com.sun.net.ssl.internal.ssl.ProtocolList)" returnType="[ext]void"/>
            <Method signature="setCipherSuite(com.sun.net.ssl.internal.ssl.CipherSuite)" returnType="[ext]void"/>
            <Method signature="isEnabled(com.sun.net.ssl.internal.ssl.CipherSuite)" returnType="[ext]boolean"/>
            <Method signature="setEnableSessionCreation(boolean)" returnType="[ext]void"/>
            <Method signature="newReadCipher()" returnType="com.sun.net.ssl.internal.ssl.CipherBox">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="newWriteCipher()" returnType="com.sun.net.ssl.internal.ssl.CipherBox">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="newReadMAC()" returnType="com.sun.net.ssl.internal.ssl.MAC">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="newWriteMAC()" returnType="com.sun.net.ssl.internal.ssl.MAC">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="isDone()" returnType="[ext]boolean"/>
            <Method signature="getSession()" returnType="com.sun.net.ssl.internal.ssl.SSLSessionImpl"/>
            <Method signature="process_record(com.sun.net.ssl.internal.ssl.InputRecord,boolean)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="processLoop()" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="started()" returnType="[ext]boolean"/>
            <Method signature="kickstart()" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getKickstartMessage()" returnType="com.sun.net.ssl.internal.ssl.HandshakeMessage" isAbstract="true">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="processMessage(byte,int)" returnType="[ext]void" isAbstract="true">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="handshakeAlert(byte)" returnType="[ext]void" isAbstract="true">
                <Throw mangling="javax.net.ssl.SSLProtocolException"/>
            </Method>
            <Method signature="sendChangeCipherSpec(com.sun.net.ssl.internal.ssl.HandshakeMessage.Finished,boolean)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="calculateKeys(byte[])" returnType="[ext]void"/>
            <Method signature="calculateConnectionKeys(byte[])" returnType="[ext]void"/>
            <Method signature="throwSSLException(java.lang.String,java.lang.Throwable)" isStatic="true" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="getTask()" returnType="[ext]com.sun.net.ssl.internal.ssl.Handshaker.DelegatedTask"/>
            <Method signature="taskOutstanding()" returnType="[ext]boolean"/>
            <Method signature="checkThrown()" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.AppInputStream" extends="[ext]java.io.InputStream" isGeneric="false">
        <Extends mangling="java.io.InputStream"/>
        <Fields>
            <Field name="r" type="com.sun.net.ssl.internal.ssl.InputRecord"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.SSLSocketImpl)" returnType="[ext]void"/>
            <Method signature="available()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="read()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="read(byte[],int,int)" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="skip(long)" returnType="[ext]long" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="close()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.AppOutputStream" extends="[ext]java.io.OutputStream" isGeneric="false">
        <Extends mangling="java.io.OutputStream"/>
        <Fields>
            <Field name="r" type="com.sun.net.ssl.internal.ssl.OutputRecord"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.SSLSocketImpl)" returnType="[ext]void"/>
            <Method signature="write(byte[],int,int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="write(int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="close()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.ProtocolList" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="min" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isFinal="true"/>
            <Field name="max" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isFinal="true"/>
            <Field name="helloVersion" type="com.sun.net.ssl.internal.ssl.ProtocolVersion" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.lang.String[])" returnType="[ext]void"/>
            <Method signature="contains(com.sun.net.ssl.internal.ssl.ProtocolVersion)" returnType="[ext]boolean"/>
            <Method signature="toStringArray()" returnType="[ext]java.lang.String[]"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getDefault()" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.ProtocolList"/>
            <Method signature="getSupported()" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.ProtocolList"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.OutputRecord" extends="[ext]java.io.ByteArrayOutputStream" isGeneric="false">
        <Extends mangling="java.io.ByteArrayOutputStream"/>
        <Implements mangling="com.sun.net.ssl.internal.ssl.Record"/>
        <Fields>
            <Field name="protocolVersion" type="com.sun.net.ssl.internal.ssl.ProtocolVersion"/>
            <Field name="debug" type="com.sun.net.ssl.internal.ssl.Debug" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(byte,int)" returnType="[ext]void"/>
            <Method signature="+ctor(byte)" returnType="[ext]void"/>
            <Method signature="setVersion(com.sun.net.ssl.internal.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="setHelloVersion(com.sun.net.ssl.internal.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="reset()" returnType="[ext]void" visibility="public"/>
            <Method signature="setHandshakeHash(com.sun.net.ssl.internal.ssl.HandshakeHash)" returnType="[ext]void"/>
            <Method signature="doHashes()" returnType="[ext]void"/>
            <Method signature="isEmpty()" returnType="[ext]boolean"/>
            <Method signature="isAlert(byte)" returnType="[ext]boolean"/>
            <Method signature="addMAC(com.sun.net.ssl.internal.ssl.MAC)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="encrypt(com.sun.net.ssl.internal.ssl.CipherBox)" returnType="[ext]void"/>
            <Method signature="availableDataBytes()" returnType="[ext]int" isFinal="true"/>
            <Method signature="contentType()" returnType="[ext]byte" isFinal="true"/>
            <Method signature="write(java.io.OutputStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="writeBuffer(java.io.OutputStream,byte[],int,int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.HandshakeInStream" extends="[ext]java.io.InputStream" isGeneric="false">
        <Extends mangling="java.io.InputStream"/>
        <Fields>
            <Field name="r" type="com.sun.net.ssl.internal.ssl.InputRecord"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.HandshakeHash)" returnType="[ext]void"/>
            <Method signature="available()" returnType="[ext]int" visibility="public"/>
            <Method signature="read()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="read(byte[],int,int)" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="skip(long)" returnType="[ext]long" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="mark(int)" returnType="[ext]void" visibility="public"/>
            <Method signature="reset()" returnType="[ext]void" visibility="public"/>
            <Method signature="markSupported()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="incomingRecord(com.sun.net.ssl.internal.ssl.InputRecord)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="digestNow()" returnType="[ext]void"/>
            <Method signature="ignore(int)" returnType="[ext]void"/>
            <Method signature="getInt8()" returnType="[ext]int">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getInt16()" returnType="[ext]int">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getInt24()" returnType="[ext]int">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getInt32()" returnType="[ext]int">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getBytes8()" returnType="[ext]byte[]">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getBytes16()" returnType="[ext]byte[]">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getBytes24()" returnType="[ext]byte[]">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.HandshakeOutStream" extends="[ext]java.io.OutputStream" isGeneric="false">
        <Extends mangling="java.io.OutputStream"/>
        <Fields>
            <Field name="r" type="com.sun.net.ssl.internal.ssl.OutputRecord"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.ProtocolVersion,com.sun.net.ssl.internal.ssl.ProtocolVersion,com.sun.net.ssl.internal.ssl.HandshakeHash,com.sun.net.ssl.internal.ssl.SSLSocketImpl)" returnType="[ext]void"/>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.ProtocolVersion,com.sun.net.ssl.internal.ssl.ProtocolVersion,com.sun.net.ssl.internal.ssl.HandshakeHash,com.sun.net.ssl.internal.ssl.SSLEngineImpl)" returnType="[ext]void"/>
            <Method signature="doHashes()" returnType="[ext]void"/>
            <Method signature="write(byte[],int,int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="write(int)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="flush()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setFinishedMsg()" returnType="[ext]void"/>
            <Method signature="putInt8(int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putInt16(int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putInt24(int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putInt32(int)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putBytes8(byte[])" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putBytes16(byte[])" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putBytes24(byte[])" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.HandshakeHash" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(boolean)" returnType="[ext]void"/>
            <Method signature="update(byte)" returnType="[ext]void"/>
            <Method signature="update(byte[],int,int)" returnType="[ext]void"/>
            <Method signature="reset()" returnType="[ext]void"/>
            <Method signature="getMD5Clone()" returnType="[ext]java.security.MessageDigest"/>
            <Method signature="getSHAClone()" returnType="[ext]java.security.MessageDigest"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SSLEngineImpl" extends="javax.net.ssl.SSLEngine" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="javax.net.ssl.SSLEngine"/>
        <Fields>
            <Field name="writer" type="com.sun.net.ssl.internal.ssl.EngineWriter"/>
            <Field name="clauth_none" type="byte" isStatic="true" isFinal="true"/>
            <Field name="clauth_requested" type="byte" isStatic="true" isFinal="true"/>
            <Field name="clauth_required" type="byte" isStatic="true" isFinal="true"/>
            <Field name="inputRecord" type="com.sun.net.ssl.internal.ssl.EngineInputRecord"/>
            <Field name="outputRecord" type="com.sun.net.ssl.internal.ssl.EngineOutputRecord"/>
            <Field name="wrapLock" type="java.lang.Object"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.SSLContextImpl)" returnType="[ext]void"/>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.SSLContextImpl,java.lang.String,int)" returnType="[ext]void"/>
            <Method signature="getAcc()" returnType="[ext]java.security.AccessControlContext"/>
            <Method signature="getHandshakeStatus()" returnType="[ext]javax.net.ssl.SSLEngineResult.HandshakeStatus" visibility="public"/>
            <Method signature="changeWriteCiphers()" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="setVersion(com.sun.net.ssl.internal.ssl.ProtocolVersion)" returnType="[ext]void"/>
            <Method signature="beginHandshake()" returnType="[ext]void" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)" returnType="javax.net.ssl.SSLEngineResult" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)" returnType="javax.net.ssl.SSLEngineResult" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="writeRecord(com.sun.net.ssl.internal.ssl.EngineOutputRecord)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="closeOutbound()" returnType="[ext]void" visibility="public"/>
            <Method signature="isOutboundDone()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="closeInbound()" returnType="[ext]void" visibility="public">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="isInboundDone()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getSession()" returnType="javax.net.ssl.SSLSession" visibility="public"/>
            <Method signature="getDelegatedTask()" returnType="[ext]java.lang.Runnable" visibility="public"/>
            <Method signature="warning(byte)" returnType="[ext]void"/>
            <Method signature="fatal(byte,java.lang.String)" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="fatal(byte,java.lang.Throwable)" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="fatal(byte,java.lang.String,java.lang.Throwable)" returnType="[ext]void">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="setEnableSessionCreation(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnableSessionCreation()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setNeedClientAuth(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getNeedClientAuth()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setWantClientAuth(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getWantClientAuth()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setUseClientMode(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getUseClientMode()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setEnabledCipherSuites(java.lang.String[])" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnabledCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getSupportedProtocols()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setEnabledProtocols(java.lang.String[])" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnabledProtocols()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.RandomCookie" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="random_bytes" type="byte[]"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.security.SecureRandom)" returnType="[ext]void"/>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.HandshakeInStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="send(com.sun.net.ssl.internal.ssl.HandshakeOutStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="print(java.io.PrintStream)" returnType="[ext]void"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.DHKeyExchange" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(boolean)" returnType="[ext]void"/>
            <Method signature="+ctor(java.math.BigInteger,java.math.BigInteger)" returnType="[ext]void"/>
            <Method signature="getModulus()" returnType="[ext]java.math.BigInteger"/>
            <Method signature="getBase()" returnType="[ext]java.math.BigInteger"/>
            <Method signature="generateKeyPair(java.security.SecureRandom,int)" returnType="[ext]void"/>
            <Method signature="getPublicKey()" returnType="[ext]java.math.BigInteger"/>
            <Method signature="getAgreedSecret(java.math.BigInteger)" returnType="[ext]byte[]"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.EngineWriter" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="writeRecord(com.sun.net.ssl.internal.ssl.EngineOutputRecord,com.sun.net.ssl.internal.ssl.MAC,com.sun.net.ssl.internal.ssl.CipherBox)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="writeRecord(com.sun.net.ssl.internal.ssl.EngineOutputRecord,com.sun.net.ssl.internal.ssl.EngineArgs,com.sun.net.ssl.internal.ssl.MAC,com.sun.net.ssl.internal.ssl.CipherBox)" returnType="[ext]javax.net.ssl.SSLEngineResult.HandshakeStatus">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="putOutboundData(java.nio.ByteBuffer)" returnType="[ext]void"/>
            <Method signature="putOutboundDataSync(java.nio.ByteBuffer)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="hasOutboundData()" returnType="[ext]boolean"/>
            <Method signature="isOutboundDone()" returnType="[ext]boolean"/>
            <Method signature="closeOutbound()" returnType="[ext]void"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.EngineArgs" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="netData" type="java.nio.ByteBuffer"/>
            <Field name="appData" type="java.nio.ByteBuffer[]"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)" returnType="[ext]void"/>
            <Method signature="+ctor(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)" returnType="[ext]void"/>
            <Method signature="gather(int)" returnType="[ext]void"/>
            <Method signature="scatter(java.nio.ByteBuffer)" returnType="[ext]void"/>
            <Method signature="getAppRemaining()" returnType="[ext]int"/>
            <Method signature="deltaNet()" returnType="[ext]int"/>
            <Method signature="deltaApp()" returnType="[ext]int"/>
            <Method signature="resetPos()" returnType="[ext]void"/>
            <Method signature="resetLim()" returnType="[ext]void"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.KerberosPreMasterSecret" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.ProtocolVersion,java.security.SecureRandom,sun.security.krb5.EncryptionKey)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.ProtocolVersion,com.sun.net.ssl.internal.ssl.ProtocolVersion,java.security.SecureRandom,com.sun.net.ssl.internal.ssl.HandshakeInStream,sun.security.krb5.EncryptionKey)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.ProtocolVersion,java.security.SecureRandom)" returnType="[ext]void"/>
            <Method signature="getUnencrypted()" returnType="[ext]byte[]"/>
            <Method signature="getEncrypted()" returnType="[ext]byte[]"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.CloneableDigest" extends="[ext]java.security.MessageDigest" isGeneric="false" isFinal="true">
        <Extends mangling="java.security.MessageDigest"/>
        <Implements mangling="[ext]java.lang.Cloneable"/>
        <Fields/>
        <Methods>
            <Method signature="getDigest(java.lang.String,int)" isStatic="true" returnType="[ext]java.security.MessageDigest">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="engineGetDigestLength()" returnType="[ext]int" visibility="protected"/>
            <Method signature="engineUpdate(byte)" returnType="[ext]void" visibility="protected"/>
            <Method signature="engineUpdate(byte[],int,int)" returnType="[ext]void" visibility="protected"/>
            <Method signature="engineDigest()" returnType="[ext]byte[]" visibility="protected"/>
            <Method signature="engineDigest(byte[],int,int)" returnType="[ext]int" visibility="protected">
                <Throw mangling="java.security.DigestException"/>
            </Method>
            <Method signature="engineReset()" returnType="[ext]void" visibility="protected"/>
            <Method signature="clone()" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.TrustManagerFactoryImpl" extends="javax.net.ssl.TrustManagerFactorySpi" isGeneric="false">
        <Extends mangling="javax.net.ssl.TrustManagerFactorySpi"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="engineInit(java.security.KeyStore)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="getInstance(java.security.KeyStore)" returnType="javax.net.ssl.X509TrustManager" isAbstract="true">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="getInstance(javax.net.ssl.ManagerFactoryParameters)" returnType="javax.net.ssl.X509TrustManager" isAbstract="true">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
            <Method signature="engineInit(javax.net.ssl.ManagerFactoryParameters)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidAlgorithmParameterException"/>
            </Method>
            <Method signature="engineGetTrustManagers()" returnType="[ext]javax.net.ssl.TrustManager[]" visibility="protected"/>
            <Method signature="getFileInputStream(java.io.File)" isStatic="true" returnType="[ext]java.io.FileInputStream">
                <Throw mangling="java.lang.Exception"/>
            </Method>
            <Method signature="getCacertsKeyStore(java.lang.String)" isStatic="true" returnType="[ext]java.security.KeyStore">
                <Throw mangling="java.lang.Exception"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.JsseJce" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="CIPHER_RSA_PKCS1" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="CIPHER_RC4" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="CIPHER_DES" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="CIPHER_3DES" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="CIPHER_AES" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="SIGNATURE_DSA" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="SIGNATURE_RAWDSA" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="SIGNATURE_RAWRSA" type="java.lang.String" isStatic="true" isFinal="true"/>
            <Field name="SIGNATURE_SSLRSA" type="java.lang.String" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="getCipher(java.lang.String)" isStatic="true" returnType="[ext]javax.crypto.Cipher">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getSignature(java.lang.String)" isStatic="true" returnType="[ext]java.security.Signature">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getMD5()" isStatic="true" returnType="[ext]java.security.MessageDigest"/>
            <Method signature="getSHA()" isStatic="true" returnType="[ext]java.security.MessageDigest"/>
            <Method signature="getRSAKeyLength(java.security.PublicKey)" isStatic="true" returnType="[ext]int"/>
            <Method signature="getRSAPublicKeySpec(java.security.PublicKey)" isStatic="true" returnType="[ext]java.security.spec.RSAPublicKeySpec"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SSLServerSocketImpl" extends="javax.net.ssl.SSLServerSocket" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.SSLServerSocket"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(int,int,com.sun.net.ssl.internal.ssl.SSLContextImpl)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="+ctor(int,int,java.net.InetAddress,com.sun.net.ssl.internal.ssl.SSLContextImpl)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(com.sun.net.ssl.internal.ssl.SSLContextImpl)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getSupportedCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getEnabledCipherSuites()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setEnabledCipherSuites(java.lang.String[])" returnType="[ext]void" visibility="public"/>
            <Method signature="getSupportedProtocols()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setEnabledProtocols(java.lang.String[])" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnabledProtocols()" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="setNeedClientAuth(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getNeedClientAuth()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setWantClientAuth(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getWantClientAuth()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setUseClientMode(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getUseClientMode()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setEnableSessionCreation(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getEnableSessionCreation()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="accept()" returnType="[ext]java.net.Socket" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.Alerts" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="alert_warning" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_fatal" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_close_notify" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_unexpected_message" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_bad_record_mac" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_decryption_failed" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_record_overflow" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_decompression_failure" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_handshake_failure" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_no_certificate" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_bad_certificate" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_unsupported_certificate" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_certificate_revoked" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_certificate_expired" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_certificate_unknown" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_illegal_parameter" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_unknown_ca" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_access_denied" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_decode_error" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_decrypt_error" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_export_restriction" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_protocol_version" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_insufficient_security" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_internal_error" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_user_canceled" type="byte" isStatic="true" isFinal="true"/>
            <Field name="alert_no_negotiation" type="byte" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="alertDescription(byte)" isStatic="true" returnType="[ext]java.lang.String"/>
            <Method signature="getSSLException(byte,java.lang.String)" isStatic="true" returnType="javax.net.ssl.SSLException"/>
            <Method signature="getSSLException(byte,java.lang.Throwable,java.lang.String)" isStatic="true" returnType="javax.net.ssl.SSLException"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.RSASignature" extends="[ext]java.security.SignatureSpi" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.security.SignatureSpi"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getInstance()" isStatic="true" returnType="[ext]java.security.Signature">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getInternalInstance()" isStatic="true" returnType="[ext]java.security.Signature">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
            </Method>
            <Method signature="setHashes(java.security.Signature,java.security.MessageDigest,java.security.MessageDigest)" isStatic="true" returnType="[ext]void"/>
            <Method signature="engineInitVerify(java.security.PublicKey)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="engineInitSign(java.security.PrivateKey)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="engineInitSign(java.security.PrivateKey,java.security.SecureRandom)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="engineUpdate(byte)" returnType="[ext]void" visibility="protected"/>
            <Method signature="engineUpdate(byte[],int,int)" returnType="[ext]void" visibility="protected"/>
            <Method signature="engineSign()" returnType="[ext]byte[]" visibility="protected">
                <Throw mangling="java.security.SignatureException"/>
            </Method>
            <Method signature="engineVerify(byte[])" returnType="[ext]boolean" visibility="protected">
                <Throw mangling="java.security.SignatureException"/>
            </Method>
            <Method signature="engineVerify(byte[],int,int)" returnType="[ext]boolean" visibility="protected">
                <Throw mangling="java.security.SignatureException"/>
            </Method>
            <Method signature="engineSetParameter(java.lang.String,java.lang.Object)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidParameterException"/>
            </Method>
            <Method signature="engineGetParameter(java.lang.String)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.InvalidParameterException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.PRF" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="LABEL_MASTER_SECRET" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="LABEL_KEY_EXPANSION" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="LABEL_CLIENT_WRITE_KEY" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="LABEL_SERVER_WRITE_KEY" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="LABEL_IV_BLOCK" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="LABEL_CLIENT_FINISHED" type="byte[]" isStatic="true" isFinal="true"/>
            <Field name="LABEL_SERVER_FINISHED" type="byte[]" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="compute(java.security.MessageDigest,java.security.MessageDigest,byte[],byte[],byte[],byte[],byte[])" isStatic="true" returnType="[ext]void" isFinal="true"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.RSACipher" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="encryptInit(java.security.PublicKey,java.security.SecureRandom)" returnType="[ext]void">
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="decryptInit(java.security.PrivateKey)" returnType="[ext]void">
                <Throw mangling="java.security.InvalidKeyException"/>
            </Method>
            <Method signature="doEncrypt(byte[],int,int)" returnType="[ext]byte[]">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="doDecrypt(byte[],int,int)" returnType="[ext]byte[]">
                <Throw mangling="javax.net.ssl.SSLException"/>
            </Method>
            <Method signature="getInstance()" isStatic="true" returnType="com.sun.net.ssl.internal.ssl.RSACipher">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.ByteBufferInputStream" extends="[ext]java.io.InputStream" isGeneric="false">
        <Extends mangling="java.io.InputStream"/>
        <Fields>
            <Field name="bb" type="java.nio.ByteBuffer"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.nio.ByteBuffer)" returnType="[ext]void"/>
            <Method signature="read()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="read(byte[])" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="read(byte[],int,int)" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="skip(long)" returnType="[ext]long" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="available()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="close()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="mark(int)" returnType="[ext]void" visibility="public"/>
            <Method signature="reset()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="markSupported()" returnType="[ext]boolean" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.X509TrustManagerImpl" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.X509TrustManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String,java.security.KeyStore)" returnType="[ext]void">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="+ctor(java.lang.String,java.security.cert.PKIXBuilderParameters)" returnType="[ext]void"/>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="getAcceptedIssuers()" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.KeyManagerFactoryImpl" extends="javax.net.ssl.KeyManagerFactorySpi" isGeneric="false">
        <Extends mangling="javax.net.ssl.KeyManagerFactorySpi"/>
        <Fields>
            <Field name="keyManager" type="javax.net.ssl.X509ExtendedKeyManager"/>
            <Field name="isInitialized" type="boolean"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void"/>
            <Method signature="engineGetKeyManagers()" returnType="[ext]javax.net.ssl.KeyManager[]" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.MacData" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(sun.security.util.DerInputStream)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="sun.security.pkcs.ParsingException"/>
            </Method>
            <Method signature="+ctor(java.lang.String,byte[],byte[],int)" returnType="[ext]void">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="+ctor(java.security.AlgorithmParameters,byte[],byte[],int)" returnType="[ext]void">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getDigestAlgName()" returnType="[ext]java.lang.String"/>
            <Method signature="getSalt()" returnType="[ext]byte[]"/>
            <Method signature="getIterations()" returnType="[ext]int"/>
            <Method signature="getDigest()" returnType="[ext]byte[]"/>
            <Method signature="getEncoded()" returnType="[ext]byte[]" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.PKCS12KeyStore$KeyEntry" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="date" type="java.util.Date"/>
            <Field name="protectedPrivKey" type="byte[]"/>
            <Field name="chain" type="java.security.cert.Certificate[]"/>
            <Field name="keyId" type="byte[]"/>
            <Field name="alias" type="java.lang.String"/>
        </Fields>
        <Methods/>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.PKCS12KeyStore$KeyId" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="keyId" type="byte[]"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(byte[])" returnType="[ext]void"/>
            <Method signature="hashCode()" returnType="[ext]int" visibility="public"/>
            <Method signature="equals(java.lang.Object)" returnType="[ext]boolean" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.PKCS12KeyStore" extends="[ext]java.security.KeyStoreSpi" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.security.KeyStoreSpi"/>
        <Fields>
            <Field name="VERSION_3" type="int" isStatic="true" isFinal="true" visibility="public"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="engineGetKey(java.lang.String,char[])" returnType="[ext]java.security.Key" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.UnrecoverableKeyException"/>
            </Method>
            <Method signature="engineGetCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.Certificate[]" visibility="public"/>
            <Method signature="engineGetCertificate(java.lang.String)" returnType="[ext]java.security.cert.Certificate" visibility="public"/>
            <Method signature="engineGetCreationDate(java.lang.String)" returnType="[ext]java.util.Date" visibility="public"/>
            <Method signature="engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="engineDeleteEntry(java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="engineAliases()" returnType="[ext]java.util.Enumeration" visibility="public"/>
            <Method signature="engineContainsAlias(java.lang.String)" returnType="[ext]boolean" visibility="public"/>
            <Method signature="engineSize()" returnType="[ext]int" visibility="public"/>
            <Method signature="engineIsKeyEntry(java.lang.String)" returnType="[ext]boolean" visibility="public"/>
            <Method signature="engineIsCertificateEntry(java.lang.String)" returnType="[ext]boolean" visibility="public"/>
            <Method signature="engineGetCertificateAlias(java.security.cert.Certificate)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="engineStore(java.io.OutputStream,char[])" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="engineLoad(java.io.InputStream,char[])" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.Provider" extends="[ext]java.security.Provider" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.security.Provider"/>
        <Fields/>
        <Methods>
            <Method signature="install()" isStatic="true" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SunX509KeyManagerImpl$X509Credentials" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Fields>
            <Field name="privateKey" type="java.security.PrivateKey"/>
            <Field name="certificates" type="java.security.cert.X509Certificate[]"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.security.PrivateKey,java.security.cert.X509Certificate[])" returnType="[ext]void"/>
            <Method signature="getIssuerX500Principals()" returnType="[ext]java.util.Set"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.SunX509KeyManagerImpl" extends="javax.net.ssl.X509ExtendedKeyManager" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.X509ExtendedKeyManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.security.KeyStore,char[])" returnType="[ext]void">
                <Throw mangling="java.security.KeyStoreException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.UnrecoverableKeyException"/>
            </Method>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl$SizedMap" extends="[ext]java.util.LinkedHashMap" isGeneric="true" genParams="K,V">
        <Extends mangling="java.util.LinkedHashMap" genParams="K,V"/>
        <Methods>
            <Method signature="removeEldestEntry(java.util.Map.Entry&lt;K,V&gt;)" returnType="[ext]boolean" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl$EntryStatus" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="[ext]java.lang.Comparable" genParams="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.EntryStatus"/>
        <Fields>
            <Field name="builderIndex" type="int" isFinal="true"/>
            <Field name="alias" type="java.lang.String" isFinal="true"/>
            <Field name="checkResult" type="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckResult" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(int,java.lang.String,java.security.cert.Certificate[],com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckResult)" returnType="[ext]void"/>
            <Method signature="compareTo(com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.EntryStatus)" returnType="[ext]int" visibility="public"/>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl$CheckType" extends="[ext]java.lang.Enum" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Enum" genParams="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckType"/>
        <Fields>
            <Field name="NONE" type="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckType" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="CLIENT" type="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckType" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="SERVER" type="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckType" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="validEku" type="java.util.Set" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="values()" isStatic="true" returnType="[ext]com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckType[]" isFinal="true" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="[ext]com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckType" visibility="public"/>
            <Method signature="check(java.security.cert.X509Certificate,java.util.Date)" returnType="[ext]com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckResult"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl$CheckResult" extends="[ext]java.lang.Enum" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Enum" genParams="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckResult"/>
        <Fields>
            <Field name="OK" type="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckResult" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="EXPIRED" type="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckResult" isStatic="true" isFinal="true" visibility="public"/>
            <Field name="EXTENSION_MISMATCH" type="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckResult" isStatic="true" isFinal="true" visibility="public"/>
        </Fields>
        <Methods>
            <Method signature="values()" isStatic="true" returnType="[ext]com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckResult[]" isFinal="true" visibility="public"/>
            <Method signature="valueOf(java.lang.String)" isStatic="true" returnType="[ext]com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckResult" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.ssl.X509KeyManagerImpl" extends="javax.net.ssl.X509ExtendedKeyManager" isGeneric="false" isFinal="true">
        <Extends mangling="javax.net.ssl.X509ExtendedKeyManager"/>
        <Implements mangling="javax.net.ssl.X509KeyManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.security.KeyStore.Builder)" returnType="[ext]void"/>
            <Method signature="+ctor(java.util.List&lt;java.security.KeyStore.Builder&gt;)" returnType="[ext]void"/>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="getAliases(java.lang.String,java.security.Principal[],com.sun.net.ssl.internal.ssl.X509KeyManagerImpl.CheckType)" returnType="[ext]java.lang.String[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.www.protocol.https.Handler" extends="sun.net.www.protocol.https.Handler" isGeneric="false" visibility="public">
        <Extends mangling="sun.net.www.protocol.https.Handler"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String,int)" returnType="[ext]void" visibility="public"/>
            <Method signature="openConnection(java.net.URL)" returnType="[ext]java.net.URLConnection" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="openConnection(java.net.URL,java.net.Proxy)" returnType="[ext]java.net.URLConnection" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.www.protocol.https.HttpsURLConnectionOldImpl" extends="com.sun.net.ssl.HttpsURLConnection" isGeneric="false" visibility="public">
        <Extends mangling="com.sun.net.ssl.HttpsURLConnection"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.net.URL,com.sun.net.ssl.internal.www.protocol.https.Handler)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(java.net.URL,java.net.Proxy,com.sun.net.ssl.internal.www.protocol.https.Handler)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setNewClient(java.net.URL)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setNewClient(java.net.URL,boolean)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setProxiedClient(java.net.URL,java.lang.String,int)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="setProxiedClient(java.net.URL,java.lang.String,int,boolean)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="connect()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="isConnected()" returnType="[ext]boolean" visibility="protected"/>
            <Method signature="setConnected(boolean)" returnType="[ext]void" visibility="protected"/>
            <Method signature="getCipherSuite()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getLocalCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public"/>
            <Method signature="getServerCertificates()" returnType="[ext]java.security.cert.Certificate[]" visibility="public">
                <Throw mangling="javax.net.ssl.SSLPeerUnverifiedException"/>
            </Method>
            <Method signature="getServerCertificateChain()" returnType="[ext]javax.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getOutputStream()" returnType="[ext]java.io.OutputStream" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getInputStream()" returnType="[ext]java.io.InputStream" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getErrorStream()" returnType="[ext]java.io.InputStream" visibility="public"/>
            <Method signature="disconnect()" returnType="[ext]void" visibility="public"/>
            <Method signature="usingProxy()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getHeaderFields()" returnType="[ext]java.util.Map" visibility="public"/>
            <Method signature="getHeaderField(java.lang.String)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getHeaderField(int)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getHeaderFieldKey(int)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="setRequestProperty(java.lang.String,java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="addRequestProperty(java.lang.String,java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="getResponseCode()" returnType="[ext]int" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getRequestProperty(java.lang.String)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getRequestProperties()" returnType="[ext]java.util.Map" visibility="public"/>
            <Method signature="setInstanceFollowRedirects(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getInstanceFollowRedirects()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setRequestMethod(java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.net.ProtocolException"/>
            </Method>
            <Method signature="getRequestMethod()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getResponseMessage()" returnType="[ext]java.lang.String" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getHeaderFieldDate(java.lang.String,long)" returnType="[ext]long" visibility="public"/>
            <Method signature="getPermission()" returnType="[ext]java.security.Permission" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getURL()" returnType="[ext]java.net.URL" visibility="public"/>
            <Method signature="getContentLength()" returnType="[ext]int" visibility="public"/>
            <Method signature="getContentType()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getContentEncoding()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getExpiration()" returnType="[ext]long" visibility="public"/>
            <Method signature="getDate()" returnType="[ext]long" visibility="public"/>
            <Method signature="getLastModified()" returnType="[ext]long" visibility="public"/>
            <Method signature="getHeaderFieldInt(java.lang.String,int)" returnType="[ext]int" visibility="public"/>
            <Method signature="getContent()" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getContent(java.lang.Class[])" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="setDoInput(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getDoInput()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setDoOutput(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getDoOutput()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setAllowUserInteraction(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getAllowUserInteraction()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setUseCaches(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="getUseCaches()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setIfModifiedSince(long)" returnType="[ext]void" visibility="public"/>
            <Method signature="getIfModifiedSince()" returnType="[ext]long" visibility="public"/>
            <Method signature="getDefaultUseCaches()" returnType="[ext]boolean" visibility="public"/>
            <Method signature="setDefaultUseCaches(boolean)" returnType="[ext]void" visibility="public"/>
            <Method signature="finalize()" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.lang.Throwable"/>
            </Method>
            <Method signature="equals(java.lang.Object)" returnType="[ext]boolean" visibility="public"/>
            <Method signature="hashCode()" returnType="[ext]int" visibility="public"/>
            <Method signature="setConnectTimeout(int)" returnType="[ext]void" visibility="public"/>
            <Method signature="getConnectTimeout()" returnType="[ext]int" visibility="public"/>
            <Method signature="setReadTimeout(int)" returnType="[ext]void" visibility="public"/>
            <Method signature="getReadTimeout()" returnType="[ext]int" visibility="public"/>
            <Method signature="setFixedLengthStreamingMode(int)" returnType="[ext]void" visibility="public"/>
            <Method signature="setChunkedStreamingMode(int)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.www.protocol.https.DelegateHttpsURLConnection" extends="sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection" isGeneric="false" visibility="public">
        <Extends mangling="sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection"/>
        <Fields>
            <Field name="httpsURLConnection" type="com.sun.net.ssl.HttpsURLConnection" visibility="public"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.net.URL,sun.net.www.protocol.http.Handler,com.sun.net.ssl.HttpsURLConnection)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="+ctor(java.net.URL,java.net.Proxy,sun.net.www.protocol.http.Handler,com.sun.net.ssl.HttpsURLConnection)" returnType="[ext]void">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getSSLSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory" visibility="protected"/>
            <Method signature="getHostnameVerifier()" returnType="javax.net.ssl.HostnameVerifier" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.internal.www.protocol.https.VerifierWrapper" extends="[ext]java.lang.Object" isGeneric="false">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.HostnameVerifier"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.HostnameVerifier)" returnType="[ext]void"/>
            <Method signature="verify(java.lang.String,javax.net.ssl.SSLSession)" returnType="[ext]boolean" visibility="public"/>
        </Methods>
    </Class>
    <Interface mangling="com.sun.net.ssl.HostnameVerifier" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="verify(java.lang.String,java.lang.String)" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
        </Methods>
    </Interface>
    <Class mangling="com.sun.net.ssl.HttpsURLConnection" extends="[ext]java.net.HttpURLConnection" isGeneric="false" visibility="public">
        <Extends mangling="java.net.HttpURLConnection"/>
        <Fields>
            <Field name="hostnameVerifier" type="com.sun.net.ssl.HostnameVerifier" visibility="protected"/>
        </Fields>
        <Methods>
            <Method signature="+ctor(java.net.URL)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.io.IOException"/>
            </Method>
            <Method signature="getCipherSuite()" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getServerCertificateChain()" returnType="[ext]javax.security.cert.X509Certificate[]" isAbstract="true" visibility="public"/>
            <Method signature="setDefaultHostnameVerifier(com.sun.net.ssl.HostnameVerifier)" isStatic="true" returnType="[ext]void" visibility="public"/>
            <Method signature="getDefaultHostnameVerifier()" isStatic="true" returnType="com.sun.net.ssl.HostnameVerifier" visibility="public"/>
            <Method signature="setHostnameVerifier(com.sun.net.ssl.HostnameVerifier)" returnType="[ext]void" visibility="public"/>
            <Method signature="getHostnameVerifier()" returnType="com.sun.net.ssl.HostnameVerifier" visibility="public"/>
            <Method signature="setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)" isStatic="true" returnType="[ext]void" visibility="public"/>
            <Method signature="getDefaultSSLSocketFactory()" isStatic="true" returnType="javax.net.ssl.SSLSocketFactory" visibility="public"/>
            <Method signature="setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)" returnType="[ext]void" visibility="public"/>
            <Method signature="getSSLSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory" visibility="public"/>
        </Methods>
    </Class>
    <Interface mangling="com.sun.net.ssl.KeyManager" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
    </Interface>
    <Class mangling="com.sun.net.ssl.KeyManagerFactory" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="getDefaultAlgorithm()" isStatic="true" returnType="[ext]java.lang.String" isFinal="true" visibility="public"/>
            <Method signature="+ctor(com.sun.net.ssl.KeyManagerFactorySpi,java.security.Provider,java.lang.String)" returnType="[ext]void" visibility="protected"/>
            <Method signature="getAlgorithm()" returnType="[ext]java.lang.String" isFinal="true" visibility="public"/>
            <Method signature="getInstance(java.lang.String)" isStatic="true" returnType="com.sun.net.ssl.KeyManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.lang.String)" isStatic="true" returnType="com.sun.net.ssl.KeyManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.security.Provider)" isStatic="true" returnType="com.sun.net.ssl.KeyManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getProvider()" returnType="[ext]java.security.Provider" isFinal="true" visibility="public"/>
            <Method signature="init(java.security.KeyStore,char[])" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.KeyStoreException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.UnrecoverableKeyException"/>
            </Method>
            <Method signature="getKeyManagers()" returnType="[ext]com.sun.net.ssl.KeyManager[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.KeyManagerFactorySpi" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="engineInit(java.security.KeyStore,char[])" returnType="[ext]void" isAbstract="true" visibility="protected">
                <Throw mangling="java.security.KeyStoreException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.UnrecoverableKeyException"/>
            </Method>
            <Method signature="engineGetKeyManagers()" returnType="[ext]com.sun.net.ssl.KeyManager[]" isAbstract="true" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.SSLContext" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.SSLContextSpi,java.security.Provider,java.lang.String)" returnType="[ext]void" visibility="protected"/>
            <Method signature="getInstance(java.lang.String)" isStatic="true" returnType="com.sun.net.ssl.SSLContext" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.lang.String)" isStatic="true" returnType="com.sun.net.ssl.SSLContext" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.security.Provider)" isStatic="true" returnType="com.sun.net.ssl.SSLContext" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getProtocol()" returnType="[ext]java.lang.String" isFinal="true" visibility="public"/>
            <Method signature="getProvider()" returnType="[ext]java.security.Provider" isFinal="true" visibility="public"/>
            <Method signature="init(com.sun.net.ssl.KeyManager[],com.sun.net.ssl.TrustManager[],java.security.SecureRandom)" returnType="[ext]void" isFinal="true" visibility="public">
                <Throw mangling="java.security.KeyManagementException"/>
            </Method>
            <Method signature="getSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory" isFinal="true" visibility="public"/>
            <Method signature="getServerSocketFactory()" returnType="javax.net.ssl.SSLServerSocketFactory" isFinal="true" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.SSLContextSpi" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="engineInit(com.sun.net.ssl.KeyManager[],com.sun.net.ssl.TrustManager[],java.security.SecureRandom)" returnType="[ext]void" isAbstract="true" visibility="protected">
                <Throw mangling="java.security.KeyManagementException"/>
            </Method>
            <Method signature="engineGetSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory" isAbstract="true" visibility="protected"/>
            <Method signature="engineGetServerSocketFactory()" returnType="javax.net.ssl.SSLServerSocketFactory" isAbstract="true" visibility="protected"/>
        </Methods>
    </Class>
    <Interface mangling="com.sun.net.ssl.TrustManager" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
    </Interface>
    <Class mangling="com.sun.net.ssl.SSLPermission" extends="[ext]java.security.BasicPermission" isGeneric="false" isFinal="true" visibility="public">
        <Extends mangling="java.security.BasicPermission"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String)" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(java.lang.String,java.lang.String)" returnType="[ext]void" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.SSLSecurity" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="getImpl(java.lang.String,java.lang.String,java.lang.String)" isStatic="true" returnType="[ext]java.lang.Object[]">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
            </Method>
            <Method signature="getImpl(java.lang.String,java.lang.String,java.security.Provider)" isStatic="true" returnType="[ext]java.lang.Object[]">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="truncateArray(java.lang.Object[],java.lang.Object[])" isStatic="true" returnType="[ext]java.lang.Object[]"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.SSLContextSpiWrapper" extends="com.sun.net.ssl.SSLContextSpi" isGeneric="false" isFinal="true">
        <Extends mangling="com.sun.net.ssl.SSLContextSpi"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String,java.security.Provider)" returnType="[ext]void">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="engineInit(com.sun.net.ssl.KeyManager[],com.sun.net.ssl.TrustManager[],java.security.SecureRandom)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.KeyManagementException"/>
            </Method>
            <Method signature="engineGetSocketFactory()" returnType="javax.net.ssl.SSLSocketFactory" visibility="protected"/>
            <Method signature="engineGetServerSocketFactory()" returnType="javax.net.ssl.SSLServerSocketFactory" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.TrustManagerFactorySpiWrapper" extends="com.sun.net.ssl.TrustManagerFactorySpi" isGeneric="false" isFinal="true">
        <Extends mangling="com.sun.net.ssl.TrustManagerFactorySpi"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String,java.security.Provider)" returnType="[ext]void">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="engineInit(java.security.KeyStore)" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="engineGetTrustManagers()" returnType="[ext]com.sun.net.ssl.TrustManager[]" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.TrustManagerFactorySpi" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="engineInit(java.security.KeyStore)" returnType="[ext]void" isAbstract="true" visibility="protected">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="engineGetTrustManagers()" returnType="[ext]com.sun.net.ssl.TrustManager[]" isAbstract="true" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.KeyManagerFactorySpiWrapper" extends="com.sun.net.ssl.KeyManagerFactorySpi" isGeneric="false" isFinal="true">
        <Extends mangling="com.sun.net.ssl.KeyManagerFactorySpi"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(java.lang.String,java.security.Provider)" returnType="[ext]void">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="engineInit(java.security.KeyStore,char[])" returnType="[ext]void" visibility="protected">
                <Throw mangling="java.security.KeyStoreException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.UnrecoverableKeyException"/>
            </Method>
            <Method signature="engineGetKeyManagers()" returnType="[ext]com.sun.net.ssl.KeyManager[]" visibility="protected"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.X509KeyManagerJavaxWrapper" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.X509KeyManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.X509KeyManager)" returnType="[ext]void"/>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" visibility="public"/>
        </Methods>
    </Class>
    <Interface mangling="com.sun.net.ssl.X509KeyManager" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="com.sun.net.ssl.KeyManager"/>
        <Methods>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" isAbstract="true" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String" isAbstract="true" visibility="public"/>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" isAbstract="true" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" isAbstract="true" visibility="public"/>
        </Methods>
    </Interface>
    <Class mangling="com.sun.net.ssl.X509TrustManagerJavaxWrapper" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="javax.net.ssl.X509TrustManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(com.sun.net.ssl.X509TrustManager)" returnType="[ext]void"/>
            <Method signature="checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.cert.CertificateException"/>
            </Method>
            <Method signature="getAcceptedIssuers()" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
        </Methods>
    </Class>
    <Interface mangling="com.sun.net.ssl.X509TrustManager" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="com.sun.net.ssl.TrustManager"/>
        <Methods>
            <Method signature="isClientTrusted(java.security.cert.X509Certificate[])" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="isServerTrusted(java.security.cert.X509Certificate[])" returnType="[ext]boolean" isAbstract="true" visibility="public"/>
            <Method signature="getAcceptedIssuers()" returnType="[ext]java.security.cert.X509Certificate[]" isAbstract="true" visibility="public"/>
        </Methods>
    </Interface>
    <Class mangling="com.sun.net.ssl.X509KeyManagerComSunWrapper" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="com.sun.net.ssl.X509KeyManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(javax.net.ssl.X509KeyManager)" returnType="[ext]void"/>
            <Method signature="getClientAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseClientAlias(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getServerAliases(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String[]" visibility="public"/>
            <Method signature="chooseServerAlias(java.lang.String,java.security.Principal[])" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getCertificateChain(java.lang.String)" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
            <Method signature="getPrivateKey(java.lang.String)" returnType="[ext]java.security.PrivateKey" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.X509TrustManagerComSunWrapper" extends="[ext]java.lang.Object" isGeneric="false" isFinal="true">
        <Extends mangling="java.lang.Object"/>
        <Implements mangling="com.sun.net.ssl.X509TrustManager"/>
        <Fields/>
        <Methods>
            <Method signature="+ctor(javax.net.ssl.X509TrustManager)" returnType="[ext]void"/>
            <Method signature="isClientTrusted(java.security.cert.X509Certificate[])" returnType="[ext]boolean" visibility="public"/>
            <Method signature="isServerTrusted(java.security.cert.X509Certificate[])" returnType="[ext]boolean" visibility="public"/>
            <Method signature="getAcceptedIssuers()" returnType="[ext]java.security.cert.X509Certificate[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.net.ssl.TrustManagerFactory" extends="[ext]java.lang.Object" isGeneric="false" visibility="public">
        <Extends mangling="java.lang.Object"/>
        <Fields/>
        <Methods>
            <Method signature="getDefaultAlgorithm()" isStatic="true" returnType="[ext]java.lang.String" isFinal="true" visibility="public"/>
            <Method signature="+ctor(com.sun.net.ssl.TrustManagerFactorySpi,java.security.Provider,java.lang.String)" returnType="[ext]void" visibility="protected"/>
            <Method signature="getAlgorithm()" returnType="[ext]java.lang.String" isFinal="true" visibility="public"/>
            <Method signature="getInstance(java.lang.String)" isStatic="true" returnType="com.sun.net.ssl.TrustManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.lang.String)" isStatic="true" returnType="com.sun.net.ssl.TrustManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
            </Method>
            <Method signature="getInstance(java.lang.String,java.security.Provider)" isStatic="true" returnType="com.sun.net.ssl.TrustManagerFactory" isFinal="true" visibility="public">
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
            </Method>
            <Method signature="getProvider()" returnType="[ext]java.security.Provider" isFinal="true" visibility="public"/>
            <Method signature="init(java.security.KeyStore)" returnType="[ext]void" visibility="public">
                <Throw mangling="java.security.KeyStoreException"/>
            </Method>
            <Method signature="getTrustManagers()" returnType="[ext]com.sun.net.ssl.TrustManager[]" visibility="public"/>
        </Methods>
    </Class>
    <Class mangling="com.sun.security.cert.internal.x509.X509V1CertImpl" extends="javax.security.cert.X509Certificate" isGeneric="false" visibility="public">
        <Extends mangling="javax.security.cert.X509Certificate"/>
        <Implements mangling="[ext]java.io.Serializable"/>
        <Fields>
            <Field name="serialVersionUID" type="long" isStatic="true" isFinal="true"/>
        </Fields>
        <Methods>
            <Method signature="+ctor()" returnType="[ext]void" visibility="public"/>
            <Method signature="+ctor(byte[])" returnType="[ext]void" visibility="public">
                <Throw mangling="javax.security.cert.CertificateException"/>
            </Method>
            <Method signature="+ctor(java.io.InputStream)" returnType="[ext]void" visibility="public">
                <Throw mangling="javax.security.cert.CertificateException"/>
            </Method>
            <Method signature="getEncoded()" returnType="[ext]byte[]" visibility="public">
                <Throw mangling="javax.security.cert.CertificateEncodingException"/>
            </Method>
            <Method signature="verify(java.security.PublicKey)" returnType="[ext]void" visibility="public">
                <Throw mangling="javax.security.cert.CertificateException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.InvalidKeyException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
                <Throw mangling="java.security.SignatureException"/>
            </Method>
            <Method signature="verify(java.security.PublicKey,java.lang.String)" returnType="[ext]void" visibility="public">
                <Throw mangling="javax.security.cert.CertificateException"/>
                <Throw mangling="java.security.NoSuchAlgorithmException"/>
                <Throw mangling="java.security.InvalidKeyException"/>
                <Throw mangling="java.security.NoSuchProviderException"/>
                <Throw mangling="java.security.SignatureException"/>
            </Method>
            <Method signature="checkValidity()" returnType="[ext]void" visibility="public">
                <Throw mangling="javax.security.cert.CertificateExpiredException"/>
                <Throw mangling="javax.security.cert.CertificateNotYetValidException"/>
            </Method>
            <Method signature="checkValidity(java.util.Date)" returnType="[ext]void" visibility="public">
                <Throw mangling="javax.security.cert.CertificateExpiredException"/>
                <Throw mangling="javax.security.cert.CertificateNotYetValidException"/>
            </Method>
            <Method signature="toString()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getPublicKey()" returnType="[ext]java.security.PublicKey" visibility="public"/>
            <Method signature="getVersion()" returnType="[ext]int" visibility="public"/>
            <Method signature="getSerialNumber()" returnType="[ext]java.math.BigInteger" visibility="public"/>
            <Method signature="getSubjectDN()" returnType="[ext]java.security.Principal" visibility="public"/>
            <Method signature="getIssuerDN()" returnType="[ext]java.security.Principal" visibility="public"/>
            <Method signature="getNotBefore()" returnType="[ext]java.util.Date" visibility="public"/>
            <Method signature="getNotAfter()" returnType="[ext]java.util.Date" visibility="public"/>
            <Method signature="getSigAlgName()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getSigAlgOID()" returnType="[ext]java.lang.String" visibility="public"/>
            <Method signature="getSigAlgParams()" returnType="[ext]byte[]" visibility="public"/>
            <Method signature="getX509Certificate()" returnType="[ext]java.security.cert.X509Certificate" visibility="public"/>
        </Methods>
    </Class>
</BlackBox>
