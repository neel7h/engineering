<?xml version='1.0' encoding='utf-8'?>
<DATA model='Central Model' version='1.0.0.20' scope='MetricsScope' export='OK'><!-- File generated with CAST Metrics Compiler - 8.3.6 -->
  <DSS_METRIC_TYPES>
    <METRIC_ID>592</METRIC_ID>
    <METRIC_NAME>Ensure you provide a user-defined copy constructor or disable copy when a class allocates memory in its constructor</METRIC_NAME>
    <METRIC_DESCRIPTION>See Metric Documentation</METRIC_DESCRIPTION>
    <METRIC_TYPE>3</METRIC_TYPE>
    <METRIC_GROUP>1</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>320</SCOPE_ID>
    <PROPERTY_ID>140860</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPES>
    <METRIC_ID>593</METRIC_ID>
    <METRIC_NAME>Ensure you provide a user-defined copy constructor or disable copy when a class allocates memory in its constructor</METRIC_NAME>
    <METRIC_DESCRIPTION>description details</METRIC_DESCRIPTION>
    <METRIC_TYPE>2</METRIC_TYPE>
    <METRIC_GROUP>2</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>0</SCOPE_ID>
    <PROPERTY_ID>0</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPES>
    <METRIC_ID>1065000</METRIC_ID>
    <METRIC_NAME>Avoid using "continue" statement</METRIC_NAME>
    <METRIC_DESCRIPTION>See Metric Documentation</METRIC_DESCRIPTION>
    <METRIC_TYPE>3</METRIC_TYPE>
    <METRIC_GROUP>1</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>310</SCOPE_ID>
    <PROPERTY_ID>140854</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPES>
    <METRIC_ID>1065001</METRIC_ID>
    <METRIC_NAME>Avoid using "continue" statement</METRIC_NAME>
    <METRIC_DESCRIPTION>description details</METRIC_DESCRIPTION>
    <METRIC_TYPE>2</METRIC_TYPE>
    <METRIC_GROUP>2</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>0</SCOPE_ID>
    <PROPERTY_ID>0</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPES>
    <METRIC_ID>1065002</METRIC_ID>
    <METRIC_NAME>"enum" members other than the first one should not be explicitly initialized unless all members are explicitly initialized.</METRIC_NAME>
    <METRIC_DESCRIPTION>See Metric Documentation</METRIC_DESCRIPTION>
    <METRIC_TYPE>3</METRIC_TYPE>
    <METRIC_GROUP>1</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>1065000</SCOPE_ID>
    <PROPERTY_ID>140856</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPES>
    <METRIC_ID>1065003</METRIC_ID>
    <METRIC_NAME>"enum" members other than the first one should not be explicitly initialized unless all members are explicitly initialized.</METRIC_NAME>
    <METRIC_DESCRIPTION>description details</METRIC_DESCRIPTION>
    <METRIC_TYPE>2</METRIC_TYPE>
    <METRIC_GROUP>2</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>0</SCOPE_ID>
    <PROPERTY_ID>0</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPES>
    <METRIC_ID>1065004</METRIC_ID>
    <METRIC_NAME>Ensure that dynamically allocated memory on local pointer in functions/methods is freed.</METRIC_NAME>
    <METRIC_DESCRIPTION>See Metric Documentation</METRIC_DESCRIPTION>
    <METRIC_TYPE>3</METRIC_TYPE>
    <METRIC_GROUP>1</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>310</SCOPE_ID>
    <PROPERTY_ID>140862</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPES>
    <METRIC_ID>1065005</METRIC_ID>
    <METRIC_NAME>Ensure that dynamically allocated memory on local pointer in functions/methods is freed.</METRIC_NAME>
    <METRIC_DESCRIPTION>description details</METRIC_DESCRIPTION>
    <METRIC_TYPE>2</METRIC_TYPE>
    <METRIC_GROUP>2</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>0</SCOPE_ID>
    <PROPERTY_ID>0</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPES>
    <METRIC_ID>1065006</METRIC_ID>
    <METRIC_NAME>Avoid iterator invalidation.</METRIC_NAME>
    <METRIC_DESCRIPTION>See Metric Documentation</METRIC_DESCRIPTION>
    <METRIC_TYPE>3</METRIC_TYPE>
    <METRIC_GROUP>1</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>310</SCOPE_ID>
    <PROPERTY_ID>140867</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPES>
    <METRIC_ID>1065007</METRIC_ID>
    <METRIC_NAME>Avoid iterator invalidation.</METRIC_NAME>
    <METRIC_DESCRIPTION>description details</METRIC_DESCRIPTION>
    <METRIC_TYPE>2</METRIC_TYPE>
    <METRIC_GROUP>2</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>0</SCOPE_ID>
    <PROPERTY_ID>0</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPES>
    <METRIC_ID>1065008</METRIC_ID>
    <METRIC_NAME>Avoid use of unvalidated input in array indexing and memory allocation</METRIC_NAME>
    <METRIC_DESCRIPTION>See Metric Documentation</METRIC_DESCRIPTION>
    <METRIC_TYPE>0</METRIC_TYPE>
    <METRIC_GROUP>1</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>310</SCOPE_ID>
    <PROPERTY_ID>140894</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPES>
    <METRIC_ID>1065009</METRIC_ID>
    <METRIC_NAME>Avoid use of unvalidated input in array indexing and memory allocation</METRIC_NAME>
    <METRIC_DESCRIPTION>description details</METRIC_DESCRIPTION>
    <METRIC_TYPE>2</METRIC_TYPE>
    <METRIC_GROUP>2</METRIC_GROUP>
    <METRIC_DEPENDS_ON>$n$u$l$l$</METRIC_DEPENDS_ON>
    <METRIC_OPTIONS>0</METRIC_OPTIONS>
    <SCOPE_ID>0</SCOPE_ID>
    <PROPERTY_ID>0</PROPERTY_ID>
  </DSS_METRIC_TYPES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>592</METRIC_PARENT_ID>
    <METRIC_ID>593</METRIC_ID>
    <METRIC_INDEX>1</METRIC_INDEX>
    <AGGREGATE_WEIGHT>1</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_DIAG_SCOPE_GENERIC_NUM</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>0</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>61018</METRIC_PARENT_ID>
    <METRIC_ID>1065004</METRIC_ID>
    <METRIC_INDEX>2</METRIC_INDEX>
    <AGGREGATE_WEIGHT>2</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_FILTER_SCOPE</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>0</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>61024</METRIC_PARENT_ID>
    <METRIC_ID>1065000</METRIC_ID>
    <METRIC_INDEX>2</METRIC_INDEX>
    <AGGREGATE_WEIGHT>1</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_FILTER_SCOPE</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>0</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>61024</METRIC_PARENT_ID>
    <METRIC_ID>1065002</METRIC_ID>
    <METRIC_INDEX>3</METRIC_INDEX>
    <AGGREGATE_WEIGHT>2</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_FILTER_SCOPE</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>0</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>66062</METRIC_PARENT_ID>
    <METRIC_ID>1065008</METRIC_ID>
    <METRIC_INDEX>2</METRIC_INDEX>
    <AGGREGATE_WEIGHT>2</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_FILTER_SCOPE</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>0</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>66069</METRIC_PARENT_ID>
    <METRIC_ID>592</METRIC_ID>
    <METRIC_INDEX>2</METRIC_INDEX>
    <AGGREGATE_WEIGHT>8</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_FILTER_SCOPE</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>1</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>66069</METRIC_PARENT_ID>
    <METRIC_ID>1065006</METRIC_ID>
    <METRIC_INDEX>3</METRIC_INDEX>
    <AGGREGATE_WEIGHT>7</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_FILTER_SCOPE</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>1</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>1065000</METRIC_PARENT_ID>
    <METRIC_ID>1065001</METRIC_ID>
    <METRIC_INDEX>1</METRIC_INDEX>
    <AGGREGATE_WEIGHT>1</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_DIAG_SCOPE_GENERIC_NUM</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>0</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>1065002</METRIC_PARENT_ID>
    <METRIC_ID>1065003</METRIC_ID>
    <METRIC_INDEX>1</METRIC_INDEX>
    <AGGREGATE_WEIGHT>1</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_DIAG_SCOPE_GENERIC_NUM</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>0</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>1065004</METRIC_PARENT_ID>
    <METRIC_ID>1065005</METRIC_ID>
    <METRIC_INDEX>1</METRIC_INDEX>
    <AGGREGATE_WEIGHT>1</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_DIAG_SCOPE_GENERIC_NUM</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>0</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>1065006</METRIC_PARENT_ID>
    <METRIC_ID>1065007</METRIC_ID>
    <METRIC_INDEX>1</METRIC_INDEX>
    <AGGREGATE_WEIGHT>1</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_DIAG_SCOPE_GENERIC_NUM</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>0</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_TYPE_TREES>
    <METRIC_PARENT_ID>1065008</METRIC_PARENT_ID>
    <METRIC_ID>1065009</METRIC_ID>
    <METRIC_INDEX>1</METRIC_INDEX>
    <AGGREGATE_WEIGHT>1</AGGREGATE_WEIGHT>
    <METRIC_SCOPE_PROCEDURE_NAME>DSS_DIAG_SCOPE_GENERIC_NUM</METRIC_SCOPE_PROCEDURE_NAME>
    <METRIC_SCOPE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_SCOPE_PROCEDURE_NAME_2>
    <METRIC_CRITICAL>0</METRIC_CRITICAL>
  </DSS_METRIC_TYPE_TREES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>592</METRIC_ID>
    <METRIC_VALUE_INDEX>0</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>Grade and status distribution</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>Generic grade and status distribution calculation for diagnostics</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>ADG_RESULT_DIAG_STATUS</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>ADG_CENTRAL_RESULT_DIAG</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>0</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>592</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>Ensure you provide a user-defined copy constructor or disable copy when a class allocates memory in its constructor</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>See Metric documentation</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>11</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>592</METRIC_ID>
    <METRIC_VALUE_INDEX>2</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>total</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>total</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_DIAG_TOTAL_GENERIC</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>593</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>detail</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>detail</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_METRIC_VALUE_SCOPE</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>6</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065000</METRIC_ID>
    <METRIC_VALUE_INDEX>0</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>Grade and status distribution</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>Generic grade and status distribution calculation for diagnostics</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>ADG_RESULT_DIAG_STATUS</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>ADG_CENTRAL_RESULT_DIAG</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>0</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065000</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>Avoid using "continue" statement</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>See Metric documentation</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>11</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065000</METRIC_ID>
    <METRIC_VALUE_INDEX>2</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>total</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>total</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_DIAG_TOTAL_GENERIC</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065001</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>detail</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>detail</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_METRIC_VALUE_SCOPE</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>6</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065002</METRIC_ID>
    <METRIC_VALUE_INDEX>0</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>Grade and status distribution</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>Generic grade and status distribution calculation for diagnostics</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>ADG_RESULT_DIAG_STATUS</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>ADG_CENTRAL_RESULT_DIAG</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>0</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065002</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>"enum" members other than the first one should not be explicitly initialized unless all members are explicitly initialized.</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>See Metric documentation</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>11</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065002</METRIC_ID>
    <METRIC_VALUE_INDEX>2</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>total</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>total</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_DIAG_TOTAL_GENERIC</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065003</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>detail</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>detail</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_METRIC_VALUE_SCOPE</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>6</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065004</METRIC_ID>
    <METRIC_VALUE_INDEX>0</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>Grade and status distribution</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>Generic grade and status distribution calculation for diagnostics</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>ADG_RESULT_DIAG_STATUS</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>ADG_CENTRAL_RESULT_DIAG</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>0</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065004</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>Ensure that dynamically allocated memory on local pointer in functions/methods is freed.</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>See Metric documentation</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>11</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065004</METRIC_ID>
    <METRIC_VALUE_INDEX>2</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>total</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>total</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_DIAG_TOTAL_GENERIC</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065005</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>detail</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>detail</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_METRIC_VALUE_SCOPE</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>6</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065006</METRIC_ID>
    <METRIC_VALUE_INDEX>0</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>Grade and status distribution</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>Generic grade and status distribution calculation for diagnostics</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>ADG_RESULT_DIAG_STATUS</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>ADG_CENTRAL_RESULT_DIAG</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>0</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065006</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>Avoid iterator invalidation.</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>See Metric documentation</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>11</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065006</METRIC_ID>
    <METRIC_VALUE_INDEX>2</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>total</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>total</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_DIAG_TOTAL_GENERIC</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065007</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>detail</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>detail</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_METRIC_VALUE_SCOPE</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>6</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065008</METRIC_ID>
    <METRIC_VALUE_INDEX>0</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>Grade and status distribution</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>Generic grade and status distribution calculation for diagnostics</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>ADG_RESULT_DIAG_STATUS</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>ADG_CENTRAL_RESULT_DIAG</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>0</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065008</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>Avoid use of unvalidated input in array indexing and memory allocation</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>See Metric documentation</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>1</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065008</METRIC_ID>
    <METRIC_VALUE_INDEX>2</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>total</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>total</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_DIAG_TOTAL_GENERIC</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_VALUE_TYPES>
    <METRIC_ID>1065009</METRIC_ID>
    <METRIC_VALUE_INDEX>1</METRIC_VALUE_INDEX>
    <METRIC_VALUE_NAME>detail</METRIC_VALUE_NAME>
    <METRIC_VALUE_DESCRIPTION>detail</METRIC_VALUE_DESCRIPTION>
    <METRIC_VALUE_PROCEDURE_NAME>DSS_METRIC_VALUE_SCOPE</METRIC_VALUE_PROCEDURE_NAME>
    <METRIC_AGGREGATE_OPERATOR>0</METRIC_AGGREGATE_OPERATOR>
    <METRIC_VALUE_PROCEDURE_NAME_2>$n$u$l$l$</METRIC_VALUE_PROCEDURE_NAME_2>
    <METRIC_AGGREGATE_OPERATOR_2>0</METRIC_AGGREGATE_OPERATOR_2>
    <METRIC_VALUE_TYPE>5</METRIC_VALUE_TYPE>
  </DSS_METRIC_VALUE_TYPES>
  <DSS_METRIC_PARAM_TYPES>
    <METRIC_ID>592</METRIC_ID>
    <PARAM_INDEX>1</PARAM_INDEX>
    <OBJECT_TYPE_ID>-3</OBJECT_TYPE_ID>
    <PARAM_TYPE>0</PARAM_TYPE>
    <PARAM_NAME>Techno filter</PARAM_NAME>
    <PARAM_DESCRIPTION>$n$u$l$l$</PARAM_DESCRIPTION>
  </DSS_METRIC_PARAM_TYPES>
  <DSS_METRIC_PARAM_TYPES>
    <METRIC_ID>1065000</METRIC_ID>
    <PARAM_INDEX>1</PARAM_INDEX>
    <OBJECT_TYPE_ID>-3</OBJECT_TYPE_ID>
    <PARAM_TYPE>0</PARAM_TYPE>
    <PARAM_NAME>Techno filter</PARAM_NAME>
    <PARAM_DESCRIPTION>$n$u$l$l$</PARAM_DESCRIPTION>
  </DSS_METRIC_PARAM_TYPES>
  <DSS_METRIC_PARAM_TYPES>
    <METRIC_ID>1065000</METRIC_ID>
    <PARAM_INDEX>1</PARAM_INDEX>
    <OBJECT_TYPE_ID>-2</OBJECT_TYPE_ID>
    <PARAM_TYPE>0</PARAM_TYPE>
    <PARAM_NAME>Techno filter</PARAM_NAME>
    <PARAM_DESCRIPTION>$n$u$l$l$</PARAM_DESCRIPTION>
  </DSS_METRIC_PARAM_TYPES>
  <DSS_METRIC_PARAM_TYPES>
    <METRIC_ID>1065002</METRIC_ID>
    <PARAM_INDEX>1</PARAM_INDEX>
    <OBJECT_TYPE_ID>-3</OBJECT_TYPE_ID>
    <PARAM_TYPE>0</PARAM_TYPE>
    <PARAM_NAME>Techno filter</PARAM_NAME>
    <PARAM_DESCRIPTION>$n$u$l$l$</PARAM_DESCRIPTION>
  </DSS_METRIC_PARAM_TYPES>
  <DSS_METRIC_PARAM_TYPES>
    <METRIC_ID>1065002</METRIC_ID>
    <PARAM_INDEX>1</PARAM_INDEX>
    <OBJECT_TYPE_ID>-2</OBJECT_TYPE_ID>
    <PARAM_TYPE>0</PARAM_TYPE>
    <PARAM_NAME>Techno filter</PARAM_NAME>
    <PARAM_DESCRIPTION>$n$u$l$l$</PARAM_DESCRIPTION>
  </DSS_METRIC_PARAM_TYPES>
  <DSS_METRIC_PARAM_TYPES>
    <METRIC_ID>1065004</METRIC_ID>
    <PARAM_INDEX>1</PARAM_INDEX>
    <OBJECT_TYPE_ID>-3</OBJECT_TYPE_ID>
    <PARAM_TYPE>0</PARAM_TYPE>
    <PARAM_NAME>Techno filter</PARAM_NAME>
    <PARAM_DESCRIPTION>$n$u$l$l$</PARAM_DESCRIPTION>
  </DSS_METRIC_PARAM_TYPES>
  <DSS_METRIC_PARAM_TYPES>
    <METRIC_ID>1065004</METRIC_ID>
    <PARAM_INDEX>1</PARAM_INDEX>
    <OBJECT_TYPE_ID>-2</OBJECT_TYPE_ID>
    <PARAM_TYPE>0</PARAM_TYPE>
    <PARAM_NAME>Techno filter</PARAM_NAME>
    <PARAM_DESCRIPTION>$n$u$l$l$</PARAM_DESCRIPTION>
  </DSS_METRIC_PARAM_TYPES>
  <DSS_METRIC_PARAM_TYPES>
    <METRIC_ID>1065006</METRIC_ID>
    <PARAM_INDEX>1</PARAM_INDEX>
    <OBJECT_TYPE_ID>-3</OBJECT_TYPE_ID>
    <PARAM_TYPE>0</PARAM_TYPE>
    <PARAM_NAME>Techno filter</PARAM_NAME>
    <PARAM_DESCRIPTION>$n$u$l$l$</PARAM_DESCRIPTION>
  </DSS_METRIC_PARAM_TYPES>
  <DSS_METRIC_PARAM_TYPES>
    <METRIC_ID>1065008</METRIC_ID>
    <PARAM_INDEX>1</PARAM_INDEX>
    <OBJECT_TYPE_ID>-3</OBJECT_TYPE_ID>
    <PARAM_TYPE>0</PARAM_TYPE>
    <PARAM_NAME>Techno filter</PARAM_NAME>
    <PARAM_DESCRIPTION>$n$u$l$l$</PARAM_DESCRIPTION>
  </DSS_METRIC_PARAM_TYPES>
  <DSS_METRIC_PARAM_TYPES>
    <METRIC_ID>1065008</METRIC_ID>
    <PARAM_INDEX>1</PARAM_INDEX>
    <OBJECT_TYPE_ID>-2</OBJECT_TYPE_ID>
    <PARAM_TYPE>0</PARAM_TYPE>
    <PARAM_NAME>Techno filter</PARAM_NAME>
    <PARAM_DESCRIPTION>$n$u$l$l$</PARAM_DESCRIPTION>
  </DSS_METRIC_PARAM_TYPES>
  <DSS_METRIC_STATUS_THRESHOLDS>
    <METRIC_ID>592</METRIC_ID>
    <STATUS>0</STATUS>
    <THRESHOLD_1>98.0</THRESHOLD_1>
    <THRESHOLD_2>99.0</THRESHOLD_2>
    <THRESHOLD_3>99.5</THRESHOLD_3>
    <THRESHOLD_4>99.99</THRESHOLD_4>
  </DSS_METRIC_STATUS_THRESHOLDS>
  <DSS_METRIC_STATUS_THRESHOLDS>
    <METRIC_ID>1065000</METRIC_ID>
    <STATUS>0</STATUS>
    <THRESHOLD_1>50.0</THRESHOLD_1>
    <THRESHOLD_2>90.0</THRESHOLD_2>
    <THRESHOLD_3>95.0</THRESHOLD_3>
    <THRESHOLD_4>99.0</THRESHOLD_4>
  </DSS_METRIC_STATUS_THRESHOLDS>
  <DSS_METRIC_STATUS_THRESHOLDS>
    <METRIC_ID>1065002</METRIC_ID>
    <STATUS>0</STATUS>
    <THRESHOLD_1>50.0</THRESHOLD_1>
    <THRESHOLD_2>90.0</THRESHOLD_2>
    <THRESHOLD_3>95.0</THRESHOLD_3>
    <THRESHOLD_4>99.0</THRESHOLD_4>
  </DSS_METRIC_STATUS_THRESHOLDS>
  <DSS_METRIC_STATUS_THRESHOLDS>
    <METRIC_ID>1065004</METRIC_ID>
    <STATUS>0</STATUS>
    <THRESHOLD_1>50.0</THRESHOLD_1>
    <THRESHOLD_2>90.0</THRESHOLD_2>
    <THRESHOLD_3>95.0</THRESHOLD_3>
    <THRESHOLD_4>99.0</THRESHOLD_4>
  </DSS_METRIC_STATUS_THRESHOLDS>
  <DSS_METRIC_STATUS_THRESHOLDS>
    <METRIC_ID>1065006</METRIC_ID>
    <STATUS>0</STATUS>
    <THRESHOLD_1>50.0</THRESHOLD_1>
    <THRESHOLD_2>90.0</THRESHOLD_2>
    <THRESHOLD_3>95.0</THRESHOLD_3>
    <THRESHOLD_4>99.0</THRESHOLD_4>
  </DSS_METRIC_STATUS_THRESHOLDS>
  <DSS_METRIC_STATUS_THRESHOLDS>
    <METRIC_ID>1065008</METRIC_ID>
    <STATUS>0</STATUS>
    <THRESHOLD_1>50.0</THRESHOLD_1>
    <THRESHOLD_2>90.0</THRESHOLD_2>
    <THRESHOLD_3>95.0</THRESHOLD_3>
    <THRESHOLD_4>99.0</THRESHOLD_4>
  </DSS_METRIC_STATUS_THRESHOLDS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>592</METRIC_ID>
    <DESCRIPTION_TYPE_ID>0</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Ensure you provide a user-defined copy constructor or disable copy when a class allocates memory in its constructor</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>592</METRIC_ID>
    <DESCRIPTION_TYPE_ID>1</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>If an object manages the allocation and deallocation of an object on the heap (the managing object has a pointer to the object to be created by the class' constructor), and the default copy constructor is used, only the value of the pointer will be copied. This can lead to two invocations of the destructor for the same object (on the heap), probably resulting in a run-time error.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>592</METRIC_ID>
    <DESCRIPTION_TYPE_ID>2</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>This rule searches for C++ classes using the "new" operator to allocate instances but that do not define a copy constructor.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>592</METRIC_ID>
    <DESCRIPTION_TYPE_ID>3</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Define a copy constructor for the class, or make the class non-copyable.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>592</METRIC_ID>
    <DESCRIPTION_TYPE_ID>5</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>#include &lt;string.h&gt;

   class String
   {
      public:
         String( const char* cp = "");    // Constructor
         ~String();                       // Destructor
         // ...
      private:
         char* sp;
         // ...
   };

   String::String(const char* cp)      // Constructor
   {
      sp = new char[strlen(cp)];
      strcpy(sp,cp);
   }
   String::~String()    // Destructor
   {
      delete sp;
   }

   // "Dangerous" String class
   void
   main()
   {
      String w1;
      String w2 = w1;
      // WARNING: IN A BITWISE COPY OF w1::sp,
      // THE DESTRUCTOR FOR W1::SP WILL BE CALLED TWICE:
      // FIRST, WHEN w1 IS DESTROYED; AGAIN, WHEN w2 IS DESTROYED.
   }</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>592</METRIC_ID>
    <DESCRIPTION_TYPE_ID>6</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>#include &lt;string.h&gt;

   class String
   {
      public:
         String( const char* cp = "");   // Constructor
         String( const String&amp; sp );     // Copy constructor
         ~String();                      // Destructor
         // ...
      private:
         char* sp;
         // ...
   };

   String::String( const char* cp )    // Constructor
   {
      sp = new char[strlen(cp)];
      strcpy(sp,cp);
   }

   String::String( const String&amp; stringA ) : sp( new char[strlen(stringA.sp)] )
   {
      strcpy(sp,stringA.sp);
   }
   String::~String()     // Destructor
   {
      delete sp;
   }

   // "Safe" String class
   void
   main()
   {
      String w1;
      String w2 = w1;   // SAFE COPY: String::String( const String&amp; ) CALLED.
   }</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>592</METRIC_ID>
    <DESCRIPTION_TYPE_ID>7</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Associated to each C++ class with violations, the Quality Rule provides:
- Bookmarks for violation occurrences found in the source code:
- object instantiation</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>592</METRIC_ID>
    <DESCRIPTION_TYPE_ID>8</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of C++ classes</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>592</METRIC_ID>
    <DESCRIPTION_TYPE_ID>9</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of violation occurrences</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065000</METRIC_ID>
    <DESCRIPTION_TYPE_ID>0</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Avoid using "continue" statement</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065000</METRIC_ID>
    <DESCRIPTION_TYPE_ID>1</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Avoid using "continue" statement.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065000</METRIC_ID>
    <DESCRIPTION_TYPE_ID>2</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>"continue" is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured control flow statements such as if should be used instead. This rule is compliant with MISRA-C:2004.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065000</METRIC_ID>
    <DESCRIPTION_TYPE_ID>3</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Do not used the continue statement, insted used conditionals.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065000</METRIC_ID>
    <DESCRIPTION_TYPE_ID>5</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>int i;
for (i = 0; i &lt; 10; i++) {
  if (i == 5) {
    continue;  /* Noncompliant */
  }
  printf("i = %d\n", i);
}</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065000</METRIC_ID>
    <DESCRIPTION_TYPE_ID>6</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>int i;
for (i = 0; i &lt; 10; i++) {
  if (i != 5) {
    printf("i = %d\n", i);
  }
}</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065000</METRIC_ID>
    <DESCRIPTION_TYPE_ID>7</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Associated to each C++ constructor, destructor, method, C and C++ functions with violations, the Quality Rule provides:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code:
  - use of continue</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065000</METRIC_ID>
    <DESCRIPTION_TYPE_ID>8</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of C++ constructors, destructors, methods, C and C++ functions</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065000</METRIC_ID>
    <DESCRIPTION_TYPE_ID>9</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of violation occurrences</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065002</METRIC_ID>
    <DESCRIPTION_TYPE_ID>0</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>"enum" members other than the first one should not be explicitly initialized unless all members are explicitly initialized.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065002</METRIC_ID>
    <DESCRIPTION_TYPE_ID>1</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>"enum" members other than the first one should not be explicitly initialized unless all members are explicitly initialized.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065002</METRIC_ID>
    <DESCRIPTION_TYPE_ID>2</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>This rule raises a violation when "enum" members initialization rule is infringed.. This rule is compliant with MISRA-C:2004 and MISRA-C++:2008.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065002</METRIC_ID>
    <DESCRIPTION_TYPE_ID>3</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Always initialized all, none or the first members of an enum.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065002</METRIC_ID>
    <DESCRIPTION_TYPE_ID>5</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>enum color { red = 3, blue, green, yellow = 5 };</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065002</METRIC_ID>
    <DESCRIPTION_TYPE_ID>6</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>enum color { red = 3, blue = 4, green = 5, yellow = 6 };</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065002</METRIC_ID>
    <DESCRIPTION_TYPE_ID>7</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065002</METRIC_ID>
    <DESCRIPTION_TYPE_ID>8</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of C++ constructors, destructors, methods, C and C++ functions</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065002</METRIC_ID>
    <DESCRIPTION_TYPE_ID>9</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of violation occurrences</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065004</METRIC_ID>
    <DESCRIPTION_TYPE_ID>0</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Ensure that dynamically allocated memory on local pointer in functions/methods is freed.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065004</METRIC_ID>
    <DESCRIPTION_TYPE_ID>1</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>The memory dynamically allocated in a local pointer of a function or method should be released by using "delete" or "free()" before the end of the of the lifetime of the pointer variable, i.e. before the end of said function/method or before a "return" or "throw" statement.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065004</METRIC_ID>
    <DESCRIPTION_TYPE_ID>2</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>This rule raises a violation when the memory dynamically allocated in a local pointer of a function or method is not released.
This rule can raise false positives which are generally caused by bad programmation practices.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065004</METRIC_ID>
    <DESCRIPTION_TYPE_ID>3</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Release the memory allocated dynamically before any "return" or "throw" statement or before the end of the function or method.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065004</METRIC_ID>
    <DESCRIPTION_TYPE_ID>5</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>int func(int num)
{
    int* val = new int(0);
    std::exception exc;
    if(num &lt; 0)
        throw exc;
    delete val;
    return 1;
}</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065004</METRIC_ID>
    <DESCRIPTION_TYPE_ID>6</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>int func(int num)
{
    int* val = new int(0);
    std::exception exc;
    if(num &amp;lt; 0)
    {
        delete val;
        throw exc;
    }
    delete val;
    return 1;
}</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065004</METRIC_ID>
    <DESCRIPTION_TYPE_ID>7</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065004</METRIC_ID>
    <DESCRIPTION_TYPE_ID>8</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of C++ constructors, destructors, methods, C and C++ functions</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065004</METRIC_ID>
    <DESCRIPTION_TYPE_ID>9</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of violation occurrences</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065006</METRIC_ID>
    <DESCRIPTION_TYPE_ID>0</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Avoid iterator invalidation.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065006</METRIC_ID>
    <DESCRIPTION_TYPE_ID>1</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>While iterating over a container almost all modifications of said contained will invalidate the iterator and bring undefined behaviour. Moreover the encapsulation in a class can mask that we are modifying the container by the use of class method and consequently invalidate the iterator.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065006</METRIC_ID>
    <DESCRIPTION_TYPE_ID>2</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>This rule raises a violation when a container is modified in a loop iterating over said container without modifying the iterator.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065006</METRIC_ID>
    <DESCRIPTION_TYPE_ID>3</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Do not modify the container while iterating over, unless you modify the iterator itself.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065006</METRIC_ID>
    <DESCRIPTION_TYPE_ID>5</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>class A{
    std::vector&lt;int&gt;&amp; getVector();
    void removeElement(int index);
private:
    std::vector&lt;int&gt; m_integerVector;
};

void func(){
    A a;
    ...
    for(int val : a.getVector()){
        ...
        a.removeElement(index);
        ...
    } 
}</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065006</METRIC_ID>
    <DESCRIPTION_TYPE_ID>6</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>class A{
    std::vector&lt;int&gt;&amp; getVector();
    void removeElement(int index);
private:
    std::vector&lt;int&gt; m_integerVector;
};

void func(){
    A a;
    ...
    for(int val : a.getVector()){
        ...
    } 
    ...
    a.removeElement(index);
}</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065006</METRIC_ID>
    <DESCRIPTION_TYPE_ID>7</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065006</METRIC_ID>
    <DESCRIPTION_TYPE_ID>8</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of C / C++ method and function</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065006</METRIC_ID>
    <DESCRIPTION_TYPE_ID>9</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of violation occurrences</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065008</METRIC_ID>
    <DESCRIPTION_TYPE_ID>0</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Avoid use of unvalidated input in array indexing and memory allocation</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065008</METRIC_ID>
    <DESCRIPTION_TYPE_ID>1</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Using an unvalidated input as an array index or to compute an array index is a security hazard which can lead to reading or writing out of bounds of the array.
Using an unvalidated input as a size of a memory allocation is a security hazard which can lead to allocate a null size or a too great size of memory.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065008</METRIC_ID>
    <DESCRIPTION_TYPE_ID>2</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>This rule raises a violation when an unvalidated input is used to compute an index or as index to access an array or to allocate memory.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065008</METRIC_ID>
    <DESCRIPTION_TYPE_ID>3</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Validate the input, from outside the function, which are used as array index or allocation size.</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065008</METRIC_ID>
    <DESCRIPTION_TYPE_ID>4</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>CWE-129</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065008</METRIC_ID>
    <DESCRIPTION_TYPE_ID>5</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>int *array = NULL; 
void allocateArray()
{
      int len, itr;
      scanf("%i", &amp;len);
      array = malloc(len);
      for(itr=0;itr&lt;len;itr++)
          array[itr] = 0;
 }

int getValue(int index)
{
    return array[index];
}</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065008</METRIC_ID>
    <DESCRIPTION_TYPE_ID>6</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>#define MAX_ARRAY_SIZE 1000000
int *array = NULL; 
void allocateArray()
{
      int len, itr;
      scanf("%i", &amp;len);
     if (len &gt; 0 &amp;&amp; len &lt; MAX_ARRAY_SIZE)
     {
           array = malloc(len);
           for(itr=0;itr&lt;len;itr++)
               array[itr] = 0;
     }
 }

int getValue(int index)
{
    if(index &gt;= 0 &amp;&amp; index &lt; MAX_ARRAY_SIZE)
          return array[index];
    else
          return array[MAX_ARRAY_SIZE-1];
}</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065008</METRIC_ID>
    <DESCRIPTION_TYPE_ID>7</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065008</METRIC_ID>
    <DESCRIPTION_TYPE_ID>8</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of  C/C++ method and function</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
  <DSS_METRIC_DESCRIPTIONS>
    <METRIC_ID>1065008</METRIC_ID>
    <DESCRIPTION_TYPE_ID>9</DESCRIPTION_TYPE_ID>
    <LANGUAGE>ENGLISH</LANGUAGE>
    <METRIC_DESCRIPTION>Number of violation occurrences</METRIC_DESCRIPTION>
  </DSS_METRIC_DESCRIPTIONS>
</DATA>