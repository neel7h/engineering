<?xml version="1.0" encoding="utf-8"?>
<root>
  <metric id="1020000" type="quality-rule" originalName="Avoid Artifacts with High Cyclomatic Complexity (HTML5/Javascript)" section="associatedValueName">
    <english>Cyclomatic complexity</english>
  </metric>
  <metric id="1020000" type="quality-rule" originalName="Avoid Artifacts with High Cyclomatic Complexity (HTML5/Javascript)" section="description">
    <english>Avoid Artifacts with High Cyclomatic Complexity (CC &gt; 20). Complex Artifacts are difficult to maintain. Keeping Artifacts small and simple ensures an good readability of the code.  The threshold level is a parameter that can be changed at will.</english>
  </metric>
  <metric id="1020000" type="quality-rule" originalName="Avoid Artifacts with High Cyclomatic Complexity (HTML5/Javascript)" section="name">
    <english>Avoid Artifacts with High Cyclomatic Complexity (HTML5/Javascript)</english>
  </metric>
  <metric id="1020000" type="quality-rule" originalName="Avoid Artifacts with High Cyclomatic Complexity (HTML5/Javascript)" section="output">
    <english>Associated to each HTML5/Javascript Artifact with violations, the Quality Rule provides:
- The Cyclomatic complexity</english>
  </metric>
  <metric id="1020000" type="quality-rule" originalName="Avoid Artifacts with High Cyclomatic Complexity (HTML5/Javascript)" section="rationale">
    <english>The effort and time for diagnosis of deficiencies or causes of failures, or for identification of parts to be modified is directly related to the number of execution paths, i.e. the complexity of the control flow. 
Analyzability declines with increasing Cyclomatic Complexity. 
Each modification must be correct for all execution paths. Cyclomatic Complexity computes the number of the linearly independent paths, a lower bound of all execution paths ignoring multiple iterations. 
Changeability declines with increasing Cyclomatic Complexity. 
Complete testing requires coverage of all execution paths. Cyclomatic Complexity computes the number of the linearly independent paths, a lower bound of all execution paths ignoring multiple iterations. 
Testability declines with increasing Cyclomatic Complexity.</english>
  </metric>
  <metric id="1020000" type="quality-rule" originalName="Avoid Artifacts with High Cyclomatic Complexity (HTML5/Javascript)" section="remediation">
    <english>Review the design of the Artifact to reduce number of independent paths. E.g.: Reduce the number of conditional statements.</english>
  </metric>
  <metric id="1020000" type="quality-rule" originalName="Avoid Artifacts with High Cyclomatic Complexity (HTML5/Javascript)" section="total">
    <english>Number of HTML5/Javascript Artifacts</english>
  </metric>
  <metric id="1020002" type="quality-rule" originalName="Avoid programs with low comment / code ratio  (HTML5/Javascript)" section="associatedValueName">
    <english>Comment/code ratio</english>
  </metric>
  <metric id="1020002" type="quality-rule" originalName="Avoid programs with low comment / code ratio  (HTML5/Javascript)" section="description">
    <english>This rule searches all the programs having a low comment/code ratio.</english>
  </metric>
  <metric id="1020002" type="quality-rule" originalName="Avoid programs with low comment / code ratio  (HTML5/Javascript)" section="name">
    <english>Avoid programs with low comment / code ratio  (HTML5/Javascript)</english>
  </metric>
  <metric id="1020002" type="quality-rule" originalName="Avoid programs with low comment / code ratio  (HTML5/Javascript)" section="output">
    <english>The report lists all the  unreferenced HTML5/Javascript Programs
It provides following information: 
- program name</english>
  </metric>
  <metric id="1020002" type="quality-rule" originalName="Avoid programs with low comment / code ratio  (HTML5/Javascript)" section="rationale">
    <english>Maintainability of the code is facilitated if there is documentation in the code. This rule will ensure there are comments within the program.</english>
  </metric>
  <metric id="1020002" type="quality-rule" originalName="Avoid programs with low comment / code ratio  (HTML5/Javascript)" section="remediation">
    <english>Try to increase the comment/code ratio for programs.</english>
  </metric>
  <metric id="1020002" type="quality-rule" originalName="Avoid programs with low comment / code ratio  (HTML5/Javascript)" section="total">
    <english>Number of HTML5/Javascript Programs</english>
  </metric>
  <metric id="1020004" type="quality-rule" originalName="Avoid using querySelectorAll" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020004" type="quality-rule" originalName="Avoid using querySelectorAll" section="description">
    <english>Compared to getElementsByTagName and getElementsByClassName, querySelectorAll can be 40 time slower.</english>
  </metric>
  <metric id="1020004" type="quality-rule" originalName="Avoid using querySelectorAll" section="name">
    <english>Avoid using querySelectorAll</english>
  </metric>
  <metric id="1020004" type="quality-rule" originalName="Avoid using querySelectorAll" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020004" type="quality-rule" originalName="Avoid using querySelectorAll" section="rationale">
    <english>Ensure your web application interactivity by accessing/manipulating the DOM tree with high performance queries/enumerators.</english>
  </metric>
  <metric id="1020004" type="quality-rule" originalName="Avoid using querySelectorAll" section="reference">
    <english>[1] http://www.infoq.com/presentations/JavaScript-Performance-Patterns 
[2] http://jsperf.com/queryinging/4 
OMG CISQ ASCPEM-PRF-4</english>
  </metric>
  <metric id="1020004" type="quality-rule" originalName="Avoid using querySelectorAll" section="remediation">
    <english>Instead of using querySelectorAll, you will use getElementsByTagName() or getElementsByClassName().</english>
  </metric>
  <metric id="1020004" type="quality-rule" originalName="Avoid using querySelectorAll" section="remediationSample">
    <english>var trs = tabtab.getElementsByTagName('tr'); 
or
var trs = tabtab.getElementsByClassName('rowme');</english>
  </metric>
  <metric id="1020004" type="quality-rule" originalName="Avoid using querySelectorAll" section="sample">
    <english>var trs = tabtab.querySelectorAll('.rowme');</english>
  </metric>
  <metric id="1020004" type="quality-rule" originalName="Avoid using querySelectorAll" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020006" type="quality-rule" originalName="Avoid calling a function in a termination loop" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020006" type="quality-rule" originalName="Avoid calling a function in a termination loop" section="description">
    <english>Reports all JavaScript code that call a function in a loop termination.</english>
  </metric>
  <metric id="1020006" type="quality-rule" originalName="Avoid calling a function in a termination loop" section="name">
    <english>Avoid calling a function in a termination loop (Javascript)</english>
  </metric>
  <metric id="1020006" type="quality-rule" originalName="Avoid calling a function in a termination loop" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020006" type="quality-rule" originalName="Avoid calling a function in a termination loop" section="rationale">
    <english>When calling a function in a end loop, the function will be computed for each loop iteration and will decrease dramatically performances.</english>
  </metric>
  <metric id="1020006" type="quality-rule" originalName="Avoid calling a function in a termination loop" section="reference">
    <english>AJAX in Action - Manning - ISBN 1-932394-61-3 page 290 
CISQ OMG</english>
  </metric>
  <metric id="1020006" type="quality-rule" originalName="Avoid calling a function in a termination loop" section="remediation">
    <english>Use a variable to store the result of a function and use it as the loop termination.</english>
  </metric>
  <metric id="1020006" type="quality-rule" originalName="Avoid calling a function in a termination loop" section="remediationSample">
    <english>var total=0; 
var loopCounter = myfunction(count); 

for (var i=0; i&lt;loopCounter; i++){ // FIXED 
   total+=i; 
}</english>
  </metric>
  <metric id="1020006" type="quality-rule" originalName="Avoid calling a function in a termination loop" section="sample">
    <english>var total=0; 
  
for (var i=0;i&lt;myfunction(count);i++){ // VIOLATION 
   total+=i; 
}</english>
  </metric>
  <metric id="1020006" type="quality-rule" originalName="Avoid calling a function in a termination loop" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020008" type="quality-rule" originalName="Avoid using for-in loop" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020008" type="quality-rule" originalName="Avoid using for-in loop" section="description">
    <english>Since each iteration through the loop results in a property lookup either on the instance or on a prototype, the for-in loop has considerably more overhead per iteration and is therefore slower than the other loops. For the same number of loop iterations, a for-in loop can end up as much as seven times slower than the other loop types. For this reason, it's recommended to avoid the for-in loop unless your intent is to iterate over an unknown number of object properties.</english>
  </metric>
  <metric id="1020008" type="quality-rule" originalName="Avoid using for-in loop" section="name">
    <english>Avoid using for-in loop</english>
  </metric>
  <metric id="1020008" type="quality-rule" originalName="Avoid using for-in loop" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020008" type="quality-rule" originalName="Avoid using for-in loop" section="rationale">
    <english>Ensure your web application interactivity by accessing/manipulating the DOM tree with high performance queries/enumerators.</english>
  </metric>
  <metric id="1020008" type="quality-rule" originalName="Avoid using for-in loop" section="reference">
    <english>CISQ OMG ASCPEM-PRF-4</english>
  </metric>
  <metric id="1020008" type="quality-rule" originalName="Avoid using for-in loop" section="remediation">
    <english>Replace the for-in with regular for with index</english>
  </metric>
  <metric id="1020008" type="quality-rule" originalName="Avoid using for-in loop" section="remediationSample">
    <english>function printArray(arr) { 
    var l = arr.length; 
    for (var i = 0; i &lt; l; i++) { 
        print(arr[i]); 
    } 
}</english>
  </metric>
  <metric id="1020008" type="quality-rule" originalName="Avoid using for-in loop" section="sample">
    <english>function printArray(arr) { 
    for (var key in arr) { 
        print(arr[key]); 
    } 
}</english>
  </metric>
  <metric id="1020008" type="quality-rule" originalName="Avoid using for-in loop" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020010" type="quality-rule" originalName="Avoid using forEach()" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020010" type="quality-rule" originalName="Avoid using forEach()" section="description">
    <english>Even though function-based iteration represents a more convenient method of iteration, it is also quite a bit slower than loop-based iteration. The slowdown can be accounted for by the overhead associated with an extra method being called on each array item. In all cases, function-based iteration takes up to eight times as long as loop-based iteration and therefore isn’t a suitable approach when execution time is a significant concern.</english>
  </metric>
  <metric id="1020010" type="quality-rule" originalName="Avoid using forEach()" section="name">
    <english>Avoid using forEach()</english>
  </metric>
  <metric id="1020010" type="quality-rule" originalName="Avoid using forEach()" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020010" type="quality-rule" originalName="Avoid using forEach()" section="rationale">
    <english>Ensure your web application interactivity by accessing/manipulating the DOM tree with high performance queries/enumerators.</english>
  </metric>
  <metric id="1020010" type="quality-rule" originalName="Avoid using forEach()" section="reference">
    <english>CISQ OMG ASCPEM-PRF-4 
http://jsperf.com/foreach-vs-loop</english>
  </metric>
  <metric id="1020010" type="quality-rule" originalName="Avoid using forEach()" section="remediation">
    <english>Use the regular for loop to enumerate the array</english>
  </metric>
  <metric id="1020010" type="quality-rule" originalName="Avoid using forEach()" section="remediationSample">
    <english>for(var i = 0, l = arr.length; i &lt; l; i++){arr[i];} // GOOD</english>
  </metric>
  <metric id="1020010" type="quality-rule" originalName="Avoid using forEach()" section="sample">
    <english>arr.forEach(function(v){v;}); // BAD</english>
  </metric>
  <metric id="1020010" type="quality-rule" originalName="Avoid using forEach()" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020012" type="quality-rule" originalName="Avoid using a web service with WebSocket inside a loop" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020012" type="quality-rule" originalName="Avoid using a web service with WebSocket inside a loop" section="description">
    <english>When designing web service to get/post/put data, you want to make sure that you minimize the number of calls between the client application and web service server. This rule will check the official WebSocket syntax, to do call to web service.</english>
  </metric>
  <metric id="1020012" type="quality-rule" originalName="Avoid using a web service with WebSocket inside a loop" section="name">
    <english>Avoid using a web service with WebSocket inside a loop</english>
  </metric>
  <metric id="1020012" type="quality-rule" originalName="Avoid using a web service with WebSocket inside a loop" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020012" type="quality-rule" originalName="Avoid using a web service with WebSocket inside a loop" section="rationale">
    <english>When designing web service to get/put/post data, you want to make sure that you minimize the number of calls between the client application and web service server. By minimizing the number of calls, you improve application speed, reduce communications overhead (why send three request when you can do it by one), and reduce network traffic.</english>
  </metric>
  <metric id="1020012" type="quality-rule" originalName="Avoid using a web service with WebSocket inside a loop" section="reference">
    <english>CISQ Rule: ASCPEM-PRF-08</english>
  </metric>
  <metric id="1020012" type="quality-rule" originalName="Avoid using a web service with WebSocket inside a loop" section="remediation">
    <english>Try to create a process queue that will manage all the requests with a limited number of concurrents requests. When a request callback has been managed a new request could be fired.</english>
  </metric>
  <metric id="1020012" type="quality-rule" originalName="Avoid using a web service with WebSocket inside a loop" section="sample">
    <english>for(...) { 

     var socket = new WebSocket('ws://game.example.com:12010/updates'); 
     socket.onopen = function () { 
            setInterval(function() { 
                 if (socket.bufferedAmount == 0) 
                       socket.send(getUpdateData()); 
      }, 50); 
}</english>
  </metric>
  <metric id="1020012" type="quality-rule" originalName="Avoid using a web service with WebSocket inside a loop" section="total">
    <english>Number of Javascript Functions using WebSocket</english>
  </metric>
  <metric id="1020014" type="quality-rule" originalName="Avoid using a web service with XMLHttpRequest inside a loop" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020014" type="quality-rule" originalName="Avoid using a web service with XMLHttpRequest inside a loop" section="description">
    <english>When designing web service to get/post/put data, you want to make sure that you minimize the number of calls between the client application and web service server. This rule will check the official XMLHttpRequest syntax, to do call to web service.</english>
  </metric>
  <metric id="1020014" type="quality-rule" originalName="Avoid using a web service with XMLHttpRequest inside a loop" section="name">
    <english>Avoid using a web service with XMLHttpRequest inside a loop</english>
  </metric>
  <metric id="1020014" type="quality-rule" originalName="Avoid using a web service with XMLHttpRequest inside a loop" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020014" type="quality-rule" originalName="Avoid using a web service with XMLHttpRequest inside a loop" section="rationale">
    <english>When designing web service to get/put/post data, you want to make sure that you minimize the number of calls between the client application and web service server. By minimizing the number of calls, you improve application speed, reduce communications overhead (why send three request when you can do it by one), and reduce network traffic.</english>
  </metric>
  <metric id="1020014" type="quality-rule" originalName="Avoid using a web service with XMLHttpRequest inside a loop" section="reference">
    <english>CISQ Rule: ASCPEM-PRF-08</english>
  </metric>
  <metric id="1020014" type="quality-rule" originalName="Avoid using a web service with XMLHttpRequest inside a loop" section="remediation">
    <english>Try to create a process queue that will manage all the requests with a limited number of concurrents requests. When a request callback has been managed a new request could be fired.</english>
  </metric>
  <metric id="1020014" type="quality-rule" originalName="Avoid using a web service with XMLHttpRequest inside a loop" section="sample">
    <english>for(...) { 
      req = new XMLHttpRequest(); 

      if(req) { 
               req.onreadystatechange = processReqChange; 
               req.open("GET", url + '?' + params, true); 
               req.send(null); 
      } 
}</english>
  </metric>
  <metric id="1020014" type="quality-rule" originalName="Avoid using a web service with XMLHttpRequest inside a loop" section="total">
    <english>Number of Javascript Functions using XMLHttpRequest</english>
  </metric>
  <metric id="1020016" type="quality-rule" originalName="Avoid using too much dot notation in loop" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020016" type="quality-rule" originalName="Avoid using too much dot notation in loop" section="description">
    <english>List all JavaScript file, HTML file or function that reference more than 2 times the same variable name with more than one dot.</english>
  </metric>
  <metric id="1020016" type="quality-rule" originalName="Avoid using too much dot notation in loop" section="name">
    <english>Avoid using too much dot notation in loop</english>
  </metric>
  <metric id="1020016" type="quality-rule" originalName="Avoid using too much dot notation in loop" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020016" type="quality-rule" originalName="Avoid using too much dot notation in loop" section="rationale">
    <english>Every time the interpreter encounters a dot character, it will look up the child variable against the parent. For example, var hourHand=myGrandFather.clock.hands.hour make three lookup. When used too much in a loop, dot notation can affect performance of a javascript function. Reducing the dotation usage can win 50% of the time consumed by this function. This rule is compliant with CISQ OMG ASCPEM-PRF-4 recommendation.</english>
  </metric>
  <metric id="1020016" type="quality-rule" originalName="Avoid using too much dot notation in loop" section="reference">
    <english>AJAX in Action - Manning - ISBN 1-932394-61-3 page 296</english>
  </metric>
  <metric id="1020016" type="quality-rule" originalName="Avoid using too much dot notation in loop" section="remediation">
    <english>Use intermediate variable to minimize the number of dot within the loop.</english>
  </metric>
  <metric id="1020016" type="quality-rule" originalName="Avoid using too much dot notation in loop" section="remediationSample">
    <english>for (var i=0;i&lt;data;i+=1){ 
  var hands = myGrandFather.clock.hands; 
  var hourHand=hands.hour; 
  var minuteHand=hands.minute; 
  var secondHand=hands.second; 
  ... 
}</english>
  </metric>
  <metric id="1020016" type="quality-rule" originalName="Avoid using too much dot notation in loop" section="sample">
    <english>for (var i=0;i&lt;data;i+=1){ 
  var hourHand=myGrandFather.clock.hands.hour; 
  var minuteHand=myGrandFather.clock.hands.minute; 
  var secondHand=myGrandFather.clock.hands.second; 
  ... 
} // VIOLATION "myGrandFather.clock.hands" has been referenced more than 2 times</english>
  </metric>
  <metric id="1020016" type="quality-rule" originalName="Avoid using too much dot notation in loop" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020018" type="quality-rule" originalName="Avoid using Web SQL databases" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020018" type="quality-rule" originalName="Avoid using Web SQL databases" section="description">
    <english>The Web SQL Database standard will never be officially supported. It was first formulated, then deprecated by the W3C and was only implemented in some browsers. (It is not supported in Firefox or IE.) 

Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.</english>
  </metric>
  <metric id="1020018" type="quality-rule" originalName="Avoid using Web SQL databases" section="name">
    <english>Avoid using Web SQL databases</english>
  </metric>
  <metric id="1020018" type="quality-rule" originalName="Avoid using Web SQL databases" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020018" type="quality-rule" originalName="Avoid using Web SQL databases" section="rationale">
    <english>OWASP Top Ten 2013 Category A6 - Sensitive Data Exposure 
OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities</english>
  </metric>
  <metric id="1020018" type="quality-rule" originalName="Avoid using Web SQL databases" section="reference">
    <english>http://www.w3.org/TR/webdatabase/</english>
  </metric>
  <metric id="1020018" type="quality-rule" originalName="Avoid using Web SQL databases" section="remediation">
    <english>Do not use window.openDatabase syntax.</english>
  </metric>
  <metric id="1020018" type="quality-rule" originalName="Avoid using Web SQL databases" section="sample">
    <english>if (!window.openDatabase) { 
alert('Databases are not supported in this browser.'); 
}</english>
  </metric>
  <metric id="1020018" type="quality-rule" originalName="Avoid using Web SQL databases" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020020" type="quality-rule" originalName="Avoid blocking page loading with synchronous Javascript import" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020020" type="quality-rule" originalName="Avoid blocking page loading with synchronous Javascript import" section="description">
    <english>Reports any code which contains the instruction &lt;script src="http://*.js"&gt; in the html body block.</english>
  </metric>
  <metric id="1020020" type="quality-rule" originalName="Avoid blocking page loading with synchronous Javascript import" section="name">
    <english>Avoid blocking page loading with synchronous Javascript import</english>
  </metric>
  <metric id="1020020" type="quality-rule" originalName="Avoid blocking page loading with synchronous Javascript import" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020020" type="quality-rule" originalName="Avoid blocking page loading with synchronous Javascript import" section="rationale">
    <english>When you include javascript under this form &lt;script src="http://*.js"&gt;, you create a Single Point of Failure. Loading the script in this way is blocking all other download in the page and any element below the script are blocked from rendering. 
It is better to load the script asynchronously.</english>
  </metric>
  <metric id="1020020" type="quality-rule" originalName="Avoid blocking page loading with synchronous Javascript import" section="reference">
    <english>[1] http://www.infoq.com/presentations/JavaScript-Performance-Patterns 
[2] http://www.stevesouders.com/blog/2008/12/27/coupling-async-scripts/</english>
  </metric>
  <metric id="1020020" type="quality-rule" originalName="Avoid blocking page loading with synchronous Javascript import" section="remediation">
    <english>There are different methods that can be used: 
- &lt;script defer&gt; or &lt;script async&gt; 
- Asynchronous Script Loading: 
var script = document.createElement('script'); 
script.src = "sorttable-async.js"; 
script.text = "sorttable.init()"; // this is explained in the next section 
document.getElementsByTagName('head')[0].appendChild(script); 
- Lazy Loading: 
window.onload = function() { 
    var script = document.createElement('script'); 
    script.src = "sorttable-async.js"; 
    script.text = "sorttable.init()"; 
    document.getElementsByTagName('head')[0].appendChild(script); 
}</english>
  </metric>
  <metric id="1020020" type="quality-rule" originalName="Avoid blocking page loading with synchronous Javascript import" section="remediationSample">
    <english>&lt;script async="http://*.js"&gt;

// or

&lt;script defer="http://*.js"&gt;</english>
  </metric>
  <metric id="1020020" type="quality-rule" originalName="Avoid blocking page loading with synchronous Javascript import" section="sample">
    <english>&lt;script src="http://*.js"&gt;</english>
  </metric>
  <metric id="1020020" type="quality-rule" originalName="Avoid blocking page loading with synchronous Javascript import" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020022" type="quality-rule" originalName="Avoid using submitted markup containing &quot;form&quot; and &quot;formaction&quot; attributes" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020022" type="quality-rule" originalName="Avoid using submitted markup containing &quot;form&quot; and &quot;formaction&quot; attributes" section="description">
    <english>Do not allow uses to submit markup containing "form" and "formaction" attributes.</english>
  </metric>
  <metric id="1020022" type="quality-rule" originalName="Avoid using submitted markup containing &quot;form&quot; and &quot;formaction&quot; attributes" section="name">
    <english>Avoid using submitted markup containing "form" and "formaction" attributes</english>
  </metric>
  <metric id="1020022" type="quality-rule" originalName="Avoid using submitted markup containing &quot;form&quot; and &quot;formaction&quot; attributes" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020022" type="quality-rule" originalName="Avoid using submitted markup containing &quot;form&quot; and &quot;formaction&quot; attributes" section="rationale">
    <english>An attacker can use the combination of form and formaction markups to use the form to do spam.</english>
  </metric>
  <metric id="1020022" type="quality-rule" originalName="Avoid using submitted markup containing &quot;form&quot; and &quot;formaction&quot; attributes" section="reference">
    <english>https://html5sec.org/#1</english>
  </metric>
  <metric id="1020022" type="quality-rule" originalName="Avoid using submitted markup containing &quot;form&quot; and &quot;formaction&quot; attributes" section="sample">
    <english>&lt;form id="test"&gt;&lt;button form="test" formaction="javascript:alert(1)"&gt;X&lt;/button&gt;&lt;/form&gt;
&lt;form&gt;&lt;button formaction="javascript:alert(1)"&gt;X&lt;/button&gt;&lt;/form&gt;</english>
  </metric>
  <metric id="1020022" type="quality-rule" originalName="Avoid using submitted markup containing &quot;form&quot; and &quot;formaction&quot; attributes" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020024" type="quality-rule" originalName="Avoid using submit markup related to &quot;form&quot; with id attribute" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020024" type="quality-rule" originalName="Avoid using submit markup related to &quot;form&quot; with id attribute" section="description">
    <english>Do not allow users to use submit markup related to "form" with id attribute.</english>
  </metric>
  <metric id="1020024" type="quality-rule" originalName="Avoid using submit markup related to &quot;form&quot; with id attribute" section="name">
    <english>Avoid using submit markup related to "form" with id attribute</english>
  </metric>
  <metric id="1020024" type="quality-rule" originalName="Avoid using submit markup related to &quot;form&quot; with id attribute" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020024" type="quality-rule" originalName="Avoid using submit markup related to &quot;form&quot; with id attribute" section="rationale">
    <english>An attacker can use a form to do spam emailing. Ensure the form markup does not contain id attribute.</english>
  </metric>
  <metric id="1020024" type="quality-rule" originalName="Avoid using submit markup related to &quot;form&quot; with id attribute" section="reference">
    <english>https://html5sec.org/#1 
http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#attr-fs-formaction</english>
  </metric>
  <metric id="1020024" type="quality-rule" originalName="Avoid using submit markup related to &quot;form&quot; with id attribute" section="sample">
    <english>&lt;form id="myid"&gt;&lt;input type="submit" value="Submit"&gt;&lt;/form&gt;</english>
  </metric>
  <metric id="1020024" type="quality-rule" originalName="Avoid using submit markup related to &quot;form&quot; with id attribute" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020026" type="quality-rule" originalName="Avoid using autofocus and onfocus in submitted markup" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020026" type="quality-rule" originalName="Avoid using autofocus and onfocus in submitted markup" section="description">
    <english>Do not allow self-executing focus event via autofocus otherwise it will execute a command without no user interaction.</english>
  </metric>
  <metric id="1020026" type="quality-rule" originalName="Avoid using autofocus and onfocus in submitted markup" section="name">
    <english>Avoid using autofocus and onfocus in submitted markup</english>
  </metric>
  <metric id="1020026" type="quality-rule" originalName="Avoid using autofocus and onfocus in submitted markup" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020026" type="quality-rule" originalName="Avoid using autofocus and onfocus in submitted markup" section="rationale">
    <english>Ensure you don't use html pattern that can give a way to execute code without user interaction.</english>
  </metric>
  <metric id="1020026" type="quality-rule" originalName="Avoid using autofocus and onfocus in submitted markup" section="reference">
    <english>https://html5sec.org/#7 
http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#autofocusing-a-form-control</english>
  </metric>
  <metric id="1020026" type="quality-rule" originalName="Avoid using autofocus and onfocus in submitted markup" section="remediationSample">
    <english>&lt;input autofocus&gt;</english>
  </metric>
  <metric id="1020026" type="quality-rule" originalName="Avoid using autofocus and onfocus in submitted markup" section="sample">
    <english>&lt;input onfocus=write(1) autofocus&gt;</english>
  </metric>
  <metric id="1020026" type="quality-rule" originalName="Avoid using autofocus and onfocus in submitted markup" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020028" type="quality-rule" originalName="Avoid using autofocus and onblur in submitted markup" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020028" type="quality-rule" originalName="Avoid using autofocus and onblur in submitted markup" section="description">
    <english>Do not allow self-executing blur event via autofocus otherwise it will execute a command without no user interaction.</english>
  </metric>
  <metric id="1020028" type="quality-rule" originalName="Avoid using autofocus and onblur in submitted markup" section="name">
    <english>Avoid using autofocus and onblur in submitted markup</english>
  </metric>
  <metric id="1020028" type="quality-rule" originalName="Avoid using autofocus and onblur in submitted markup" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020028" type="quality-rule" originalName="Avoid using autofocus and onblur in submitted markup" section="rationale">
    <english>Ensure you don't use html pattern that can give a way to execute code without user interaction.</english>
  </metric>
  <metric id="1020028" type="quality-rule" originalName="Avoid using autofocus and onblur in submitted markup" section="reference">
    <english>https://html5sec.org/#8 
http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#autofocusing-a-form-control</english>
  </metric>
  <metric id="1020028" type="quality-rule" originalName="Avoid using autofocus and onblur in submitted markup" section="remediationSample">
    <english>&lt;input autofocus&gt;</english>
  </metric>
  <metric id="1020028" type="quality-rule" originalName="Avoid using autofocus and onblur in submitted markup" section="sample">
    <english>&lt;input onblur=write(1) autofocus&gt;</english>
  </metric>
  <metric id="1020028" type="quality-rule" originalName="Avoid using autofocus and onblur in submitted markup" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020030" type="quality-rule" originalName="Avoid using javascript or expression in the CSS file" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020030" type="quality-rule" originalName="Avoid using javascript or expression in the CSS file" section="description">
    <english>You will have to ensure that URLs only start with "http" not "javascript" and that properties never start with "expression".</english>
  </metric>
  <metric id="1020030" type="quality-rule" originalName="Avoid using javascript or expression in the CSS file" section="name">
    <english>Avoid using javascript or expression in the CSS file</english>
  </metric>
  <metric id="1020030" type="quality-rule" originalName="Avoid using javascript or expression in the CSS file" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020030" type="quality-rule" originalName="Avoid using javascript or expression in the CSS file" section="rationale">
    <english>Ensure your css files will not get data from untrusted source.</english>
  </metric>
  <metric id="1020030" type="quality-rule" originalName="Avoid using javascript or expression in the CSS file" section="sample">
    <english>{ background-url : "javascript:alert(1)"; } // and all other URLs 
 { text-size: "expression(alert('XSS'))"; } // only in IE</english>
  </metric>
  <metric id="1020030" type="quality-rule" originalName="Avoid using javascript or expression in the CSS file" section="total">
    <english>Number of CSS Contents</english>
  </metric>
  <metric id="1020032" type="quality-rule" originalName="Avoid using video poster attributes in combination with javascript" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020032" type="quality-rule" originalName="Avoid using video poster attributes in combination with javascript" section="description">
    <english>Do not allow users to use video markup with poster attribute combined with javascript.</english>
  </metric>
  <metric id="1020032" type="quality-rule" originalName="Avoid using video poster attributes in combination with javascript" section="name">
    <english>Avoid using video poster attributes in combination with javascript</english>
  </metric>
  <metric id="1020032" type="quality-rule" originalName="Avoid using video poster attributes in combination with javascript" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020032" type="quality-rule" originalName="Avoid using video poster attributes in combination with javascript" section="rationale">
    <english>Ensure you don't use html pattern that can give a way to execute code without user interaction.</english>
  </metric>
  <metric id="1020032" type="quality-rule" originalName="Avoid using video poster attributes in combination with javascript" section="reference">
    <english>https://html5sec.org/#10</english>
  </metric>
  <metric id="1020032" type="quality-rule" originalName="Avoid using video poster attributes in combination with javascript" section="remediation">
    <english>Make sure only relative URIs and correctly MIME-typed data URIs can be used for VIDEO poster attributes</english>
  </metric>
  <metric id="1020032" type="quality-rule" originalName="Avoid using video poster attributes in combination with javascript" section="sample">
    <english>&lt;video poster=javascript:alert(1)//&gt;&lt;/video&gt;</english>
  </metric>
  <metric id="1020032" type="quality-rule" originalName="Avoid using video poster attributes in combination with javascript" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020034" type="quality-rule" originalName="Avoid hosting HTML code in iframe srcdoc" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020034" type="quality-rule" originalName="Avoid hosting HTML code in iframe srcdoc" section="description">
    <english>HTML5 specifies a "srcdoc" attribute for Iframes. This attribute, quite similar to data URIs, is capable of hosting HTML text to be rendered by the browser as the content of the Iframe. The pseudo-document created by the "srcdoc" attribute has full access to the hosting domain, although it runs in an artificial origin. This attribute should if at all only be used in combination with the Iframe Sandbox.</english>
  </metric>
  <metric id="1020034" type="quality-rule" originalName="Avoid hosting HTML code in iframe srcdoc" section="name">
    <english>Avoid hosting HTML code in iframe srcdoc</english>
  </metric>
  <metric id="1020034" type="quality-rule" originalName="Avoid hosting HTML code in iframe srcdoc" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020034" type="quality-rule" originalName="Avoid hosting HTML code in iframe srcdoc" section="rationale">
    <english>Ensure you do not have html pattern that allows an attacker to try an injection using iframe content features.</english>
  </metric>
  <metric id="1020034" type="quality-rule" originalName="Avoid hosting HTML code in iframe srcdoc" section="reference">
    <english>https://html5sec.org/#139</english>
  </metric>
  <metric id="1020034" type="quality-rule" originalName="Avoid hosting HTML code in iframe srcdoc" section="remediation">
    <english>Make sure to use "srcdoc" only in combination with the Iframe Sandbox. Otherwise, XSS attacks might slip through existing filters rules as the payload can be HTML encoded.</english>
  </metric>
  <metric id="1020034" type="quality-rule" originalName="Avoid hosting HTML code in iframe srcdoc" section="remediationSample">
    <english>&lt;iframe sandbox srcdoc="&amp;lt;img src&amp;equals;x:x onerror&amp;equals;alert&amp;lpar;1&amp;rpar;&amp;gt;" /&gt;</english>
  </metric>
  <metric id="1020034" type="quality-rule" originalName="Avoid hosting HTML code in iframe srcdoc" section="sample">
    <english>&lt;iframe srcdoc="&amp;lt;img src&amp;equals;x:x onerror&amp;equals;alert&amp;lpar;1&amp;rpar;&amp;gt;" /&gt;</english>
  </metric>
  <metric id="1020034" type="quality-rule" originalName="Avoid hosting HTML code in iframe srcdoc" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020036" type="quality-rule" originalName="Avoid using onscroll event with autofocus input" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020036" type="quality-rule" originalName="Avoid using onscroll event with autofocus input" section="description">
    <english>Do not allow users to use an autofocus on an input when onscroll event has been defined on the body. This pattern will create a self-executing javascript via body.</english>
  </metric>
  <metric id="1020036" type="quality-rule" originalName="Avoid using onscroll event with autofocus input" section="name">
    <english>Avoid using onscroll event with autofocus input</english>
  </metric>
  <metric id="1020036" type="quality-rule" originalName="Avoid using onscroll event with autofocus input" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020036" type="quality-rule" originalName="Avoid using onscroll event with autofocus input" section="rationale">
    <english>Ensure you don't use html pattern that can give a way to execute code without user interaction.</english>
  </metric>
  <metric id="1020036" type="quality-rule" originalName="Avoid using onscroll event with autofocus input" section="reference">
    <english>https://html5sec.org/#12</english>
  </metric>
  <metric id="1020036" type="quality-rule" originalName="Avoid using onscroll event with autofocus input" section="sample">
    <english>&lt;body onscroll=alert(1)&gt; ... .... &lt;input autofocus&gt; ... ... &lt;/body&gt;</english>
  </metric>
  <metric id="1020036" type="quality-rule" originalName="Avoid using onscroll event with autofocus input" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020038" type="quality-rule" originalName="Avoid defining and calling functions inside loops" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020038" type="quality-rule" originalName="Avoid defining and calling functions inside loops" section="description">
    <english>Defining a function inside a loop is adding unnecessary steps and will certainly affect performance, this is why this rule will find all the javascript anonymous function call/creation in loops.</english>
  </metric>
  <metric id="1020038" type="quality-rule" originalName="Avoid defining and calling functions inside loops" section="name">
    <english>Avoid defining and calling functions inside loops</english>
  </metric>
  <metric id="1020038" type="quality-rule" originalName="Avoid defining and calling functions inside loops" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020038" type="quality-rule" originalName="Avoid defining and calling functions inside loops" section="rationale">
    <english>Writing functions within loops tends to result in errors due to the way the function creates a closure around the loop.</english>
  </metric>
  <metric id="1020038" type="quality-rule" originalName="Avoid defining and calling functions inside loops" section="reference">
    <english>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures
http://eslint.org/docs/rules/no-loop-func</english>
  </metric>
  <metric id="1020038" type="quality-rule" originalName="Avoid defining and calling functions inside loops" section="remediation">
    <english>Define the function out of the loop and use the reference inside the loop</english>
  </metric>
  <metric id="1020038" type="quality-rule" originalName="Avoid defining and calling functions inside loops" section="remediationSample">
    <english>var a = function() {}; 

for (var i=10; i; i--) { 
    a(); 
} 

for (var i=10; i; i--) { 
    var a = function() {}; // OK, no references to variables in the outer scopes. 
    a(); 
} 

for (let i=10; i; i--) { 
    var a = function() { return i; }; // OK, all references are referring to block scoped variables in the loop. 
    a(); 
} 

var foo = 100; 
for (let i=10; i; i--) { 
    var a = function() { return foo; }; // OK, all references are referring to never modified variables. 
    a(); 
}</english>
  </metric>
  <metric id="1020038" type="quality-rule" originalName="Avoid defining and calling functions inside loops" section="sample">
    <english>for (var i=10; i; i--) { 
    (function() { return i; })(); 
} 

while(i) { 
    var a = function() { return i; }; 
    a(); 
} 

do { 
    function a() { return i; }; 
    a(); 
} while (i); 

let foo = 0; 
for (let i=10; i; i--) { 
    // Bad, function is referencing block scoped variable in the outer scope. 
    var a = function() { return foo; }; 
    a(); 
}</english>
  </metric>
  <metric id="1020038" type="quality-rule" originalName="Avoid defining and calling functions inside loops" section="total">
    <english>Number of anonymous javascript function call in loops</english>
  </metric>
  <metric id="1020040" type="quality-rule" originalName="Avoid using delete with no object properties" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020040" type="quality-rule" originalName="Avoid using delete with no object properties" section="description">
    <english>Because the semantics of the delete operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass anything else to it, and you may or may not get the desired result.</english>
  </metric>
  <metric id="1020040" type="quality-rule" originalName="Avoid using delete with no object properties" section="name">
    <english>Avoid using delete with no object properties</english>
  </metric>
  <metric id="1020040" type="quality-rule" originalName="Avoid using delete with no object properties" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020040" type="quality-rule" originalName="Avoid using delete with no object properties" section="rationale">
    <english>ASCMM-MNT-20</english>
  </metric>
  <metric id="1020040" type="quality-rule" originalName="Avoid using delete with no object properties" section="reference">
    <english>http://eslint.org/docs/rules/no-delete-var</english>
  </metric>
  <metric id="1020040" type="quality-rule" originalName="Avoid using delete with no object properties" section="remediationSample">
    <english>var obj = { 
  x:1, 
  foo: function(){ 
  ... 
  } 
}; 
delete obj.x; 
delete obj.foo;</english>
  </metric>
  <metric id="1020040" type="quality-rule" originalName="Avoid using delete with no object properties" section="sample">
    <english>var x = 1; 
delete x; // Noncompliant 

function foo(){ 
.. 
} 

delete foo; // Noncompliant</english>
  </metric>
  <metric id="1020040" type="quality-rule" originalName="Avoid using delete with no object properties" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020042" type="quality-rule" originalName="Avoid having iframe inside a tag" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020042" type="quality-rule" originalName="Avoid having iframe inside a tag" section="description">
    <english>This is a reverse clickjacking via iframe issue. For example, Internet Explorer allows to place &lt;IFRAME&gt; tags inside &lt;A&gt; tags. By clicking on a not clickable element inside the IFRAME there will be executed the URL defined in the "href" attribute of the &lt;A&gt; tag.</english>
  </metric>
  <metric id="1020042" type="quality-rule" originalName="Avoid having iframe inside a tag" section="name">
    <english>Avoid having iframe inside a tag</english>
  </metric>
  <metric id="1020042" type="quality-rule" originalName="Avoid having iframe inside a tag" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020042" type="quality-rule" originalName="Avoid having iframe inside a tag" section="rationale">
    <english>Ensure you do not have html pattern that allows an attacker to do a reverse clickjacking.</english>
  </metric>
  <metric id="1020042" type="quality-rule" originalName="Avoid having iframe inside a tag" section="reference">
    <english>https://html5sec.org/#117</english>
  </metric>
  <metric id="1020042" type="quality-rule" originalName="Avoid having iframe inside a tag" section="sample">
    <english>&lt;a href="http://attacker.org"&gt; &lt;iframe src="http://example.org/"&gt;&lt;/iframe&gt; &lt;/a&gt;</english>
  </metric>
  <metric id="1020042" type="quality-rule" originalName="Avoid having iframe inside a tag" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020044" type="quality-rule" originalName="Avoid using setData in ondragstart with attribute draggable set to true" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020044" type="quality-rule" originalName="Avoid using setData in ondragstart with attribute draggable set to true" section="description">
    <english>This is a text injection by drag-and-drop. If you have a draggable block which triggered an ondragstart event that contains a malicious code and an iframe, the malicious code could be executed.</english>
  </metric>
  <metric id="1020044" type="quality-rule" originalName="Avoid using setData in ondragstart with attribute draggable set to true" section="name">
    <english>Avoid using setData in ondragstart with attribute draggable set to true</english>
  </metric>
  <metric id="1020044" type="quality-rule" originalName="Avoid using setData in ondragstart with attribute draggable set to true" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020044" type="quality-rule" originalName="Avoid using setData in ondragstart with attribute draggable set to true" section="rationale">
    <english>Ensure you do not have html pattern that allows an attacker to try a text injection using drag and drop features.</english>
  </metric>
  <metric id="1020044" type="quality-rule" originalName="Avoid using setData in ondragstart with attribute draggable set to true" section="reference">
    <english>https://www.w3.org/html/wg/spec/dnd.html#dnd
https://html5sec.org/#118</english>
  </metric>
  <metric id="1020044" type="quality-rule" originalName="Avoid using setData in ondragstart with attribute draggable set to true" section="sample">
    <english>&lt;div draggable="true" ondragstart="event.dataTransfer.setData("text/plain","malicious code");"&gt; &lt;h1&gt;Drop me&lt;/h1&gt; &lt;/div&gt; &lt;iframe src="http://www.example.org/dropHere.html"&gt;&lt;/iframe&gt;</english>
  </metric>
  <metric id="1020044" type="quality-rule" originalName="Avoid using setData in ondragstart with attribute draggable set to true" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020046" type="quality-rule" originalName="Avoid using oninput in body containing input autofocus" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020046" type="quality-rule" originalName="Avoid using oninput in body containing input autofocus" section="description">
    <english>This is a passive JavaScript execution via &lt;BODY&gt; and oninput attribute. 
All browsers besides Internet Explorer 9 support the "oninput" event handler around form elements like the given &lt;INPUT&gt;. The event works for the form elements itself, the surrounding form and &lt;BODY&gt; as well as &lt;HTML&gt; tags.</english>
  </metric>
  <metric id="1020046" type="quality-rule" originalName="Avoid using oninput in body containing input autofocus" section="name">
    <english>Avoid using oninput in body containing input autofocus</english>
  </metric>
  <metric id="1020046" type="quality-rule" originalName="Avoid using oninput in body containing input autofocus" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020046" type="quality-rule" originalName="Avoid using oninput in body containing input autofocus" section="rationale">
    <english>Ensure you don't use html pattern that can give a way to execute code without user interaction.</english>
  </metric>
  <metric id="1020046" type="quality-rule" originalName="Avoid using oninput in body containing input autofocus" section="reference">
    <english>https://html5sec.org/#86</english>
  </metric>
  <metric id="1020046" type="quality-rule" originalName="Avoid using oninput in body containing input autofocus" section="sample">
    <english>&lt;body oninput=alert(1)&gt; ... &lt;input autofocus&gt; ... &lt;/body&gt;</english>
  </metric>
  <metric id="1020046" type="quality-rule" originalName="Avoid using oninput in body containing input autofocus" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020048" type="quality-rule" originalName="Avoid using source tag in video/audio with event handler" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020048" type="quality-rule" originalName="Avoid using source tag in video/audio with event handler" section="description">
    <english>Opera 10.5+ and Chrome allow error handlers in &lt;SOURCE&gt; tags if encapsulated by a &lt;VIDEO&gt; or &lt;AUDIO&gt; tag.</english>
  </metric>
  <metric id="1020048" type="quality-rule" originalName="Avoid using source tag in video/audio with event handler" section="name">
    <english>Avoid using source tag in video/audio with event handler</english>
  </metric>
  <metric id="1020048" type="quality-rule" originalName="Avoid using source tag in video/audio with event handler" section="remediation">
    <english>Make sure user submitted &lt;SOURCE&gt;, &lt;AUDIO&gt;, &lt;VIDEO&gt; tags cannot contain event handlers or whitelist event handlers necessary for UI controls</english>
  </metric>  
  <metric id="1020048" type="quality-rule" originalName="Avoid using source tag in video/audio with event handler" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020048" type="quality-rule" originalName="Avoid using source tag in video/audio with event handler" section="rationale">
    <english>Ensure you don't use html pattern that can give a way to execute code without user interaction.</english>
  </metric>
  <metric id="1020048" type="quality-rule" originalName="Avoid using source tag in video/audio with event handler" section="reference">
    <english>https://html5sec.org/#55 
https://html5sec.org/#56</english>
  </metric>
  <metric id="1020048" type="quality-rule" originalName="Avoid using source tag in video/audio with event handler" section="sample">
    <english>&lt;video&gt;&lt;source onerror="alert(1)"/&gt;&lt;/video&gt; 
&lt;video onerror="alert(1)"&gt;&lt;source&gt;&lt;/source&gt;&lt;/video&gt;</english>
  </metric>
  <metric id="1020048" type="quality-rule" originalName="Avoid using source tag in video/audio with event handler" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020050" type="quality-rule" originalName="Avoid white-listing the &quot;dirname&quot; attribute in user generated content" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020050" type="quality-rule" originalName="Avoid white-listing the &quot;dirname&quot; attribute in user generated content" section="description">
    <english>Opera and Chrome support the HTML5 attribute "dirname", that can be used to have the browser communicate the text-flow direction of another input element by adding it to the server-sent request body. By injecting a "dirname" attribute in an existing form, an attacker can overwrite user input and thereby make it guessable for malicious purposes.</english>
  </metric>
  <metric id="1020050" type="quality-rule" originalName="Avoid white-listing the &quot;dirname&quot; attribute in user generated content" section="name">
    <english>Avoid white-listing the "dirname" attribute in user generated content</english>
  </metric>
  <metric id="1020050" type="quality-rule" originalName="Avoid white-listing the &quot;dirname&quot; attribute in user generated content" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020050" type="quality-rule" originalName="Avoid white-listing the &quot;dirname&quot; attribute in user generated content" section="rationale">
    <english>Ensure you do not import content from an untrusted source.</english>
  </metric>
  <metric id="1020050" type="quality-rule" originalName="Avoid white-listing the &quot;dirname&quot; attribute in user generated content" section="reference">
    <english>https://html5sec.org/#136</english>
  </metric>
  <metric id="1020050" type="quality-rule" originalName="Avoid white-listing the &quot;dirname&quot; attribute in user generated content" section="sample">
    <english>&lt;form action="" method="post"&gt; 
   &lt;input name="username" value="admin" /&gt; 
   &lt;input name="password" type="password" value="secret" /&gt; 
   &lt;input name="injected" value="injected" dirname="password" /&gt; 
   &lt;input type="submit"&gt;
&lt;/form&gt;</english>
  </metric>
  <metric id="1020050" type="quality-rule" originalName="Avoid white-listing the &quot;dirname&quot; attribute in user generated content" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020052" type="quality-rule" originalName="Avoid using import with external URI" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020052" type="quality-rule" originalName="Avoid using import with external URI" section="description">
    <english>JavaScript could be executed via cross-origin HTML imports. Make sure that HTML imports are limited to the same origin. Avoid permitting users to have &lt;link&gt; tags in user-generated rich-text as they can now directly execute JavaScript without any user interaction.</english>
  </metric>
  <metric id="1020052" type="quality-rule" originalName="Avoid using import with external URI" section="name">
    <english>Avoid using import with external URI</english>
  </metric>
  <metric id="1020052" type="quality-rule" originalName="Avoid using import with external URI" section="remediation">
    <english>Make sure that HTML imports are limited to the same origin. Avoid permitting users to have &lt;link&gt; tags in user-generated rich-text as they can now directly execute JavaScript without any user interaction.</english>
  </metric>
  <metric id="1020052" type="quality-rule" originalName="Avoid using import with external URI" section="remediationSample">
    <english>&lt;link rel="import" href="test.svg" /&gt;</english>
  </metric>  
  <metric id="1020052" type="quality-rule" originalName="Avoid using import with external URI" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020052" type="quality-rule" originalName="Avoid using import with external URI" section="rationale">
    <english>Ensure you do not import content from an untrusted source.</english>
  </metric>
  <metric id="1020052" type="quality-rule" originalName="Avoid using import with external URI" section="reference">
    <english>https://html5sec.org/#138</english>
  </metric>
  <metric id="1020052" type="quality-rule" originalName="Avoid using import with external URI" section="sample">
    <english>&lt;link rel="import" href="http://xxxx.com/test.svg" /&gt; &lt;!-- This may be not the current origin --&gt;</english>
  </metric>
  <metric id="1020052" type="quality-rule" originalName="Avoid using import with external URI" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020054" type="quality-rule" originalName="Avoid using delete on arrays" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020054" type="quality-rule" originalName="Avoid using delete on arrays" section="description">
    <english>The delete operator can be used to remove a property from any object. Arrays are objects, so the delete operator can be used here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. Use the following methods to: 
- add/remove elements from the the array : Array.prototype.splice 
- add/remove elements from the end of the array : Array.prototype.pop 
- add/remove elements from the beginning of the array : Array.prototype.shift</english>
  </metric>
  <metric id="1020054" type="quality-rule" originalName="Avoid using delete on arrays" section="name">
    <english>Avoid using delete on arrays</english>
  </metric>
  <metric id="1020054" type="quality-rule" originalName="Avoid using delete on arrays" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020054" type="quality-rule" originalName="Avoid using delete on arrays" section="rationale">
    <english>ASCMM-MNT-20</english>
  </metric>
  <metric id="1020054" type="quality-rule" originalName="Avoid using delete on arrays" section="remediationSample">
    <english>var myArray = ['a', 'b', 'c', 'd']; 

// removes 1 element from index 2 
removed = myArray.splice(2, 1); // myArray =&gt; ['a', 'b', 'd'] 
console.log(myArray[2]); // outputs 'd'</english>
  </metric>
  <metric id="1020054" type="quality-rule" originalName="Avoid using delete on arrays" section="sample">
    <english>var myArray = ['a', 'b', 'c', 'd']; 

delete myArray[2]; // Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd'] 
console.log(myArray[2]); // expected value was 'd' but output is undefined</english>
  </metric>
  <metric id="1020054" type="quality-rule" originalName="Avoid using delete on arrays" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020056" type="quality-rule" originalName="Avoid using Javascript Document.all collection" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020056" type="quality-rule" originalName="Avoid using Javascript Document.all collection" section="description">
    <english>Avoid using Javascript Document.all. This is a non-standard way of accessing DOM elements. It's been deprecated from a few browsers. It gives you access to all sub elements on your document.</english>
  </metric>
  <metric id="1020056" type="quality-rule" originalName="Avoid using Javascript Document.all collection" section="name">
    <english>Avoid using Javascript Document.all collection</english>
  </metric>
  <metric id="1020056" type="quality-rule" originalName="Avoid using Javascript Document.all collection" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020056" type="quality-rule" originalName="Avoid using Javascript Document.all collection" section="rationale">
    <english>Using the Document.all collection is slow when retrieving its different objects into HTML, JS files as it collects - and loads in memory - all items.</english>
  </metric>
  <metric id="1020056" type="quality-rule" originalName="Avoid using Javascript Document.all collection" section="remediation">
    <english>Use the official method document.getElementById()</english>
  </metric>
  <metric id="1020056" type="quality-rule" originalName="Avoid using Javascript Document.all collection" section="remediationSample">
    <english>var temp = document.getElementById('foo'); temp.innerText = "Hello"</english>
  </metric>
  <metric id="1020056" type="quality-rule" originalName="Avoid using Javascript Document.all collection" section="sample">
    <english>document.all['foo'].innerText = "Hello"</english>
  </metric>
  <metric id="1020056" type="quality-rule" originalName="Avoid using Javascript Document.all collection" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020058" type="quality-rule" originalName="Avoid using eval()" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020058" type="quality-rule" originalName="Avoid using eval()" section="description">
    <english>The eval() function is used to run text as code. In almost all cases, it should not be necessary to use it. 
Because it allows arbitrary code to be run, it also represents a security problem.</english>
  </metric>
  <metric id="1020058" type="quality-rule" originalName="Avoid using eval()" section="name">
    <english>Avoid using eval() (Javascript)</english>
  </metric>
  <metric id="1020058" type="quality-rule" originalName="Avoid using eval()" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020058" type="quality-rule" originalName="Avoid using eval()" section="rationale">
    <english>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. "eval").</english>
  </metric>
  <metric id="1020058" type="quality-rule" originalName="Avoid using eval()" section="remediation">
    <english>If possible, refactor your code so that it does not need to use eval() at all.</english>
  </metric>
  <metric id="1020058" type="quality-rule" originalName="Avoid using eval()" section="remediationSample">
    <english>var value = object[aProperty]; // compliant</english>
  </metric>
  <metric id="1020058" type="quality-rule" originalName="Avoid using eval()" section="sample">
    <english>var value = eval('object.' + aProperty); // non compliant</english>
  </metric>
  <metric id="1020058" type="quality-rule" originalName="Avoid using eval()" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020060" type="quality-rule" originalName="Avoid using console.log()" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020060" type="quality-rule" originalName="Avoid using console.log()" section="description">
    <english>The purpose of the rule is to detect the usage of console.log function. You can expose sensitive information, slowing down the browser or break workflow of websites if you let log statements in production code.</english>
  </metric>
  <metric id="1020060" type="quality-rule" originalName="Avoid using console.log()" section="name">
    <english>Avoid using console.log()</english>
  </metric>
  <metric id="1020060" type="quality-rule" originalName="Avoid using console.log()" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020060" type="quality-rule" originalName="Avoid using console.log()" section="rationale">
    <english>If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.</english>
  </metric>
  <metric id="1020060" type="quality-rule" originalName="Avoid using console.log()" section="reference">
    <english>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure 
https://www.owasp.org/index.php/Top_10_2017-A6-Sensitive_Data_Exposure</english>
  </metric>
  <metric id="1020060" type="quality-rule" originalName="Avoid using console.log()" section="remediation">
    <english>Do not use console.log in production code</english>
  </metric>
  <metric id="1020060" type="quality-rule" originalName="Avoid using console.log()" section="sample">
    <english>console.log('#someButton was clicked');</english>
  </metric>
  <metric id="1020060" type="quality-rule" originalName="Avoid using console.log()" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020062" type="quality-rule" originalName="Avoid using non thread-safe Javascript singleton pattern" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020062" type="quality-rule" originalName="Avoid using non thread-safe Javascript singleton pattern" section="description">
    <english>Singleton objects should use a thread-safe pattern for creating their shared instance.</english>
  </metric>
  <metric id="1020062" type="quality-rule" originalName="Avoid using non thread-safe Javascript singleton pattern" section="name">
    <english>Avoid using non thread-safe Javascript singleton pattern</english>
  </metric>
  <metric id="1020062" type="quality-rule" originalName="Avoid using non thread-safe Javascript singleton pattern" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020062" type="quality-rule" originalName="Avoid using non thread-safe Javascript singleton pattern" section="rationale">
    <english>If singleton is invoked in a multi-threaded program, you could end up creating multiple instances of the class which will make the application unstable.</english>
  </metric>
  <metric id="1020062" type="quality-rule" originalName="Avoid using non thread-safe Javascript singleton pattern" section="reference">
    <english>OMG CISQ</english>
  </metric>
  <metric id="1020062" type="quality-rule" originalName="Avoid using non thread-safe Javascript singleton pattern" section="remediation">
    <english>Make sure that you have only one instance created in class constructor and it has been frozen to avoid any changes.</english>
  </metric>
  <metric id="1020062" type="quality-rule" originalName="Avoid using non thread-safe Javascript singleton pattern" section="remediationSample">
    <english>class UserStore { 
  constructor(){ 
   if(! UserStore.instance){ 
     UserStore.instance = this; 
   } 

   return UserStore.instance; 
  } 

} 

const instance = new UserStore(); 
Object.freeze(instance); 

export default instance;</english>
  </metric>
  <metric id="1020062" type="quality-rule" originalName="Avoid using non thread-safe Javascript singleton pattern" section="sample">
    <english>class UserStore { 
  constructor(){ 
   if(! UserStore.instance){ 
     UserStore.instance = this; 
   } 

   return UserStore.instance; 
  } 

// VIOLATION, THIS IS NOT ENOUGH 
}</english>
  </metric>
  <metric id="1020062" type="quality-rule" originalName="Avoid using non thread-safe Javascript singleton pattern" section="total">
    <english>Number of Javascript Classes</english>
  </metric>
  <metric id="1020064" type="quality-rule" originalName="Avoid Superclass knowing Subclass (Javascript)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020064" type="quality-rule" originalName="Avoid Superclass knowing Subclass (Javascript)" section="description">
    <english>A Superclass is not allowed to have knowledge of one of its Subclasses. The Superclass has knowledge of the Subclass if the Superclass directly calls a Subclass-method, uses a Subclass-attribute or refers to the name of the Subclass.</english>
  </metric>
  <metric id="1020064" type="quality-rule" originalName="Avoid Superclass knowing Subclass (Javascript)" section="name">
    <english>Avoid Superclass knowing Subclass (Javascript)</english>
  </metric>
  <metric id="1020064" type="quality-rule" originalName="Avoid Superclass knowing Subclass (Javascript)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020064" type="quality-rule" originalName="Avoid Superclass knowing Subclass (Javascript)" section="rationale">
    <english>Referencing down the inheritance tree is against Object-Oriented coding practices. It is a way of having two-way inheritance between class and subclass. This is an indication of poor class design and class inheritance. Such practices increase the complexity of the application.</english>
  </metric>
  <metric id="1020064" type="quality-rule" originalName="Avoid Superclass knowing Subclass (Javascript)" section="reference">
    <english>CISQ rule: ASCRM-RLB-14.</english>
  </metric>
  <metric id="1020064" type="quality-rule" originalName="Avoid Superclass knowing Subclass (Javascript)" section="remediation">
    <english>Review the design of the Class hierarchy</english>
  </metric>
  <metric id="1020064" type="quality-rule" originalName="Avoid Superclass knowing Subclass (Javascript)" section="sample">
    <english>class Base { 
something() 
{ c = new MySubclass() } 
} 

class MySubclass extends Base { 
}</english>
  </metric>
  <metric id="1020064" type="quality-rule" originalName="Avoid Superclass knowing Subclass (Javascript)" section="total">
    <english>Number of Javascript Classes</english>
  </metric>
  <metric id="1020066" type="quality-rule" originalName="Avoid using Javascript Function constructor" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020066" type="quality-rule" originalName="Avoid using Javascript Function constructor" section="description">
    <english>Each time […] the Function constructor is called on a string representing source code, the script engine must start the machinery that converts the source code to executable code. This is usually expensive for performance – easily a hundred times more expensive than a simple function call, for example. 
An exception will be made for Function('return this')(); . It is the best way to retrieve the global in both node and web with or without "use strict".</english>
  </metric>
  <metric id="1020066" type="quality-rule" originalName="Avoid using Javascript Function constructor" section="name">
    <english>Avoid using Javascript Function constructor</english>
  </metric>
  <metric id="1020066" type="quality-rule" originalName="Avoid using Javascript Function constructor" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020066" type="quality-rule" originalName="Avoid using Javascript Function constructor" section="rationale">
    <english>Using the Function constructor to create functions is not recommended since it needs the function body as a string which may prevent some JS engine optimizations and can also cause other problems.</english>
  </metric>
  <metric id="1020066" type="quality-rule" originalName="Avoid using Javascript Function constructor" section="reference">
    <english>https://jsperf.com/function-vs-function/2 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions</english>
  </metric>
  <metric id="1020066" type="quality-rule" originalName="Avoid using Javascript Function constructor" section="remediationSample">
    <english>var f1 = function() { 
 var x = 1; 
 console.log('1'); 
}</english>
  </metric>
  <metric id="1020066" type="quality-rule" originalName="Avoid using Javascript Function constructor" section="sample">
    <english>var f2 = new Function('var x = 1;console.log("2");');</english>
  </metric>
  <metric id="1020066" type="quality-rule" originalName="Avoid using Javascript Function constructor" section="total">
    <english>Number of Javascript artifacts</english>
  </metric>
  <metric id="1020068" type="quality-rule" originalName="Avoid return statement in finally block (Javascript)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020068" type="quality-rule" originalName="Avoid return statement in finally block (Javascript)" section="description">
    <english>Reports all methods that contain an abrupt in a finally block. An abrupt completion of a statement or block occurs when it throws an exception, executes a break or continues to an enclosing statement, or executes a return from the method.</english>
  </metric>
  <metric id="1020068" type="quality-rule" originalName="Avoid return statement in finally block (Javascript)" section="name">
    <english>Avoid return statement in finally block (Javascript)</english>
  </metric>
  <metric id="1020068" type="quality-rule" originalName="Avoid return statement in finally block (Javascript)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020068" type="quality-rule" originalName="Avoid return statement in finally block (Javascript)" section="rationale">
    <english>Care must be taken if completion of a try-catch block occurs as a result of executing a return. If a finally block also returns a value, then that return supersedes any previous return in the try-catch block. Also, if an exception was thrown in the try or catch blocks that was not caught, then execution of a return in the finally block prevents the exception from being thrown to the caller (because it is not possible for the caller to simultaneously evaluate the return and catch the exception). This is also valid for break or continue instructions.</english>
  </metric>
  <metric id="1020068" type="quality-rule" originalName="Avoid return statement in finally block (Javascript)" section="reference">
    <english>OWASP 
http://www.owasp.org/index.php/Return_Inside_Finally_Block 

CWE 
http://cwe.mitre.org/data/definitions/584.html 

CISQ OMG 
ASCMM-MNT-01 - Control Flow Transfer Control Element outside Switch Block</english>
  </metric>
  <metric id="1020068" type="quality-rule" originalName="Avoid return statement in finally block (Javascript)" section="sample">
    <english>let f = 0;
try {
    f = open(filename);
    text = f.read();
    return true;
}
catch(err) {
    logger.error("Cannot read", filename, err);
    return false; // Overwritten by finally
}
finally {
    if (f) {
        f.close();
    }
    return true; 
}</english>
  </metric>
  <metric id="1020068" type="quality-rule" originalName="Avoid return statement in finally block (Javascript)" section="remediationSample">
    <english>let f = 0;
let success = false; // a variable to return the status

try {
    f = open(filename);
    text = f.read();
    success = true;
}
catch(err) {
    logger.error("Cannot read", filename, err);
    success = false;
}
finally {
    if (f) {
        f.close();
    }
    return success; 
}</english>
  </metric>  
  <metric id="1020068" type="quality-rule" originalName="Avoid return statement in finally block (Javascript)" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020070" type="quality-rule" originalName="Avoid hardcoded network resource names (Javascript)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020070" type="quality-rule" originalName="Avoid hardcoded network resource names (Javascript)" section="description">
    <english>This quality rule reports all artifacts that contain hardcoded 
- IP addresses (IPv4 and IPv6)</english>
  </metric>
  <metric id="1020070" type="quality-rule" originalName="Avoid hardcoded network resource names (Javascript)" section="name">
    <english>Avoid hardcoded network resource names (Javascript)</english>
  </metric>
  <metric id="1020070" type="quality-rule" originalName="Avoid hardcoded network resource names (Javascript)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020070" type="quality-rule" originalName="Avoid hardcoded network resource names (Javascript)" section="rationale">
    <english>Built-in remote addresses cause problems when the target is moved. Avoid hardcoded network resources (e.g., IP addresses, URLs, etc.)</english>
  </metric>
  <metric id="1020070" type="quality-rule" originalName="Avoid hardcoded network resource names (Javascript)" section="reference">
    <english>ASCRM 1.0, Automated Source Code Reliability Measure, Object Management Group.</english>
  </metric>
  <metric id="1020070" type="quality-rule" originalName="Avoid hardcoded network resource names (Javascript)" section="sample">
    <english>const config = {
  host: '127.0.0.1', // or  'fe80:0000:0000:0000:0204:61ff:fe9d:f156/0'
  port: 5432
}</english>
  </metric>
  <metric id="1020070" type="quality-rule" originalName="Avoid hardcoded network resource names (Javascript)" section="remediationSample">
    <english>const config = {
  host: process.env.HOST,
  post: process.env.PORT
}</english>
  </metric>  
  <metric id="1020070" type="quality-rule" originalName="Avoid hardcoded network resource names (Javascript)" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020072" type="quality-rule" originalName="Avoid direct access to Database Tables in Javascript" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020072" type="quality-rule" originalName="Avoid direct access to Database Tables in Javascript" section="description">
    <english>Applications should not access directly database Tables</english>
  </metric>
  <metric id="1020072" type="quality-rule" originalName="Avoid direct access to Database Tables in Javascript" section="name">
    <english>Avoid direct access to Database Tables in Javascript</english>
  </metric>
  <metric id="1020072" type="quality-rule" originalName="Avoid direct access to Database Tables in Javascript" section="remediation">
    <english>Create one or several dedicated modules to access database. Encapsulate in these modules the object storing pool of connections</english>
  </metric>  
  <metric id="1020072" type="quality-rule" originalName="Avoid direct access to Database Tables in Javascript" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020072" type="quality-rule" originalName="Avoid direct access to Database Tables in Javascript" section="rationale">
    <english>Direct access to database Table prevents the control at the database level of accesses. E.g.: use of non-optimized query against the database.</english>
  </metric>
  <metric id="1020072" type="quality-rule" originalName="Avoid direct access to Database Tables in Javascript" section="reference">
    <english>CISQ rule: ASCPEM-PRF-9.</english>
  </metric>
  <metric id="1020072" type="quality-rule" originalName="Avoid direct access to Database Tables in Javascript" section="sample">
    <english>tx.executeSql(str, [], function(tx, rs) { callback(result); });</english>
  </metric>
  <metric id="1020072" type="quality-rule" originalName="Avoid direct access to Database Tables in Javascript" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020074" type="quality-rule" originalName="Avoid enabling autocomplete &quot;on&quot; for inputs/forms" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020074" type="quality-rule" originalName="Avoid enabling autocomplete &quot;on&quot; for inputs/forms" section="description">
    <english>Be careful with browsers automatically that can fill the content of input elements of type 'password' when this password has already been provided in the past. 
Beginning with HTML 5 the ability to turn this functionality off exists on a field-by-field basis using the autocomplete attribute.</english>
  </metric>
  <metric id="1020074" type="quality-rule" originalName="Avoid enabling autocomplete &quot;on&quot; for inputs/forms" section="name">
    <english>Avoid enabling autocomplete "on" for inputs/forms</english>
  </metric>
  <metric id="1020074" type="quality-rule" originalName="Avoid enabling autocomplete &quot;on&quot; for inputs/forms" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020074" type="quality-rule" originalName="Avoid enabling autocomplete &quot;on&quot; for inputs/forms" section="rationale">
    <english>An attacker can use the autofill password feature to access login-based web site.</english>
  </metric>
  <metric id="1020074" type="quality-rule" originalName="Avoid enabling autocomplete &quot;on&quot; for inputs/forms" section="reference">
    <english>OMG CISQ 
OWASP A3 Recommendations</english>
  </metric>
  <metric id="1020074" type="quality-rule" originalName="Avoid enabling autocomplete &quot;on&quot; for inputs/forms" section="remediationSample">
    <english>// the whole form 
&lt;form method="post" action="/form" autocomplete="off"&gt; 
[…] 
&lt;/form&gt; 

// for a given field 
&lt;form method="post" action="/form"&gt; 
  […] 
  &lt;div&gt;
    &lt;label for="cc"&gt;Credit card:&lt;/label&gt; 
    &lt;input type="text" id="cc" name="cc" autocomplete="off"&gt; 
  &lt;/div&gt; 
&lt;/form&gt;</english>
  </metric>
  <metric id="1020074" type="quality-rule" originalName="Avoid enabling autocomplete &quot;on&quot; for inputs/forms" section="sample">
    <english>// the whole form 
&lt;form method="post" action="/form" autocomplete="on"&gt; 
[…] 
&lt;/form&gt; 

// for a given field 
&lt;form method="post" action="/form"&gt; 
  […] 
  &lt;div&gt; 
    &lt;label for="cc"&gt;Credit card:&lt;/label&gt; 
    &lt;input type="text" id="cc" name="cc" autocomplete="on"&gt; 
  &lt;/div&gt; 
&lt;/form&gt;</english>
  </metric>
  <metric id="1020074" type="quality-rule" originalName="Avoid enabling autocomplete &quot;on&quot; for inputs/forms" section="total">
    <english>Number of HTML Contents</english>
  </metric>
  <metric id="1020076" type="quality-rule" originalName="Avoid Artifacts with too many parameters (Javascript)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020076" type="quality-rule" originalName="Avoid Artifacts with too many parameters (Javascript)" section="description">
    <english>Avoid artifacts with more than X parameters. The threshold X is a parameter and it can be changed at will.</english>
  </metric>
  <metric id="1020076" type="quality-rule" originalName="Avoid Artifacts with too many parameters (Javascript)" section="name">
    <english>Avoid Artifacts with too many parameters (Javascript)</english>
  </metric>
  <metric id="1020076" type="quality-rule" originalName="Avoid Artifacts with too many parameters (Javascript)" section="remediation">
    <english>Aggregate some parameters into an object</english>
  </metric>  
  <metric id="1020076" type="quality-rule" originalName="Avoid Artifacts with too many parameters (Javascript)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020076" type="quality-rule" originalName="Avoid Artifacts with too many parameters (Javascript)" section="rationale">
    <english>For maintainability and readability reasons, artifacts should not have too many parameters.</english>
  </metric>
  <metric id="1020076" type="quality-rule" originalName="Avoid Artifacts with too many parameters (Javascript)" section="total">
    <english>Number of Javascript functions and methods</english>
  </metric>
  <metric id="1020078" type="quality-rule" originalName="Avoid using setTimeout()" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020078" type="quality-rule" originalName="Avoid using setTimeout()" section="description">
    <english>The setTimeout() function is used to run text as code. In almost all cases, it should not be necessary to use it. Because it allows arbitrary code to be run, it also represents a security problem.</english>
  </metric>
  <metric id="1020078" type="quality-rule" originalName="Avoid using setTimeout()" section="name">
    <english>Avoid using setTimeout()</english>
  </metric>
  <metric id="1020078" type="quality-rule" originalName="Avoid using setTimeout()" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020078" type="quality-rule" originalName="Avoid using setTimeout()" section="rationale">
    <english>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call.</english>
  </metric>
  <metric id="1020078" type="quality-rule" originalName="Avoid using setTimeout()" section="reference">
    <english>http://cwe.mitre.org/data/definitions/95.html 
https://www.owasp.org/index.php/Top_10_2013-A1-Injection 
https://www.w3schools.com/js/js_best_practices.asp</english>
  </metric>
  <metric id="1020078" type="quality-rule" originalName="Avoid using setTimeout()" section="remediation">
    <english>Do not use setTimeout with function passed as a string value.</english>
  </metric>
  <metric id="1020078" type="quality-rule" originalName="Avoid using setTimeout()" section="remediationSample">
    <english>function delayedFunction() { 
alert("This is a delay"); 
} 

// safe - direct call of the function 
window.setTimeout(delayedFunction, 100);</english>
  </metric>
  <metric id="1020078" type="quality-rule" originalName="Avoid using setTimeout()" section="sample">
    <english>function delayedFunction() { 
alert("This is a delay"); 
} 

// unsafe - call to code that will be evaluated before getting the function 
window.setTimeout("delayedFunction", 100);</english>
  </metric>
  <metric id="1020078" type="quality-rule" originalName="Avoid using setTimeout()" section="total">
    <english>Number of Javascript Functions using setTimeout</english>
  </metric>
  <metric id="1020080" type="quality-rule" originalName="Avoid using setInterval()" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020080" type="quality-rule" originalName="Avoid using setInterval()" section="description">
    <english>The setInterval() function is used to run text as code. In almost all cases, it should not be necessary to use it. Because it allows arbitrary code to be run, it also represents a security problem.</english>
  </metric>
  <metric id="1020080" type="quality-rule" originalName="Avoid using setInterval()" section="name">
    <english>Avoid using setInterval()</english>
  </metric>
  <metric id="1020080" type="quality-rule" originalName="Avoid using setInterval()" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020080" type="quality-rule" originalName="Avoid using setInterval()" section="rationale">
    <english>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call.</english>
  </metric>
  <metric id="1020080" type="quality-rule" originalName="Avoid using setInterval()" section="reference">
    <english>http://cwe.mitre.org/data/definitions/95.html 
https://www.owasp.org/index.php/Top_10_2013-A1-Injection 
https://www.w3schools.com/js/js_best_practices.asp</english>
  </metric>
  <metric id="1020080" type="quality-rule" originalName="Avoid using setInterval()" section="remediation">
    <english>If possible, refactor your code so that it does not need to use setInterval() at all.</english>
  </metric>
  <metric id="1020080" type="quality-rule" originalName="Avoid using setInterval()" section="sample">
    <english>setInterval(function(){ alert("Hello"); }, 3000);</english>
  </metric>
  <metric id="1020080" type="quality-rule" originalName="Avoid using setInterval()" section="total">
    <english>Number of Javascript Functions</english>
  </metric>
  <metric id="1020082" type="quality-rule" originalName="Avoid undocumented Functions (Javascript)" section="description">
    <english>Functions should be documented. This reports shows all functions with no comments.</english>
  </metric>
  <metric id="1020082" type="quality-rule" originalName="Avoid undocumented Functions (Javascript)" section="name">
    <english>Avoid undocumented Functions (Javascript)</english>
  </metric>
  <metric id="1020082" type="quality-rule" originalName="Avoid undocumented Functions (Javascript)" section="output">
    <english>This rule lists all undocumented Functions.
It provides following information:
- Function full name</english>
  </metric>
  <metric id="1020082" type="quality-rule" originalName="Avoid undocumented Functions (Javascript)" section="rationale">
    <english>Maintainability of the code is facilitated if there is documentation in the code. This rule will ensure there are comments within the Artifact.</english>
  </metric>
  <metric id="1020082" type="quality-rule" originalName="Avoid undocumented Functions (Javascript)" section="remediation">
    <english>Add comments into functions to explain what is their goal and how they work.</english>
  </metric>
  <metric id="1020082" type="quality-rule" originalName="Avoid undocumented Functions (Javascript)" section="total">
    <english>Number of Functions</english>
  </metric>
  <metric id="1020084" type="quality-rule" originalName="Avoid unreferenced Functions (Javascript/HTML5)" section="description">
    <english>Reports all Functions that are not referenced except main.

Notes: 
- JavaScript eventHandler are not taken in account.
- PL/SQL stored procedures are taken in account.</english>
  </metric>
  <metric id="1020084" type="quality-rule" originalName="Avoid unreferenced Functions (Javascript/HTML5)" section="name">
    <english>Avoid unreferenced Functions (Javascript/HTML5)</english>
  </metric>
  <metric id="1020084" type="quality-rule" originalName="Avoid unreferenced Functions (Javascript/HTML5)" section="output">
    <english>This report lists all unreferenced Functions
It provides the following information:
  Function full name.</english>
  </metric>
  <metric id="1020084" type="quality-rule" originalName="Avoid unreferenced Functions (Javascript/HTML5)" section="rationale">
    <english>Unreferenced code may be the symptom of Dead Code. Dead Code must be avoided as it makes source code less readable and increases the cost of the software maintenance.

Warning:
Unreferenced code can also be the symptoms of missing code (code not included in the source code analysis).</english>
  </metric>
  <metric id="1020084" type="quality-rule" originalName="Avoid unreferenced Functions (Javascript/HTML5)" section="remediation">
    <english>Check if the Function is truly unnecessary.
Remove Functions that are not used.</english>
  </metric>
  <metric id="1020084" type="quality-rule" originalName="Avoid unreferenced Functions (Javascript/HTML5)" section="total">
    <english>Number of functions</english>
  </metric>
  <metric id="1020086" type="quality-rule" originalName="Avoid Functions having a very low Comment/Code ratio (Javascript)" section="associatedValueName">
    <english>Comment/Code ratio</english>
  </metric>
  <metric id="1020086" type="quality-rule" originalName="Avoid Functions having a very low Comment/Code ratio (Javascript)" section="description">
    <english>Functions should have at least a ratio comment/code &gt; X %
The threshold is a parameter and can be changed at will.</english>
  </metric>
  <metric id="1020086" type="quality-rule" originalName="Avoid Functions having a very low Comment/Code ratio (Javascript)" section="name">
    <english>Avoid Functions having a very low Comment/Code ratio (Javascript)</english>
  </metric>
  <metric id="1020086" type="quality-rule" originalName="Avoid Functions having a very low Comment/Code ratio (Javascript)" section="output">
    <english>This report lists all Functions with comment/code ratio lower than X %
It provides the following information:
 Function full name, comment/code ratio</english>
  </metric>
  <metric id="1020086" type="quality-rule" originalName="Avoid Functions having a very low Comment/Code ratio (Javascript)" section="rationale">
    <english>Maintainability of the code is facilitated if there is documentation in the code. This rule will ensure there are comments within the Artifact</english>
  </metric>
  <metric id="1020086" type="quality-rule" originalName="Avoid Functions having a very low Comment/Code ratio (Javascript)" section="remediation">
    <english>Enrich Artifact code with comments</english>
  </metric>
  <metric id="1020086" type="quality-rule" originalName="Avoid Functions having a very low Comment/Code ratio (Javascript)" section="total">
    <english>Number of JavaScript Functions</english>
  </metric>
  <metric id="1020088" type="quality-rule" originalName="Avoid Artifacts with lines longer than X characters (Javascript/HTML5)" section="associatedValueName">
    <english>Number of characters</english>
  </metric>
  <metric id="1020088" type="quality-rule" originalName="Avoid Artifacts with lines longer than X characters (Javascript/HTML5)" section="description">
    <english>Avoid Artifacts with lines longer than X characters.
The number of characters is a parameter and can be changed at will.</english>
  </metric>
  <metric id="1020088" type="quality-rule" originalName="Avoid Artifacts with lines longer than X characters (Javascript/HTML5)" section="name">
    <english>Avoid Artifacts with lines longer than X characters (Javascript/HTML5)</english>
  </metric>
  <metric id="1020088" type="quality-rule" originalName="Avoid Artifacts with lines longer than X characters (Javascript/HTML5)" section="output">
    <english>This report lists all Artifacts with lines longer than X characters.
It provides the following information:
 Artifact full name, number of characters of the longest line.</english>
  </metric>
  <metric id="1020088" type="quality-rule" originalName="Avoid Artifacts with lines longer than X characters (Javascript/HTML5)" section="rationale">
    <english>For better readability and portability (printers, terminals, IDE), Artifacts should not have lines longer than X characters.</english>
  </metric>
  <metric id="1020088" type="quality-rule" originalName="Avoid Artifacts with lines longer than X characters (Javascript/HTML5)" section="remediation">
    <english>Consider splitting the line.</english>
  </metric>
  <metric id="1020088" type="quality-rule" originalName="Avoid Artifacts with lines longer than X characters (Javascript/HTML5)" section="total">
    <english>Number of artifacts</english>
  </metric>
  <metric id="1020090" type="quality-rule" originalName="Avoid Artifacts with High Depth of Code (Javascript)" section="associatedValueName">
    <english>Depth of code</english>
  </metric>
  <metric id="1020090" type="quality-rule" originalName="Avoid Artifacts with High Depth of Code (Javascript)" section="description">
    <english>Depth of Code is measured as the maximum number of nested control statements in an artifact. For example, an 
Artifact that contains an IF statement which contains a While loop which itself contains another IF statement will have a Depth of Code of 3 (at least).
Avoid Artifacts with Depth of Code (DoC) greater than X. The threshold level is a parameter that can be changed at will.</english>
  </metric>
  <metric id="1020090" type="quality-rule" originalName="Avoid Artifacts with High Depth of Code (Javascript)" section="name">
    <english>Avoid Artifacts with High Depth of Code (Javascript)</english>
  </metric>
  <metric id="1020090" type="quality-rule" originalName="Avoid Artifacts with High Depth of Code (Javascript)" section="output">
    <english>This report lists all Artifacts with a Depth of Code greater than X. It provides the following information: Artifact full name, Depth of code</english>
  </metric>
  <metric id="1020090" type="quality-rule" originalName="Avoid Artifacts with High Depth of Code (Javascript)" section="rationale">
    <english>Complex Artifacts are difficult to maintain. Keeping Artifacts small and simple ensures a good readability of the code.</english>
  </metric>
  <metric id="1020090" type="quality-rule" originalName="Avoid Artifacts with High Depth of Code (Javascript)" section="remediation">
    <english>Review the design of the Artifact to reduce the Depth of Code</english>
  </metric>
  <metric id="1020090" type="quality-rule" originalName="Avoid Artifacts with High Depth of Code (Javascript)" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="1020092" type="quality-rule" originalName="Avoid direct definition of JavaScript Functions in a Web page (Javascript/HTML5)" section="associatedValueName">
    <english>Page name</english>
  </metric>
  <metric id="1020092" type="quality-rule" originalName="Avoid direct definition of JavaScript Functions in a Web page (Javascript/HTML5)" section="description">
    <english>All JavaScript Functions should be defined in a JS file and not directly in the Web page (HTM, HTML, JSP).</english>
  </metric>
  <metric id="1020092" type="quality-rule" originalName="Avoid direct definition of JavaScript Functions in a Web page (Javascript/HTML5)" section="name">
    <english>Avoid direct definition of JavaScript Functions in a Web page (Javascript/HTML5)</english>
  </metric>
  <metric id="1020092" type="quality-rule" originalName="Avoid direct definition of JavaScript Functions in a Web page (Javascript/HTML5)" section="output">
    <english>This report lists all JavaScript Functions defined within the Web page and not within a JS file.
It provides the following information:
 - Function name
 - Page name</english>
  </metric>
  <metric id="1020092" type="quality-rule" originalName="Avoid direct definition of JavaScript Functions in a Web page (Javascript/HTML5)" section="rationale">
    <english>Separate behavior from presentation makes the code easier to read and debug, it lets designers and developer work on different files. It allows also to load the JavaScript from the browser one time only (and not each time the file is loaded) if included in the HTML file with the HTML link tag.</english>
  </metric>
  <metric id="1020092" type="quality-rule" originalName="Avoid direct definition of JavaScript Functions in a Web page (Javascript/HTML5)" section="reference">
    <english>Best Practices: Implementing JavaScript for rich internet applications
http://thinkingandmaking.com/entries/63</english>
  </metric>
  <metric id="1020092" type="quality-rule" originalName="Avoid direct definition of JavaScript Functions in a Web page (Javascript/HTML5)" section="total">
    <english>Number of JavaScript Functions</english>
  </metric>
  <metric id="1020094" type="quality-rule" originalName="Avoid creating cookie without setting httpOnly option (Javascript)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020094" type="quality-rule" originalName="Avoid creating cookie without setting httpOnly option (Javascript)" section="description">
    <english>Cross-site scripting attacks often access cookies in an attempt to steal session identifiers or authentication tokens. This is why all major browsers support the HttpOnly cookie property that prevents client-side scripts from accessing the cookie. When HttpOnly is not enabled, attackers may more easily access user cookies.</english>
  </metric>
  <metric id="1020094" type="quality-rule" originalName="Avoid creating cookie without setting httpOnly option (Javascript)" section="name">
    <english>Avoid creating cookie without setting httpOnly option (Javascript)</english>
  </metric>
  <metric id="1020094" type="quality-rule" originalName="Avoid creating cookie without setting httpOnly option (Javascript)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020094" type="quality-rule" originalName="Avoid creating cookie without setting httpOnly option (Javascript)" section="rationale">
    <english>If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.</english>
  </metric>
  <metric id="1020094" type="quality-rule" originalName="Avoid creating cookie without setting httpOnly option (Javascript)" section="reference">
    <english>https://cwe.mitre.org/data/definitions/1004.html 
https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure 
https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure</english>
  </metric>
  <metric id="1020094" type="quality-rule" originalName="Avoid creating cookie without setting httpOnly option (Javascript)" section="remediationSample">
    <english>document.cookie = "tagname=test;HttpOnly";</english>
  </metric>
  <metric id="1020094" type="quality-rule" originalName="Avoid creating cookie without setting httpOnly option (Javascript)" section="sample">
    <english>document.cookie = "tagname=test";</english>
  </metric>
  <metric id="1020094" type="quality-rule" originalName="Avoid creating cookie without setting httpOnly option (Javascript)" section="total">
    <english>Number of JavaScript Functions assigning document.cookie</english>
  </metric>
  <metric id="1020096" type="quality-rule" originalName="Avoid using unsecured cookie (Javascript)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020096" type="quality-rule" originalName="Avoid using unsecured cookie (Javascript)" section="description">
    <english>Cross-site scripting attacks often access cookies in an attempt to steal session identifiers or authentication tokens. This is why all major browsers support the secure cookie property that prevents client-side scripts from accessing the cookie. The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.</english>
  </metric>
  <metric id="1020096" type="quality-rule" originalName="Avoid using unsecured cookie (Javascript)" section="name">
    <english>Avoid using unsecured cookie (Javascript)</english>
  </metric>
  <metric id="1020096" type="quality-rule" originalName="Avoid using unsecured cookie (Javascript)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020096" type="quality-rule" originalName="Avoid using unsecured cookie (Javascript)" section="rationale">
    <english>The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.</english>
  </metric>
  <metric id="1020096" type="quality-rule" originalName="Avoid using unsecured cookie (Javascript)" section="reference">
    <english>https://cwe.mitre.org/data/definitions/614.html 
https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure 
https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure</english>
  </metric>
  <metric id="1020096" type="quality-rule" originalName="Avoid using unsecured cookie (Javascript)" section="remediation">
    <english>Always setting secure option when creating a cookie</english>
  </metric>
  <metric id="1020096" type="quality-rule" originalName="Avoid using unsecured cookie (Javascript)" section="remediationSample">
    <english>document.cookie = "tagname=test;secure";</english>
  </metric>
  <metric id="1020096" type="quality-rule" originalName="Avoid using unsecured cookie (Javascript)" section="sample">
    <english>document.cookie = "tagname=test";</english>
  </metric>
  <metric id="1020096" type="quality-rule" originalName="Avoid using unsecured cookie (Javascript)" section="total">
    <english>Number of JavaScript Functions assigning document.cookie</english>
  </metric>
  <metric id="1020098" type="quality-rule" originalName="Avoid creating cookie with overly broad path (Javascript)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020098" type="quality-rule" originalName="Avoid creating cookie with overly broad path (Javascript)" section="description">
    <english>The cookies with an overly broad path, such as the root context path ("/"), can be accessed by all web applications on the same domain name. A cookie with sensitive data, but with too broad a path, could hence be read and tampered by a less secure and untrusted application.</english>
  </metric>
  <metric id="1020098" type="quality-rule" originalName="Avoid creating cookie with overly broad path (Javascript)" section="name">
    <english>Avoid creating cookie with overly broad path (Javascript)</english>
  </metric>
  <metric id="1020098" type="quality-rule" originalName="Avoid creating cookie with overly broad path (Javascript)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020098" type="quality-rule" originalName="Avoid creating cookie with overly broad path (Javascript)" section="rationale">
    <english>If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.</english>
  </metric>
  <metric id="1020098" type="quality-rule" originalName="Avoid creating cookie with overly broad path (Javascript)" section="reference">
    <english>https://cwe.mitre.org/data/definitions/287.html 
https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure 
https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure</english>
  </metric>
  <metric id="1020098" type="quality-rule" originalName="Avoid creating cookie with overly broad path (Javascript)" section="remediation">
    <english>Do not provide a root path</english>
  </metric>
  <metric id="1020098" type="quality-rule" originalName="Avoid creating cookie with overly broad path (Javascript)" section="remediationSample">
    <english>// specifc path is recommended 
document.cookie = "name=test; path=/admin";</english>
  </metric>
  <metric id="1020098" type="quality-rule" originalName="Avoid creating cookie with overly broad path (Javascript)" section="sample">
    <english>// root path is not recommended 
document.cookie = "name=test; path=/";</english>
  </metric>
  <metric id="1020098" type="quality-rule" originalName="Avoid creating cookie with overly broad path (Javascript)" section="total">
    <english>Number of JavaScript Functions assigning document.cookie</english>
  </metric>
  <metric id="1020100" type="quality-rule" originalName="Avoid having cookie with an overly broad domain (Javascript)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020100" type="quality-rule" originalName="Avoid having cookie with an overly broad domain (Javascript)" section="description">
    <english>The cookies with an overly broad domain can be accessed by all web applications deployed on this domain and its sub-domains. A cookie with sensitive data, but with too broad a domain, could hence be read and tampered with by a less secure and untrusted application.</english>
  </metric>
  <metric id="1020100" type="quality-rule" originalName="Avoid having cookie with an overly broad domain (Javascript)" section="name">
    <english>Avoid having cookie with an overly broad domain (Javascript)</english>
  </metric>
  <metric id="1020100" type="quality-rule" originalName="Avoid having cookie with an overly broad domain (Javascript)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020100" type="quality-rule" originalName="Avoid having cookie with an overly broad domain (Javascript)" section="rationale">
    <english>If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.</english>
  </metric>
  <metric id="1020100" type="quality-rule" originalName="Avoid having cookie with an overly broad domain (Javascript)" section="reference">
    <english>https://cwe.mitre.org/data/definitions/287.html 
https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure 
https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure</english>
  </metric>
  <metric id="1020100" type="quality-rule" originalName="Avoid having cookie with an overly broad domain (Javascript)" section="remediation">
    <english>Do not provide a domain with wildcard access</english>
  </metric>
  <metric id="1020100" type="quality-rule" originalName="Avoid having cookie with an overly broad domain (Javascript)" section="remediationSample">
    <english>// explicit secure.example.com domain is recommended 
document.cookie = "name=test; domain=secure.example.com";</english>
  </metric>
  <metric id="1020100" type="quality-rule" originalName="Avoid having cookie with an overly broad domain (Javascript)" section="sample">
    <english>// .example.com is not recommended 
document.cookie = "name=test; domain=.example.com";</english>
  </metric>
  <metric id="1020100" type="quality-rule" originalName="Avoid having cookie with an overly broad domain (Javascript)" section="total">
    <english>Number of JavaScript Functions assigning document.cookie</english>
  </metric>
  <metric id="1020102" type="quality-rule" originalName="Always use JSON.parse &amp; JSON.stringify with try/catch block (Javascript)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020102" type="quality-rule" originalName="Always use JSON.parse &amp; JSON.stringify with try/catch block (Javascript)" section="description">
    <english>As JSON.parse and JSON.stringify will happen synchronously, we can surround it with a try-catch block. Please note, that you can only do this with synchronous codeblocks, but it won't work for callbacks.</english>
  </metric>
  <metric id="1020102" type="quality-rule" originalName="Always use JSON.parse &amp; JSON.stringify with try/catch block (Javascript)" section="name">
    <english>Always use JSON.parse &amp; JSON.stringify with try/catch block (Javascript)</english>
  </metric>
  <metric id="1020102" type="quality-rule" originalName="Always use JSON.parse &amp; JSON.stringify with try/catch block (Javascript)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020102" type="quality-rule" originalName="Always use JSON.parse &amp; JSON.stringify with try/catch block (Javascript)" section="rationale">
    <english>Ensure that each web service callback is going to be properly checked in order to make sure you will not miss any problem that occurred in your application and you will give the information to the user.</english>
  </metric>
  <metric id="1020102" type="quality-rule" originalName="Always use JSON.parse &amp; JSON.stringify with try/catch block (Javascript)" section="reference">
    <english>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse</english>
  </metric>
  <metric id="1020102" type="quality-rule" originalName="Always use JSON.parse &amp; JSON.stringify with try/catch block (Javascript)" section="remediation">
    <english>Always use JSON.parse in try/catch block</english>
  </metric>
  <metric id="1020102" type="quality-rule" originalName="Always use JSON.parse &amp; JSON.stringify with try/catch block (Javascript)" section="remediationSample">
    <english>function readJSON(filePath, callback) {

  fs.readFile(filePath, function(err, data) {

    var parsedJson;

    // Handle error
    if (err) {
      return callback(err);
    }

    // Parse JSON
    try {
      parsedJson = JSON.parse(data);
    } catch (exception) {
      return callback(exception);
    }

    // Everything is ok
    return callback(null, parsedJson);
  });
}</english>
  </metric>
  <metric id="1020102" type="quality-rule" originalName="Always use JSON.parse &amp; JSON.stringify with try/catch block (Javascript)" section="sample">
    <english>function readJSON(filePath, callback) {

  fs.readFile(filePath, function(err, data) {

    var parsedJson;

    // Handle error
    if (err) {
      return callback(err);
    }

    // Parse JSON
    parsedJson = JSON.parse(data);

    return (parsedJson !== 'undefined');
  });
}</english>
  </metric>
  <metric id="1020102" type="quality-rule" originalName="Always use JSON.parse &amp; JSON.stringify with try/catch block (Javascript)" section="total">
    <english>Number of javascript function using JSON.parse or JSON.stringify</english>
  </metric>

  <metric id="1020104" type="quality-rule" originalName="Avoid hardcoded passwords (Javascript)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="1020104" type="quality-rule" originalName="Avoid hardcoded passwords (Javascript)" section="description">
    <english>This rule identifies variable assignments and function calls and interfaces that include a hardcoded password. This identification is based on password-related semantics.</english>
  </metric>
  <metric id="1020104" type="quality-rule" originalName="Avoid hardcoded passwords (Javascript)" section="name">
    <english>Avoid hardcoded passwords (Javascript)</english>
  </metric>
  <metric id="1020104" type="quality-rule" originalName="Avoid hardcoded passwords (Javascript)" section="rationale">
    <english>Hardcoded passwords in source code should be avoided because they can potentially be retrieved through code inspection and inverse engineering by attackers. Such an attack is difficult to be discovered, and eventually the problem can only be solved at software level thus compromising the usability of the application in the meantime.</english>
  </metric>
  <metric id="1020104" type="quality-rule" originalName="Avoid hardcoded passwords (Javascript)" section="reference">
    <english>https://cwe.mitre.org/data/definitions/259.html</english>
  </metric>
  <metric id="1020104" type="quality-rule" originalName="Avoid hardcoded passwords (Javascript)" section="remediation">
    <english>A non-secure starting patch would be to apply obfuscation techniques to the hardcoded password to prevent reverse-engineering of the generated Python (byte)code. This could be done by hashing the password or constructing the password string in many different places by non-trivial methods. Sensitive data such as passwords should be in principle encrypted and saved in separate files or in a database with restricted user access.
Finally one should consider removing backdoors and delegate the password ownership to the end-user.</english>
  </metric>
  <metric id="1020104" type="quality-rule" originalName="Avoid hardcoded passwords (Javascript)" section="remediationSample">
    <english>const password = SafeAccessToPasswordNotReturningAConstValue();

// OR

let mypwd;
mypwd = SafeAccessToPasswordNotReturningAConstValue();

// OR

login({"password":SafeAccessToPasswordNotReturningAConstValue()})</english>
  </metric>
  <metric id="1020104" type="quality-rule" originalName="Avoid hardcoded passwords (Javascript)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="1020104" type="quality-rule" originalName="Avoid hardcoded passwords (Javascript)" section="sample">
    <english>const password = "WinterIsComing";

// OR

let mypwd;
mypwd = "WinterIsComing";

// OR

login({"password":"WinterIsComing"})</english>
  </metric>
  <metric id="1020104" type="quality-rule" originalName="Avoid hardcoded passwords (Javascript)" section="total">
    <english>Number of Javascript artifacts</english>
  </metric>
</root>