{"version":3,"file":"text.min.js","sources":["text.js"],"names":["define","module","text","fs","progIds","xmlRegExp","bodyRegExp","hasLocation","location","href","defaultProtocol","protocol","replace","defaultHostName","hostname","defaultPort","port","undefined","buildMap","masterConfig","config","version","strip","content","matches","match","jsEscape","createXhr","xhr","i","progId","XMLHttpRequest","ActiveXObject","e","parseName","name","index","indexOf","modName","substring","ext","length","moduleName","xdRegExp","useXhr","url","uProtocol","uHostName","uPort","exec","split","toLowerCase","finishLoad","onLoad","isBuild","load","req","inlineText","parsed","nonStripName","toUrl","get","err","error","write","pluginName","hasOwnProperty","asModule","writeFile","fileName","textWrite","contents","env","process","versions","node","require","nodeRequire","callback","file","readFileSync","errback","open","onXhr","onreadystatechange","status","readyState","Error","responseText","send","Packages","java","stringBuffer","line","encoding","io","File","lineSeparator","lang","System","getProperty","input","BufferedReader","InputStreamReader","FileInputStream","StringBuffer","readLine","charAt","append","String","toString","close"],"mappings":"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","sourcesContent":["/**\n * @license RequireJS text 2.0.3 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/text for details\n */\n/*jslint regexp: true */\n/*global require: false, XMLHttpRequest: false, ActiveXObject: false,\n  define: false, window: false, process: false, Packages: false,\n  java: false, location: false */\n\ndefine(['module'], function (module) {\n    'use strict';\n\n    var text, fs,\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\n        hasLocation = typeof location !== 'undefined' && location.href,\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\n        defaultHostName = hasLocation && location.hostname,\n        defaultPort = hasLocation && (location.port || undefined),\n        buildMap = [],\n        masterConfig = (module.config && module.config()) || {};\n\n    text = {\n        version: '2.0.3',\n\n        strip: function (content) {\n            //Strips <?xml ...?> declarations so that external SVG and XML\n            //documents can be added to a document without worry. Also, if the string\n            //is an HTML document, only the part inside the body tag is returned.\n            if (content) {\n                content = content.replace(xmlRegExp, \"\");\n                var matches = content.match(bodyRegExp);\n                if (matches) {\n                    content = matches[1];\n                }\n            } else {\n                content = \"\";\n            }\n            return content;\n        },\n\n        jsEscape: function (content) {\n            return content.replace(/(['\\\\])/g, '\\\\$1')\n                .replace(/[\\f]/g, \"\\\\f\")\n                .replace(/[\\b]/g, \"\\\\b\")\n                .replace(/[\\n]/g, \"\\\\n\")\n                .replace(/[\\t]/g, \"\\\\t\")\n                .replace(/[\\r]/g, \"\\\\r\")\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\n        },\n\n        createXhr: masterConfig.createXhr || function () {\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\n            var xhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                return new XMLHttpRequest();\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        xhr = new ActiveXObject(progId);\n                    } catch (e) {}\n\n                    if (xhr) {\n                        progIds = [progId];  // so faster next time\n                        break;\n                    }\n                }\n            }\n\n            return xhr;\n        },\n\n        /**\n         * Parses a resource name into its component parts. Resource names\n         * look like: module/name.ext!strip, where the !strip part is\n         * optional.\n         * @param {String} name the resource name\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\n         * where strip is a boolean.\n         */\n        parseName: function (name) {\n            var strip = false, index = name.indexOf(\".\"),\n                modName = name.substring(0, index),\n                ext = name.substring(index + 1, name.length);\n\n            index = ext.indexOf(\"!\");\n            if (index !== -1) {\n                //Pull off the strip arg.\n                strip = ext.substring(index + 1, ext.length);\n                strip = strip === \"strip\";\n                ext = ext.substring(0, index);\n            }\n\n            return {\n                moduleName: modName,\n                ext: ext,\n                strip: strip\n            };\n        },\n\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\n\n        /**\n         * Is an URL on another domain. Only works for browser use, returns\n         * false in non-browser environments. Only used to know if an\n         * optimized .js version of a text resource should be loaded\n         * instead.\n         * @param {String} url\n         * @returns Boolean\n         */\n        useXhr: function (url, protocol, hostname, port) {\n            var uProtocol, uHostName, uPort,\n                match = text.xdRegExp.exec(url);\n            if (!match) {\n                return true;\n            }\n            uProtocol = match[2];\n            uHostName = match[3];\n\n            uHostName = uHostName.split(':');\n            uPort = uHostName[1];\n            uHostName = uHostName[0];\n\n            return (!uProtocol || uProtocol === protocol) &&\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\n                   ((!uPort && !uHostName) || uPort === port);\n        },\n\n        finishLoad: function (name, strip, content, onLoad) {\n            content = strip ? text.strip(content) : content;\n            if (masterConfig.isBuild) {\n                buildMap[name] = content;\n            }\n            onLoad(content);\n        },\n\n        load: function (name, req, onLoad, config) {\n            //Name has format: some.module.filext!strip\n            //The strip part is optional.\n            //if strip is present, then that means only get the string contents\n            //inside a body tag in an HTML string. For XML/SVG content it means\n            //removing the <?xml ...?> declarations so the content can be inserted\n            //into the current doc without problems.\n\n            // Do not bother with the work if a build and text will\n            // not be inlined.\n            if (config.isBuild && !config.inlineText) {\n                onLoad();\n                return;\n            }\n\n            masterConfig.isBuild = config.isBuild;\n\n            var parsed = text.parseName(name),\n                nonStripName = parsed.moduleName + '.' + parsed.ext,\n                url = req.toUrl(nonStripName),\n                useXhr = (masterConfig.useXhr) ||\n                         text.useXhr;\n\n            //Load the text. Use XHR if possible and in a browser.\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\n                text.get(url, function (content) {\n                    text.finishLoad(name, parsed.strip, content, onLoad);\n                }, function (err) {\n                    if (onLoad.error) {\n                        onLoad.error(err);\n                    }\n                });\n            } else {\n                //Need to fetch the resource across domains. Assume\n                //the resource has been optimized into a JS module. Fetch\n                //by the module name + extension, but do not include the\n                //!strip part to avoid file system issues.\n                req([nonStripName], function (content) {\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\n                                    parsed.strip, content, onLoad);\n                });\n            }\n        },\n\n        write: function (pluginName, moduleName, write, config) {\n            if (buildMap.hasOwnProperty(moduleName)) {\n                var content = text.jsEscape(buildMap[moduleName]);\n                write.asModule(pluginName + \"!\" + moduleName,\n                               \"define(function () { return '\" +\n                                   content +\n                               \"';});\\n\");\n            }\n        },\n\n        writeFile: function (pluginName, moduleName, req, write, config) {\n            var parsed = text.parseName(moduleName),\n                nonStripName = parsed.moduleName + '.' + parsed.ext,\n                //Use a '.js' file name so that it indicates it is a\n                //script that can be loaded across domains.\n                fileName = req.toUrl(parsed.moduleName + '.' +\n                                     parsed.ext) + '.js';\n\n            //Leverage own load() method to load plugin value, but only\n            //write out values that do not have the strip argument,\n            //to avoid any potential issues with ! in file names.\n            text.load(nonStripName, req, function (value) {\n                //Use own write() method to construct full module value.\n                //But need to create shell that translates writeFile's\n                //write() to the right interface.\n                var textWrite = function (contents) {\n                    return write(fileName, contents);\n                };\n                textWrite.asModule = function (moduleName, contents) {\n                    return write.asModule(moduleName, fileName, contents);\n                };\n\n                text.write(pluginName, nonStripName, textWrite, config);\n            }, config);\n        }\n    };\n\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\n            typeof process !== \"undefined\" &&\n            process.versions &&\n            !!process.versions.node)) {\n        //Using special require.nodeRequire, something added by r.js.\n        fs = require.nodeRequire('fs');\n\n        text.get = function (url, callback) {\n            var file = fs.readFileSync(url, 'utf8');\n            //Remove BOM (Byte Mark Order) from utf8 files if it is there.\n            if (file.indexOf('\\uFEFF') === 0) {\n                file = file.substring(1);\n            }\n            callback(file);\n        };\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\n            text.createXhr())) {\n        text.get = function (url, callback, errback) {\n            var xhr = text.createXhr();\n            xhr.open('GET', url, true);\n\n            //Allow overrides specified in config\n            if (masterConfig.onXhr) {\n                masterConfig.onXhr(xhr, url);\n            }\n\n            xhr.onreadystatechange = function (evt) {\n                var status, err;\n                //Do not explicitly handle errors, those should be\n                //visible via console output in the browser.\n                if (xhr.readyState === 4) {\n                    status = xhr.status;\n                    if (status > 399 && status < 600) {\n                        //An http 4xx or 5xx error. Signal an error.\n                        err = new Error(url + ' HTTP status: ' + status);\n                        err.xhr = xhr;\n                        errback(err);\n                    } else {\n                        callback(xhr.responseText);\n                    }\n                }\n            };\n            xhr.send(null);\n        };\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\n        //Why Java, why is this so awkward?\n        text.get = function (url, callback) {\n            var stringBuffer, line,\n                encoding = \"utf-8\",\n                file = new java.io.File(url),\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\n                content = '';\n            try {\n                stringBuffer = new java.lang.StringBuffer();\n                line = input.readLine();\n\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\n                // http://www.unicode.org/faq/utf_bom.html\n\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\n                    // Eat the BOM, since we've already found the encoding on this file,\n                    // and we plan to concatenating this buffer with others; the BOM should\n                    // only appear at the top of a file.\n                    line = line.substring(1);\n                }\n\n                stringBuffer.append(line);\n\n                while ((line = input.readLine()) !== null) {\n                    stringBuffer.append(lineSeparator);\n                    stringBuffer.append(line);\n                }\n                //Make sure we return a JavaScript string and not a Java string.\n                content = String(stringBuffer.toString()); //String\n            } finally {\n                input.close();\n            }\n            callback(content);\n        };\n    }\n\n    return text;\n});\n"]}