{"version":3,"file":"jsonlint.min.js","sources":["jsonlint.js"],"names":["jsonlint","parser","trace","yy","symbols_","error","JSONString","STRING","JSONNumber","NUMBER","JSONNullLiteral","NULL","JSONBooleanLiteral","TRUE","FALSE","JSONText","JSONValue","EOF","JSONObject","JSONArray","{","}","JSONMemberList","JSONMember",":",",","[","]","JSONElementList","$accept","$end","terminals_",2,4,6,8,10,11,14,17,18,21,22,23,24,"productions_","performAction","yytext","yyleng","yylineno","yystate","$$","$0","length","this","$","replace","Number","push","table",3,5,7,9,12,13,15,16,1,19,20,25,"defaultActions","parseError","str","Error","parse","input","popStack","n","stack","vstack","lstack","lex","token","self","lexer","recovering","TERROR","setInput","yylloc","yyloc","symbol","preErrorSymbol","state","action","r","p","len","newState","expected","yyval","errStr","showPosition","join","text","match","line","loc","toString","Array","_$","first_line","last_line","first_column","last_column","call","slice","hash","_input","_more","_less","done","matched","conditionStack","ch","lines","unput","more","less","pastInput","past","substr","upcomingInput","next","pre","c","tempMatch","index","rules","_currentRules","i","options","flex","begin","condition","popState","pop","conditions","topState","pushState","yy_","$avoiding_name_collisions","YY_START","INITIAL","inclusive","require","exports","apply","arguments","main","args","process","source","readFileSync","cwd","path","read","charset","module","argv"],"mappings":"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","sourcesContent":["/* Jison generated parser */\nvar jsonlint = (function(){\n    var parser = {trace: function trace() { },\n        yy: {},\n        symbols_: {\"error\":2,\"JSONString\":3,\"STRING\":4,\"JSONNumber\":5,\"NUMBER\":6,\"JSONNullLiteral\":7,\"NULL\":8,\"JSONBooleanLiteral\":9,\"TRUE\":10,\"FALSE\":11,\"JSONText\":12,\"JSONValue\":13,\"EOF\":14,\"JSONObject\":15,\"JSONArray\":16,\"{\":17,\"}\":18,\"JSONMemberList\":19,\"JSONMember\":20,\":\":21,\",\":22,\"[\":23,\"]\":24,\"JSONElementList\":25,\"$accept\":0,\"$end\":1},\n        terminals_: {2:\"error\",4:\"STRING\",6:\"NUMBER\",8:\"NULL\",10:\"TRUE\",11:\"FALSE\",14:\"EOF\",17:\"{\",18:\"}\",21:\":\",22:\",\",23:\"[\",24:\"]\"},\n        productions_: [0,[3,1],[5,1],[7,1],[9,1],[9,1],[12,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[15,2],[15,3],[20,3],[19,1],[19,3],[16,2],[16,3],[25,1],[25,3]],\n        performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {\n\n            var $0 = $$.length - 1;\n            switch (yystate) {\n                case 1: // replace escaped characters with actual character\n                    this.$ = yytext.replace(/\\\\(\\\\|\")/g, \"$\"+\"1\")\n                        .replace(/\\\\n/g,'\\n')\n                        .replace(/\\\\r/g,'\\r')\n                        .replace(/\\\\t/g,'\\t')\n                        .replace(/\\\\v/g,'\\v')\n                        .replace(/\\\\f/g,'\\f')\n                        .replace(/\\\\b/g,'\\b');\n\n                    break;\n                case 2:this.$ = Number(yytext);\n                    break;\n                case 3:this.$ = null;\n                    break;\n                case 4:this.$ = true;\n                    break;\n                case 5:this.$ = false;\n                    break;\n                case 6:return this.$ = $$[$0-1];\n                    break;\n                case 13:this.$ = {};\n                    break;\n                case 14:this.$ = $$[$0-1];\n                    break;\n                case 15:this.$ = [$$[$0-2], $$[$0]];\n                    break;\n                case 16:this.$ = {}; this.$[$$[$0][0]] = $$[$0][1];\n                    break;\n                case 17:this.$ = $$[$0-2]; $$[$0-2][$$[$0][0]] = $$[$0][1];\n                    break;\n                case 18:this.$ = [];\n                    break;\n                case 19:this.$ = $$[$0-1];\n                    break;\n                case 20:this.$ = [$$[$0]];\n                    break;\n                case 21:this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);\n                    break;\n            }\n        },\n        table: [{3:5,4:[1,12],5:6,6:[1,13],7:3,8:[1,9],9:4,10:[1,10],11:[1,11],12:1,13:2,15:7,16:8,17:[1,14],23:[1,15]},{1:[3]},{14:[1,16]},{14:[2,7],18:[2,7],22:[2,7],24:[2,7]},{14:[2,8],18:[2,8],22:[2,8],24:[2,8]},{14:[2,9],18:[2,9],22:[2,9],24:[2,9]},{14:[2,10],18:[2,10],22:[2,10],24:[2,10]},{14:[2,11],18:[2,11],22:[2,11],24:[2,11]},{14:[2,12],18:[2,12],22:[2,12],24:[2,12]},{14:[2,3],18:[2,3],22:[2,3],24:[2,3]},{14:[2,4],18:[2,4],22:[2,4],24:[2,4]},{14:[2,5],18:[2,5],22:[2,5],24:[2,5]},{14:[2,1],18:[2,1],21:[2,1],22:[2,1],24:[2,1]},{14:[2,2],18:[2,2],22:[2,2],24:[2,2]},{3:20,4:[1,12],18:[1,17],19:18,20:19},{3:5,4:[1,12],5:6,6:[1,13],7:3,8:[1,9],9:4,10:[1,10],11:[1,11],13:23,15:7,16:8,17:[1,14],23:[1,15],24:[1,21],25:22},{1:[2,6]},{14:[2,13],18:[2,13],22:[2,13],24:[2,13]},{18:[1,24],22:[1,25]},{18:[2,16],22:[2,16]},{21:[1,26]},{14:[2,18],18:[2,18],22:[2,18],24:[2,18]},{22:[1,28],24:[1,27]},{22:[2,20],24:[2,20]},{14:[2,14],18:[2,14],22:[2,14],24:[2,14]},{3:20,4:[1,12],20:29},{3:5,4:[1,12],5:6,6:[1,13],7:3,8:[1,9],9:4,10:[1,10],11:[1,11],13:30,15:7,16:8,17:[1,14],23:[1,15]},{14:[2,19],18:[2,19],22:[2,19],24:[2,19]},{3:5,4:[1,12],5:6,6:[1,13],7:3,8:[1,9],9:4,10:[1,10],11:[1,11],13:31,15:7,16:8,17:[1,14],23:[1,15]},{18:[2,17],22:[2,17]},{18:[2,15],22:[2,15]},{22:[2,21],24:[2,21]}],\n        defaultActions: {16:[2,6]},\n        parseError: function parseError(str, hash) {\n            throw new Error(str);\n        },\n        parse: function parse(input) {\n            var self = this,\n                stack = [0],\n                vstack = [null], // semantic value stack\n                lstack = [], // location stack\n                table = this.table,\n                yytext = '',\n                yylineno = 0,\n                yyleng = 0,\n                recovering = 0,\n                TERROR = 2,\n                EOF = 1;\n\n            //this.reductionCount = this.shiftCount = 0;\n\n            this.lexer.setInput(input);\n            this.lexer.yy = this.yy;\n            this.yy.lexer = this.lexer;\n            if (typeof this.lexer.yylloc == 'undefined')\n                this.lexer.yylloc = {};\n            var yyloc = this.lexer.yylloc;\n            lstack.push(yyloc);\n\n            if (typeof this.yy.parseError === 'function')\n                this.parseError = this.yy.parseError;\n\n            function popStack (n) {\n                stack.length = stack.length - 2*n;\n                vstack.length = vstack.length - n;\n                lstack.length = lstack.length - n;\n            }\n\n            function lex() {\n                var token;\n                token = self.lexer.lex() || 1; // $end = 1\n                // if token isn't its numeric value, convert\n                if (typeof token !== 'number') {\n                    token = self.symbols_[token] || token;\n                }\n                return token;\n            }\n\n            var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;\n            while (true) {\n                // retreive state number from top of stack\n                state = stack[stack.length-1];\n\n                // use default actions if available\n                if (this.defaultActions[state]) {\n                    action = this.defaultActions[state];\n                } else {\n                    if (symbol == null)\n                        symbol = lex();\n                    // read action for current state and first input\n                    action = table[state] && table[state][symbol];\n                }\n\n                // handle parse error\n                _handle_error:\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n\n                        if (!recovering) {\n                            // Report error\n                            expected = [];\n                            for (p in table[state]) if (this.terminals_[p] && p > 2) {\n                                expected.push(\"'\"+this.terminals_[p]+\"'\");\n                            }\n                            var errStr = '';\n                            if (this.lexer.showPosition) {\n                                errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+this.lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + this.terminals_[symbol]+ \"'\";\n                            } else {\n                                errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                    (symbol == 1 /*EOF*/ ? \"end of input\" :\n                                        (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                            }\n                            this.parseError(errStr,\n                                {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});\n                        }\n\n                        // just recovered from another error\n                        if (recovering == 3) {\n                            if (symbol == EOF) {\n                                throw new Error(errStr || 'Parsing halted.');\n                            }\n\n                            // discard current lookahead and grab another\n                            yyleng = this.lexer.yyleng;\n                            yytext = this.lexer.yytext;\n                            yylineno = this.lexer.yylineno;\n                            yyloc = this.lexer.yylloc;\n                            symbol = lex();\n                        }\n\n                        // try to recover from error\n                        while (1) {\n                            // check for error recovery rule in this state\n                            if ((TERROR.toString()) in table[state]) {\n                                break;\n                            }\n                            if (state == 0) {\n                                throw new Error(errStr || 'Parsing halted.');\n                            }\n                            popStack(1);\n                            state = stack[stack.length-1];\n                        }\n\n                        preErrorSymbol = symbol; // save the lookahead token\n                        symbol = TERROR;         // insert generic error symbol as new lookahead\n                        state = stack[stack.length-1];\n                        action = table[state] && table[state][TERROR];\n                        recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n                    }\n\n                // this shouldn't happen, unless resolve defaults are off\n                if (action[0] instanceof Array && action.length > 1) {\n                    throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n                }\n\n                switch (action[0]) {\n\n                    case 1: // shift\n                        //this.shiftCount++;\n\n                        stack.push(symbol);\n                        vstack.push(this.lexer.yytext);\n                        lstack.push(this.lexer.yylloc);\n                        stack.push(action[1]); // push state\n                        symbol = null;\n                        if (!preErrorSymbol) { // normal execution/no error\n                            yyleng = this.lexer.yyleng;\n                            yytext = this.lexer.yytext;\n                            yylineno = this.lexer.yylineno;\n                            yyloc = this.lexer.yylloc;\n                            if (recovering > 0)\n                                recovering--;\n                        } else { // error just occurred, resume old lookahead f/ before error\n                            symbol = preErrorSymbol;\n                            preErrorSymbol = null;\n                        }\n                        break;\n\n                    case 2: // reduce\n                        //this.reductionCount++;\n\n                        len = this.productions_[action[1]][1];\n\n                        // perform semantic action\n                        yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                        // default location, uses first token for firsts, last for lasts\n                        yyval._$ = {\n                            first_line: lstack[lstack.length-(len||1)].first_line,\n                            last_line: lstack[lstack.length-1].last_line,\n                            first_column: lstack[lstack.length-(len||1)].first_column,\n                            last_column: lstack[lstack.length-1].last_column\n                        };\n                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n\n                        if (typeof r !== 'undefined') {\n                            return r;\n                        }\n\n                        // pop off stack\n                        if (len) {\n                            stack = stack.slice(0,-1*len*2);\n                            vstack = vstack.slice(0, -1*len);\n                            lstack = lstack.slice(0, -1*len);\n                        }\n\n                        stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                        vstack.push(yyval.$);\n                        lstack.push(yyval._$);\n                        // goto new state = table[STATE][NONTERMINAL]\n                        newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                        stack.push(newState);\n                        break;\n\n                    case 3: // accept\n                        return true;\n                }\n\n            }\n\n            return true;\n        }};\n    /* Jison generated lexer */\n    var lexer = (function(){\n        var lexer = ({EOF:1,\n            parseError:function parseError(str, hash) {\n                if (this.yy.parseError) {\n                    this.yy.parseError(str, hash);\n                } else {\n                    throw new Error(str);\n                }\n            },\n            setInput:function (input) {\n                this._input = input;\n                this._more = this._less = this.done = false;\n                this.yylineno = this.yyleng = 0;\n                this.yytext = this.matched = this.match = '';\n                this.conditionStack = ['INITIAL'];\n                this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};\n                return this;\n            },\n            input:function () {\n                var ch = this._input[0];\n                this.yytext+=ch;\n                this.yyleng++;\n                this.match+=ch;\n                this.matched+=ch;\n                var lines = ch.match(/\\n/);\n                if (lines) this.yylineno++;\n                this._input = this._input.slice(1);\n                return ch;\n            },\n            unput:function (ch) {\n                this._input = ch + this._input;\n                return this;\n            },\n            more:function () {\n                this._more = true;\n                return this;\n            },\n            less:function (n) {\n                this._input = this.match.slice(n) + this._input;\n            },\n            pastInput:function () {\n                var past = this.matched.substr(0, this.matched.length - this.match.length);\n                return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n            },\n            upcomingInput:function () {\n                var next = this.match;\n                if (next.length < 20) {\n                    next += this._input.substr(0, 20-next.length);\n                }\n                return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\\n/g, \"\");\n            },\n            showPosition:function () {\n                var pre = this.pastInput();\n                var c = new Array(pre.length + 1).join(\"-\");\n                return pre + this.upcomingInput() + \"\\n\" + c+\"^\";\n            },\n            next:function () {\n                if (this.done) {\n                    return this.EOF;\n                }\n                if (!this._input) this.done = true;\n\n                var token,\n                    match,\n                    tempMatch,\n                    index,\n                    col,\n                    lines;\n                if (!this._more) {\n                    this.yytext = '';\n                    this.match = '';\n                }\n                var rules = this._currentRules();\n                for (var i=0;i < rules.length; i++) {\n                    tempMatch = this._input.match(this.rules[rules[i]]);\n                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                        match = tempMatch;\n                        index = i;\n                        if (!this.options.flex) break;\n                    }\n                }\n                if (match) {\n                    lines = match[0].match(/\\n.*/g);\n                    if (lines) this.yylineno += lines.length;\n                    this.yylloc = {first_line: this.yylloc.last_line,\n                        last_line: this.yylineno+1,\n                        first_column: this.yylloc.last_column,\n                        last_column: lines ? lines[lines.length-1].length-1 : this.yylloc.last_column + match[0].length}\n                    this.yytext += match[0];\n                    this.match += match[0];\n                    this.yyleng = this.yytext.length;\n                    this._more = false;\n                    this._input = this._input.slice(match[0].length);\n                    this.matched += match[0];\n                    token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);\n                    if (this.done && this._input) this.done = false;\n                    if (token) return token;\n                    else return;\n                }\n                if (this._input === \"\") {\n                    return this.EOF;\n                } else {\n                    this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\\n'+this.showPosition(),\n                        {text: \"\", token: null, line: this.yylineno});\n                }\n            },\n            lex:function lex() {\n                var r = this.next();\n                if (typeof r !== 'undefined') {\n                    return r;\n                } else {\n                    return this.lex();\n                }\n            },\n            begin:function begin(condition) {\n                this.conditionStack.push(condition);\n            },\n            popState:function popState() {\n                return this.conditionStack.pop();\n            },\n            _currentRules:function _currentRules() {\n                return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;\n            },\n            topState:function () {\n                return this.conditionStack[this.conditionStack.length-2];\n            },\n            pushState:function begin(condition) {\n                this.begin(condition);\n            }});\n        lexer.options = {};\n        lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\n            var YYSTATE=YY_START\n            switch($avoiding_name_collisions) {\n                case 0:/* skip whitespace */\n                    break;\n                case 1:return 6\n                    break;\n                case 2:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 4\n                    break;\n                case 3:return 17\n                    break;\n                case 4:return 18\n                    break;\n                case 5:return 23\n                    break;\n                case 6:return 24\n                    break;\n                case 7:return 22\n                    break;\n                case 8:return 21\n                    break;\n                case 9:return 10\n                    break;\n                case 10:return 11\n                    break;\n                case 11:return 8\n                    break;\n                case 12:return 14\n                    break;\n                case 13:return 'INVALID'\n                    break;\n            }\n        };\n        lexer.rules = [/^(?:\\s+)/,/^(?:(-?([0-9]|[1-9][0-9]+))(\\.[0-9]+)?([eE][-+]?[0-9]+)?\\b)/,/^(?:\"(?:\\\\[\\\\\"bfnrt/]|\\\\u[a-fA-F0-9]{4}|[^\\\\\\0-\\x09\\x0a-\\x1f\"])*\")/,/^(?:\\{)/,/^(?:\\})/,/^(?:\\[)/,/^(?:\\])/,/^(?:,)/,/^(?::)/,/^(?:true\\b)/,/^(?:false\\b)/,/^(?:null\\b)/,/^(?:$)/,/^(?:.)/];\n        lexer.conditions = {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],\"inclusive\":true}};\n\n\n        ;\n        return lexer;})()\n    parser.lexer = lexer;\n    return parser;\n})();\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n    exports.parser = jsonlint;\n    exports.parse = function () { return jsonlint.parse.apply(jsonlint, arguments); }\n    exports.main = function commonjsMain(args) {\n        if (!args[1])\n            throw new Error('Usage: '+args[0]+' FILE');\n        if (typeof process !== 'undefined') {\n            var source = require('fs').readFileSync(require('path').join(process.cwd(), args[1]), \"utf8\");\n        } else {\n            var cwd = require(\"file\").path(require(\"file\").cwd());\n            var source = cwd.join(args[1]).read({charset: \"utf-8\"});\n        }\n        return exports.parser.parse(source);\n    }\n    if (typeof module !== 'undefined' && require.main === module) {\n        exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require(\"system\").args);\n    }\n}"]}