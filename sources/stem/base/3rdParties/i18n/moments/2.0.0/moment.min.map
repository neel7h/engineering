{"version":3,"file":"moment.min.js","sources":["moment.js"],"names":["undefined","padToken","func","count","a","leftZeroFill","call","this","ordinalizeToken","lang","ordinal","Language","Moment","config","extend","Duration","duration","data","_data","years","year","y","months","month","M","weeks","week","w","days","day","d","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms","_milliseconds","_days","_months","absRound","b","i","hasOwnProperty","number","Math","ceil","floor","targetLength","output","length","addOrSubtractDurationFromMoment","mom","isAdding","currentDate","_d","setTime","date","min","daysInMonth","isArray","input","Object","prototype","toString","compareArrays","array1","array2","len","lengthDiff","abs","diffs","loadLang","key","values","abbr","languages","set","getLangDefinition","hasModule","require","moment","fn","_lang","removeFormattingTokens","match","replace","makeFormatFunction","format","array","formattingTokens","formatTokenFunctions","formatMoment","replaceLongDateFormatTokens","longDateFormat","localFormattingTokens","test","formatFunctions","getParseRegexForToken","token","parseTokenThreeDigits","parseTokenFourDigits","parseTokenSixDigits","parseTokenOneToThreeDigits","parseTokenWord","parseTokenTimestampMs","parseTokenTimezone","parseTokenT","parseTokenOneOrTwoDigits","RegExp","addTimeToArrayFromToken","datePartArray","_a","_l","monthsParse","_isValid","_isPm","toLowerCase","Date","parseFloat","_useUTC","parseTimezoneChunker","_tzh","_tzm","dateFromArray","setUTCFullYear","setUTCHours","setFullYear","setHours","makeDateFromStringAndFormat","parsedInput","tokens","_f","string","_i","exec","slice","indexOf","makeDateFromStringAndArray","tempConfig","tempMoment","bestMoment","currentScore","scoreToBeat","pop","isValid","toArray","makeDateFromString","isoRegex","isoTimes","makeDateFromInput","matched","aspNetJsonRegex","substituteTimeAgo","withoutSuffix","isFuture","relativeTime","round","args","apply","weekOfYear","firstDayOfWeek","firstDayOfWeekOfYear","end","daysToDayOfWeek","add","dayOfYear","makeMoment","preparse","isMoment","makeGetterAndSetter","name","utc","_isUTC","makeDurationGetter","makeDurationAsGetter","factor","VERSION","module","exports","isoFormat","proxyGettersAndSetters","split","unitMillisecondFactors","Milliseconds","Seconds","Minutes","Hours","Days","Months","Years","ordinalizeTokens","paddedTokens","MMM","monthsShort","MMMM","D","DDD","dd","weekdaysMin","ddd","weekdaysShort","dddd","weekdays","W","isoWeek","YY","YYYY","YYYYY","meridiem","A","H","S","SS","SSS","Z","zone","ZZ","X","unix","DDDD","prop","_monthsShort","monthName","regex","_monthsParse","_weekdays","_weekdaysShort","_weekdaysMin","_longDateFormat","LT","L","LL","LLL","LLLL","toUpperCase","val","isLower","_calendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","calendar","_relativeTime","future","past","mm","hh","MM","yy","pastFuture","diff","_ordinal","postformat","_week","dow","doy","ret","isDuration","isNumber","version","defaultFormat","_abbr","langData","obj","clone","valueOf","toDate","toJSON","isNaN","getTime","local","inputString","dur","subtract","units","asFloat","that","zoneDiff","startOf","from","time","humanize","fromNow","isLeapYear","isDST","getUTCDay","getDay","endOf","isAfter","isBefore","isSame","getTimezoneOffset","isoWeeks","withSuffix","difference","ender","define","amd"],"mappings":"CAMA,SAAWA,GAoKP,QAASC,GAASC,EAAMC,GACpB,MAAO,UAAUC,GACb,MAAOC,GAAaH,EAAKI,KAAKC,KAAMH,GAAID,IAGhD,QAASK,GAAgBN,GACrB,MAAO,UAAUE,GACb,MAAOG,MAAKE,OAAOC,QAAQR,EAAKI,KAAKC,KAAMH,KAmBnD,QAASO,MAKT,QAASC,GAAOC,GACZC,EAAOP,KAAMM,GAIjB,QAASE,GAASC,GACd,GAAIC,GAAOV,KAAKW,SACZC,EAAQH,EAASG,OAASH,EAASI,MAAQJ,EAASK,GAAK,EACzDC,EAASN,EAASM,QAAUN,EAASO,OAASP,EAASQ,GAAK,EAC5DC,EAAQT,EAASS,OAAST,EAASU,MAAQV,EAASW,GAAK,EACzDC,EAAOZ,EAASY,MAAQZ,EAASa,KAAOb,EAASc,GAAK,EACtDC,EAAQf,EAASe,OAASf,EAASgB,MAAQhB,EAASiB,GAAK,EACzDC,EAAUlB,EAASkB,SAAWlB,EAASmB,QAAUnB,EAASoB,GAAK,EAC/DC,EAAUrB,EAASqB,SAAWrB,EAASsB,QAAUtB,EAASuB,GAAK,EAC/DC,EAAexB,EAASwB,cAAgBxB,EAASyB,aAAezB,EAAS0B,IAAM,CAGnFnC,MAAKoC,cAAgBH,EACP,IAAVH,EACU,IAAVH,EACQ,KAARH,EAGJxB,KAAKqC,MAAQhB,EACD,EAARH,EAIJlB,KAAKsC,QAAUvB,EACH,GAARH,EAIJF,EAAKuB,aAAeA,EAAe,IACnCH,GAAWS,EAASN,EAAe,KAEnCvB,EAAKoB,QAAUA,EAAU,GACzBH,GAAWY,EAAST,EAAU,IAE9BpB,EAAKiB,QAAUA,EAAU,GACzBH,GAASe,EAASZ,EAAU,IAE5BjB,EAAKc,MAAQA,EAAQ,GACrBH,GAAQkB,EAASf,EAAQ,IAEzBH,GAAgB,EAARH,EACRR,EAAKW,KAAOA,EAAO,GAEnBN,GAAUwB,EAASlB,EAAO,IAE1BX,EAAKK,OAASA,EAAS,GACvBH,GAAS2B,EAASxB,EAAS,IAE3BL,EAAKE,MAAQA,EASjB,QAASL,GAAOV,EAAG2C,GACf,IAAK,GAAIC,KAAKD,GACNA,EAAEE,eAAeD,KACjB5C,EAAE4C,GAAKD,EAAEC,GAGjB,OAAO5C,GAGX,QAAS0C,GAASI,GACd,MAAa,GAATA,EACOC,KAAKC,KAAKF,GAEVC,KAAKE,MAAMH,GAM1B,QAAS7C,GAAa6C,EAAQI,GAE1B,IADA,GAAIC,GAASL,EAAS,GACfK,EAAOC,OAASF,GACnBC,EAAS,IAAMA,CAEnB,OAAOA,GAIX,QAASE,GAAgCC,EAAK1C,EAAU2C,GACpD,GAGIC,GAHAlB,EAAK1B,EAAS2B,cACdb,EAAId,EAAS4B,MACbpB,EAAIR,EAAS6B,OAGbH,IACAgB,EAAIG,GAAGC,SAASJ,EAAMhB,EAAKiB,GAE3B7B,GACA4B,EAAIK,KAAKL,EAAIK,OAASjC,EAAI6B,GAE1BnC,IACAoC,EAAcF,EAAIK,OAClBL,EAAIK,KAAK,GACJxC,MAAMmC,EAAInC,QAAUC,EAAImC,GACxBI,KAAKZ,KAAKa,IAAIJ,EAAaF,EAAIO,iBAK5C,QAASC,GAAQC,GACb,MAAiD,mBAA1CC,OAAOC,UAAUC,SAAShE,KAAK6D,GAI1C,QAASI,GAAcC,EAAQC,GAC3B,GAGIzB,GAHA0B,EAAMvB,KAAKa,IAAIQ,EAAOhB,OAAQiB,EAAOjB,QACrCmB,EAAaxB,KAAKyB,IAAIJ,EAAOhB,OAASiB,EAAOjB,QAC7CqB,EAAQ,CAEZ,KAAK7B,EAAI,EAAO0B,EAAJ1B,EAASA,MACXwB,EAAOxB,OAASyB,EAAOzB,IACzB6B,GAGR,OAAOA,GAAQF,EA+JnB,QAASG,GAASC,EAAKC,GAMnB,MALAA,GAAOC,KAAOF,EACTG,EAAUH,KACXG,EAAUH,GAAO,GAAIpE,IAEzBuE,EAAUH,GAAKI,IAAIH,GACZE,EAAUH,GASrB,QAASK,GAAkBL,GACvB,MAAKA,KAGAG,EAAUH,IAAQM,GACnBC,QAAQ,UAAYP,GAEjBG,EAAUH,IALNQ,EAAOC,GAAGC,MAczB,QAASC,GAAuBvB,GAC5B,MAAIA,GAAMwB,MAAM,UACLxB,EAAMyB,QAAQ,WAAY,IAE9BzB,EAAMyB,QAAQ,MAAO,IAGhC,QAASC,GAAmBC,GACxB,GAA4C9C,GAAGQ,EAA3CuC,EAAQD,EAAOH,MAAMK,EAEzB,KAAKhD,EAAI,EAAGQ,EAASuC,EAAMvC,OAAYA,EAAJR,EAAYA,IAEvC+C,EAAM/C,GADNiD,GAAqBF,EAAM/C,IAChBiD,GAAqBF,EAAM/C,IAE3B0C,EAAuBK,EAAM/C,GAIhD,OAAO,UAAUU,GACb,GAAIH,GAAS,EACb,KAAKP,EAAI,EAAOQ,EAAJR,EAAYA,IACpBO,GAAmC,kBAAlBwC,GAAM/C,GAAG1C,KAAsByF,EAAM/C,GAAG1C,KAAKoD,EAAKoC,GAAUC,EAAM/C,EAEvF,OAAOO,IAKf,QAAS2C,GAAa9D,EAAG0D,GAGrB,QAASK,GAA4BhC,GACjC,MAAO/B,GAAE3B,OAAO2F,eAAejC,IAAUA,EAG7C,IANA,GAAInB,GAAI,EAMDA,KAAOqD,EAAsBC,KAAKR,IACrCA,EAASA,EAAOF,QAAQS,EAAuBF,EAOnD,OAJKI,IAAgBT,KACjBS,GAAgBT,GAAUD,EAAmBC,IAG1CS,GAAgBT,GAAQ1D,GAUnC,QAASoE,GAAsBC,GAC3B,OAAQA,GACR,IAAK,OACD,MAAOC,EACX,KAAK,OACD,MAAOC,EACX,KAAK,QACD,MAAOC,EACX,KAAK,IACL,IAAK,KACL,IAAK,MACL,IAAK,MACD,MAAOC,EACX,KAAK,MACL,IAAK,OACL,IAAK,KACL,IAAK,MACL,IAAK,OACL,IAAK,IACL,IAAK,IACD,MAAOC,EACX,KAAK,IACD,MAAOC,EACX,KAAK,IACL,IAAK,KACD,MAAOC,EACX,KAAK,IACD,MAAOC,EACX,KAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,MAAOC,EACX,SACI,MAAO,IAAIC,QAAOV,EAAMb,QAAQ,KAAM,MAK9C,QAASwB,GAAwBX,EAAOtC,EAAOtD,GAC3C,GAAIT,GACAiH,EAAgBxG,EAAOyG,EAE3B,QAAQb,GAER,IAAK,IACL,IAAK,KACDY,EAAc,GAAe,MAATlD,EAAiB,IAAMA,EAAQ,CACnD,MACJ,KAAK,MACL,IAAK,OACD/D,EAAIgF,EAAkBvE,EAAO0G,IAAIC,YAAYrD,GAEpC,MAAL/D,EACAiH,EAAc,GAAKjH,EAEnBS,EAAO4G,UAAW,CAEtB,MAEJ,KAAK,IACL,IAAK,KACL,IAAK,MACL,IAAK,OACY,MAATtD,IACAkD,EAAc,KAAOlD,EAEzB,MAEJ,KAAK,KACDkD,EAAc,KAAOlD,KAAWA,EAAQ,GAAK,KAAO,IACpD,MACJ,KAAK,OACL,IAAK,QACDkD,EAAc,KAAOlD,CACrB,MAEJ,KAAK,IACL,IAAK,IACDtD,EAAO6G,MAAwC,QAA9BvD,EAAQ,IAAIwD,aAC7B,MAEJ,KAAK,IACL,IAAK,KACL,IAAK,IACL,IAAK,KACDN,EAAc,KAAOlD,CACrB,MAEJ,KAAK,IACL,IAAK,KACDkD,EAAc,KAAOlD,CACrB,MAEJ,KAAK,IACL,IAAK,KACDkD,EAAc,KAAOlD,CACrB,MAEJ,KAAK,IACL,IAAK,KACL,IAAK,MACDkD,EAAc,MAA0B,KAAhB,KAAOlD,GAC/B,MAEJ,KAAK,IACDtD,EAAOgD,GAAK,GAAI+D,MAAyB,IAApBC,WAAW1D,GAChC,MAEJ,KAAK,IACL,IAAK,KACDtD,EAAOiH,SAAU,EACjB1H,GAAK+D,EAAQ,IAAIwB,MAAMoC,GACnB3H,GAAKA,EAAE,KACPS,EAAOmH,OAAS5H,EAAE,IAElBA,GAAKA,EAAE,KACPS,EAAOoH,OAAS7H,EAAE,IAGlBA,GAAc,MAATA,EAAE,KACPS,EAAOmH,MAAQnH,EAAOmH,KACtBnH,EAAOoH,MAAQpH,EAAOoH,MAMjB,MAAT9D,IACAtD,EAAO4G,UAAW,GAQ1B,QAASS,GAAcrH,GACnB,GAAImC,GAAGe,EAAMI,IAEb,KAAItD,EAAOgD,GAAX,CAIA,IAAKb,EAAI,EAAO,EAAJA,EAAOA,IACfnC,EAAOyG,GAAGtE,GAAKmB,EAAMnB,GAAsB,MAAhBnC,EAAOyG,GAAGtE,GAAqB,IAANA,EAAU,EAAI,EAAKnC,EAAOyG,GAAGtE,EAIrFmB,GAAM,IAAMtD,EAAOmH,MAAQ,EAC3B7D,EAAM,IAAMtD,EAAOoH,MAAQ,EAE3BlE,EAAO,GAAI6D,MAAK,GAEZ/G,EAAOiH,SACP/D,EAAKoE,eAAehE,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC9CJ,EAAKqE,YAAYjE,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIA,EAAM,MAErDJ,EAAKsE,YAAYlE,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3CJ,EAAKuE,SAASnE,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIA,EAAM,KAGtDtD,EAAOgD,GAAKE,GAIhB,QAASwE,GAA4B1H,GAEjC,GAEImC,GAAGwF,EAFHC,EAAS5H,EAAO6H,GAAG/C,MAAMK,GACzB2C,EAAS9H,EAAO+H,EAKpB,KAFA/H,EAAOyG,MAEFtE,EAAI,EAAGA,EAAIyF,EAAOjF,OAAQR,IAC3BwF,GAAehC,EAAsBiC,EAAOzF,IAAI6F,KAAKF,QAAe,GAChEH,IACAG,EAASA,EAAOG,MAAMH,EAAOI,QAAQP,GAAeA,EAAYhF,SAGhEyC,GAAqBwC,EAAOzF,KAC5BoE,EAAwBqB,EAAOzF,GAAIwF,EAAa3H,EAIpDA,GAAO6G,OAAS7G,EAAOyG,GAAG,GAAK,KAC/BzG,EAAOyG,GAAG,IAAM,IAGhBzG,EAAO6G,SAAU,GAA0B,KAAjB7G,EAAOyG,GAAG,KACpCzG,EAAOyG,GAAG,GAAK,GAGnBY,EAAcrH,GAIlB,QAASmI,GAA2BnI,GAUhC,IATA,GAAIoI,GACAC,EACAC,EAKAC,EAHAC,EAAc,GAKXxI,EAAO6H,GAAGlF,QAAQ,CAMrB,GALAyF,EAAanI,KAAWD,GACxBoI,EAAWP,GAAK7H,EAAO6H,GAAGY,MAC1Bf,EAA4BU,GAC5BC,EAAa,GAAItI,GAAOqI,GAEpBC,EAAWK,UAAW,CACtBJ,EAAaD,CACb,OAGJE,EAAe7E,EAAc0E,EAAW3B,GAAI4B,EAAWM,WAEpCH,EAAfD,IACAC,EAAcD,EACdD,EAAaD,GAIrBpI,EAAOD,EAAQsI,GAInB,QAASM,GAAmB5I,GACxB,GAAImC,GACA2F,EAAS9H,EAAO+H,EACpB,IAAIc,EAASb,KAAKF,GAAS,CAEvB,IADA9H,EAAO6H,GAAK,cACP1F,EAAI,EAAO,EAAJA,EAAOA,IACf,GAAI2G,EAAS3G,GAAG,GAAG6F,KAAKF,GAAS,CAC7B9H,EAAO6H,IAAMiB,EAAS3G,GAAG,EACzB,OAGJgE,EAAmB6B,KAAKF,KACxB9H,EAAO6H,IAAM,MAEjBH,EAA4B1H,OAE5BA,GAAOgD,GAAK,GAAI+D,MAAKe,GAI7B,QAASiB,GAAkB/I,GACvB,GAAIsD,GAAQtD,EAAO+H,GACfiB,EAAUC,EAAgBjB,KAAK1E,EAE/BA,KAAUnE,EACVa,EAAOgD,GAAK,GAAI+D,MACTiC,EACPhJ,EAAOgD,GAAK,GAAI+D,OAAMiC,EAAQ,IACN,gBAAV1F,GACdsF,EAAmB5I,GACZqD,EAAQC,IACftD,EAAOyG,GAAKnD,EAAM2E,MAAM,GACxBZ,EAAcrH,IAEdA,EAAOgD,GAA6B,GAAI+D,MAA5BzD,YAAiByD,OAAiBzD,EAAkBA,GAWxE,QAAS4F,GAAkBpB,EAAQzF,EAAQ8G,EAAeC,EAAUxJ,GAChE,MAAOA,GAAKyJ,aAAahH,GAAU,IAAK8G,EAAerB,EAAQsB,GAGnE,QAASC,GAAa1H,EAAcwH,EAAevJ,GAC/C,GAAI4B,GAAU8H,EAAMhH,KAAKyB,IAAIpC,GAAgB,KACzCN,EAAUiI,EAAM9H,EAAU,IAC1BN,EAAQoI,EAAMjI,EAAU,IACxBN,EAAOuI,EAAMpI,EAAQ,IACrBZ,EAAQgJ,EAAMvI,EAAO,KACrBwI,EAAiB,GAAV/H,IAAiB,IAAKA,IACb,IAAZH,IAAkB,MACR,GAAVA,IAAiB,KAAMA,IACb,IAAVH,IAAgB,MACR,GAARA,IAAe,KAAMA,IACZ,IAATH,IAAe,MACP,IAARA,IAAe,KAAMA,IACb,IAARA,IAAe,MACR,IAAPA,IAAe,KAAMuI,EAAMvI,EAAO,MACxB,IAAVT,IAAgB,OAAS,KAAMA,EAIvC,OAHAiJ,GAAK,GAAKJ,EACVI,EAAK,GAAK5H,EAAe,EACzB4H,EAAK,GAAK3J,EACHsJ,EAAkBM,SAAUD,GAgBvC,QAASE,GAAW5G,EAAK6G,EAAgBC,GACrC,GAAIC,GAAMD,EAAuBD,EAC7BG,EAAkBF,EAAuB9G,EAAI7B,KAWjD,OARI6I,GAAkBD,IAClBC,GAAmB,GAGDD,EAAM,EAAxBC,IACAA,GAAmB,GAGhBvH,KAAKC,KAAKmC,EAAO7B,GAAKiH,IAAI,IAAKD,GAAiBE,YAAc,GAQzE,QAASC,GAAWhK,GAChB,GAAIsD,GAAQtD,EAAO+H,GACf9C,EAASjF,EAAO6H,EAEpB,OAAc,QAAVvE,GAA4B,KAAVA,EACX,MAGU,gBAAVA,KACPtD,EAAO+H,GAAKzE,EAAQiB,IAAoB0F,SAAS3G,IAGjDoB,EAAOwF,SAAS5G,IAChBtD,EAASC,KAAWqD,GACpBtD,EAAOgD,GAAK,GAAI+D,OAAMzD,EAAMN,KACrBiC,EACH5B,EAAQ4B,GACRkD,EAA2BnI,GAE3B0H,EAA4B1H,GAGhC+I,EAAkB/I,GAGf,GAAID,GAAOC,IAsVtB,QAASmK,GAAoBC,EAAMlG,GAC/BQ,EAAOC,GAAGyF,GAAQ1F,EAAOC,GAAGyF,EAAO,KAAO,SAAU9G,GAChD,GAAI+G,GAAM3K,KAAK4K,OAAS,MAAQ,EAChC,OAAa,OAAThH,GACA5D,KAAKsD,GAAG,MAAQqH,EAAMnG,GAAKZ,GACpB5D,MAEAA,KAAKsD,GAAG,MAAQqH,EAAMnG,MAgDzC,QAASqG,GAAmBH,GACxB1F,EAAOvE,SAASwE,GAAGyF,GAAQ,WACvB,MAAO1K,MAAKW,MAAM+J,IAI1B,QAASI,GAAqBJ,EAAMK,GAChC/F,EAAOvE,SAASwE,GAAG,KAAOyF,GAAQ,WAC9B,OAAQ1K,KAAO+K,GA5oCvB,IAzKA,GAAI/F,GAEoBvC,EADpBuI,EAAU,QACVpB,EAAQhH,KAAKgH,MAEbjF,KAGAG,EAA+B,mBAAXmG,SAA0BA,OAAOC,QAGrD3B,EAAkB,sBAGlB9D,EAAmB,iIACnBK,EAAwB,yCAMxBa,EAA2B,QAC3BL,EAA6B,UAC7BH,EAAwB,QACxBC,EAAuB,UACvBC,EAAsB,gBACtBE,EAAiB,yGACjBE,EAAqB,sBACrBC,EAAc,KACdF,EAAwB,yBAIxB2C,EAAW,qFACXgC,EAAY,uBAGZ/B,IACK,aAAc,iCACd,WAAY,wBACZ,QAAS,mBACT,KAAM,cAIX5B,EAAuB,kBAGvB4D,EAAyB,gDAAgDC,MAAM,KAC/EC,IACIC,aAAiB,EACjBC,QAAY,IACZC,QAAY,IACZC,MAAU,KACVC,KAAS,MACTC,OAAW,OACXC,MAAU,SAId7F,MAGA8F,GAAmB,gBAAgBT,MAAM,KACzCU,GAAe,kBAAkBV,MAAM,KAEvC3F,IACIzE,EAAO,WACH,MAAOjB,MAAKgB,QAAU,GAE1BgL,IAAO,SAAUzG,GACb,MAAOvF,MAAKE,OAAO+L,YAAYjM,KAAMuF,IAEzC2G,KAAO,SAAU3G,GACb,MAAOvF,MAAKE,OAAOa,OAAOf,KAAMuF,IAEpC4G,EAAO,WACH,MAAOnM,MAAKwD,QAEhB4I,IAAO,WACH,MAAOpM,MAAKqK,aAEhB9I,EAAO,WACH,MAAOvB,MAAKsB,OAEhB+K,GAAO,SAAU9G,GACb,MAAOvF,MAAKE,OAAOoM,YAAYtM,KAAMuF,IAEzCgH,IAAO,SAAUhH,GACb,MAAOvF,MAAKE,OAAOsM,cAAcxM,KAAMuF,IAE3CkH,KAAO,SAAUlH,GACb,MAAOvF,MAAKE,OAAOwM,SAAS1M,KAAMuF,IAEtCnE,EAAO,WACH,MAAOpB,MAAKmB,QAEhBwL,EAAO,WACH,MAAO3M,MAAK4M,WAEhBC,GAAO,WACH,MAAO/M,GAAaE,KAAKa,OAAS,IAAK,IAE3CiM,KAAO,WACH,MAAOhN,GAAaE,KAAKa,OAAQ,IAErCkM,MAAQ,WACJ,MAAOjN,GAAaE,KAAKa,OAAQ,IAErChB,EAAO,WACH,MAAOG,MAAKE,OAAO8M,SAAShN,KAAKwB,QAASxB,KAAK2B,WAAW,IAE9DsL,EAAO,WACH,MAAOjN,MAAKE,OAAO8M,SAAShN,KAAKwB,QAASxB,KAAK2B,WAAW,IAE9DuL,EAAO,WACH,MAAOlN,MAAKwB,SAEhBE,EAAO,WACH,MAAO1B,MAAKwB,QAAU,IAAM,IAEhCK,EAAO,WACH,MAAO7B,MAAK2B,WAEhBK,EAAO,WACH,MAAOhC,MAAK8B,WAEhBqL,EAAO,WACH,SAAUnN,KAAKiC,eAAiB,MAEpCmL,GAAO,WACH,MAAOtN,MAAgBE,KAAKiC,eAAiB,IAAK,IAEtDoL,IAAO,WACH,MAAOvN,GAAaE,KAAKiC,eAAgB,IAE7CqL,EAAO,WACH,GAAIzN,IAAKG,KAAKuN,OACV/K,EAAI,GAKR,OAJQ,GAAJ3C,IACAA,GAAKA,EACL2C,EAAI,KAEDA,EAAI1C,KAAgBD,EAAI,IAAK,GAAK,IAAMC,IAAeD,EAAI,GAAI,IAE1E2N,GAAO,WACH,GAAI3N,IAAKG,KAAKuN,OACV/K,EAAI,GAKR,OAJQ,GAAJ3C,IACAA,GAAKA,EACL2C,EAAI,KAEDA,EAAI1C,KAAgB,GAAKD,EAAI,GAAI,IAE5C4N,EAAO,WACH,MAAOzN,MAAK0N,SAejB5B,GAAiB7I,QACpBR,EAAIqJ,GAAiB/C,MACrBrD,GAAqBjD,EAAI,KAAOxC,EAAgByF,GAAqBjD,GAEzE,MAAOsJ,GAAa9I,QAChBR,EAAIsJ,GAAahD,MACjBrD,GAAqBjD,EAAIA,GAAK/C,EAASgG,GAAqBjD,GAAI,EAolCpE,KAllCAiD,GAAqBiI,KAAOjO,EAASgG,GAAqB0G,IAAK,GAmJ/DhM,EAAS0D,WACLc,IAAM,SAAUtE,GACZ,GAAIsN,GAAMnL,CACV,KAAKA,IAAKnC,GACNsN,EAAOtN,EAAOmC,GACM,kBAATmL,GACP5N,KAAKyC,GAAKmL,EAEV5N,KAAK,IAAMyC,GAAKmL,GAK5BtL,QAAU,wFAAwF+I,MAAM,KACxGtK,OAAS,SAAUc,GACf,MAAO7B,MAAKsC,QAAQT,EAAEb,UAG1B6M,aAAe,kDAAkDxC,MAAM,KACvEY,YAAc,SAAUpK,GACpB,MAAO7B,MAAK6N,aAAahM,EAAEb,UAG/BiG,YAAc,SAAU6G,GACpB,GAAIrL,GAAGU,EAAK4K,CAMZ,KAJK/N,KAAKgO,eACNhO,KAAKgO,iBAGJvL,EAAI,EAAO,GAAJA,EAAQA,IAQhB,GANKzC,KAAKgO,aAAavL,KACnBU,EAAM6B,GAAQ,IAAMvC,IACpBsL,EAAQ,IAAM/N,KAAKe,OAAOoC,EAAK,IAAM,KAAOnD,KAAKiM,YAAY9I,EAAK,IAClEnD,KAAKgO,aAAavL,GAAK,GAAImE,QAAOmH,EAAM1I,QAAQ,IAAK,IAAK,MAG1DrF,KAAKgO,aAAavL,GAAGsD,KAAK+H,GAC1B,MAAOrL,IAKnBwL,UAAY,2DAA2D5C,MAAM,KAC7EqB,SAAW,SAAU7K,GACjB,MAAO7B,MAAKiO,UAAUpM,EAAEP,QAG5B4M,eAAiB,8BAA8B7C,MAAM,KACrDmB,cAAgB,SAAU3K,GACtB,MAAO7B,MAAKkO,eAAerM,EAAEP,QAGjC6M,aAAe,uBAAuB9C,MAAM,KAC5CiB,YAAc,SAAUzK,GACpB,MAAO7B,MAAKmO,aAAatM,EAAEP,QAG/B8M,iBACIC,GAAK,SACLC,EAAI,aACJC,GAAK,cACLC,IAAM,iBACNC,KAAO,wBAEX5I,eAAiB,SAAUrB,GACvB,GAAIxB,GAAShD,KAAKoO,gBAAgB5J,EAOlC,QANKxB,GAAUhD,KAAKoO,gBAAgB5J,EAAIkK,iBACpC1L,EAAShD,KAAKoO,gBAAgB5J,EAAIkK,eAAerJ,QAAQ,mBAAoB,SAAUsJ,GACnF,MAAOA,GAAIpG,MAAM,KAErBvI,KAAKoO,gBAAgB5J,GAAOxB,GAEzBA,GAGXgK,SAAW,SAAUxL,EAAOG,EAASiN,GACjC,MAAIpN,GAAQ,GACDoN,EAAU,KAAO,KAEjBA,EAAU,KAAO,MAIhCC,WACIC,QAAU,gBACVC,QAAU,mBACVC,SAAW,eACXC,QAAU,oBACVC,SAAW,sBACXC,SAAW,KAEfC,SAAW,SAAU5K,EAAKrB,GACtB,GAAIH,GAAShD,KAAK6O,UAAUrK,EAC5B,OAAyB,kBAAXxB,GAAwBA,EAAO8G,MAAM3G,GAAOH,GAG9DqM,eACIC,OAAS,QACTC,KAAO,SACPvN,EAAI,gBACJH,EAAI,WACJ2N,GAAK,aACL9N,EAAI,UACJ+N,GAAK,WACLlO,EAAI,QACJ8K,GAAK,UACLpL,EAAI,UACJyO,GAAK,YACL5O,EAAI,SACJ6O,GAAK,YAEThG,aAAe,SAAUhH,EAAQ8G,EAAerB,EAAQsB,GACpD,GAAI1G,GAAShD,KAAKqP,cAAcjH,EAChC,OAA0B,kBAAXpF,GACXA,EAAOL,EAAQ8G,EAAerB,EAAQsB,GACtC1G,EAAOqC,QAAQ,MAAO1C,IAE9BiN,WAAa,SAAUC,EAAM7M,GACzB,GAAIuC,GAASvF,KAAKqP,cAAcQ,EAAO,EAAI,SAAW,OACtD,OAAyB,kBAAXtK,GAAwBA,EAAOvC,GAAUuC,EAAOF,QAAQ,MAAOrC,IAGjF7C,QAAU,SAAUwC,GAChB,MAAO3C,MAAK8P,SAASzK,QAAQ,KAAM1C,IAEvCmN,SAAW,KAEXvF,SAAW,SAAUnC,GACjB,MAAOA,IAGX2H,WAAa,SAAU3H,GACnB,MAAOA,IAGXjH,KAAO,SAAUgC,GACb,MAAO4G,GAAW5G,EAAKnD,KAAKgQ,MAAMC,IAAKjQ,KAAKgQ,MAAME,MAEtDF,OACIC,IAAM,EACNC,IAAM,IAiddlL,EAAS,SAAUpB,EAAO2B,EAAQrF,GAC9B,MAAOoK,IACHjC,GAAKzE,EACLuE,GAAK5C,EACLyB,GAAK9G,EACL0K,QAAS,KAKjB5F,EAAO2F,IAAM,SAAU/G,EAAO2B,EAAQrF,GAClC,MAAOoK,IACH/C,SAAU,EACVqD,QAAS,EACT5D,GAAK9G,EACLmI,GAAKzE,EACLuE,GAAK5C,KAKbP,EAAO0I,KAAO,SAAU9J,GACpB,MAAOoB,GAAe,IAARpB,IAIlBoB,EAAOvE,SAAW,SAAUmD,EAAOY,GAC/B,GAGI2L,GAHAC,EAAapL,EAAOoL,WAAWxM,GAC/ByM,EAA6B,gBAAVzM,GACnBnD,EAAY2P,EAAaxM,EAAMjD,MAAS0P,KAAgBzM,CAiB5D,OAdIyM,KACI7L,EACA/D,EAAS+D,GAAOZ,EAEhBnD,EAASwB,aAAe2B,GAIhCuM,EAAM,GAAI3P,GAASC,GAEf2P,GAAcxM,EAAMlB,eAAe,WACnCyN,EAAIjL,MAAQtB,EAAMsB,OAGfiL,GAIXnL,EAAOsL,QAAUtF,EAGjBhG,EAAOuL,cAAgBpF,EAKvBnG,EAAO9E,KAAO,SAAUsE,EAAKC,GAGzB,MAAKD,IAGDC,EACAF,EAASC,EAAKC,GACNE,EAAUH,IAClBK,EAAkBL,QAEtBQ,EAAOvE,SAASwE,GAAGC,MAAQF,EAAOC,GAAGC,MAAQL,EAAkBL,KAPpDQ,EAAOC,GAAGC,MAAMsL,OAW/BxL,EAAOyL,SAAW,SAAUjM,GAIxB,MAHIA,IAAOA,EAAIU,OAASV,EAAIU,MAAMsL,QAC9BhM,EAAMA,EAAIU,MAAMsL,OAEb3L,EAAkBL,IAI7BQ,EAAOwF,SAAW,SAAUkG,GACxB,MAAOA,aAAerQ,IAI1B2E,EAAOoL,WAAa,SAAUM,GAC1B,MAAOA,aAAelQ,IAS1BwE,EAAOC,GAAK5E,EAAOyD,WAEf6M,MAAQ,WACJ,MAAO3L,GAAOhF,OAGlB4Q,QAAU,WACN,OAAQ5Q,KAAKsD,IAGjBoK,KAAO,WACH,MAAO9K,MAAKE,OAAO9C,KAAKsD,GAAK,MAGjCS,SAAW,WACP,MAAO/D,MAAKuF,OAAO,qCAGvBsL,OAAS,WACL,MAAO7Q,MAAKsD,IAGhBwN,OAAS,WACL,MAAO9L,GAAO2F,IAAI3K,MAAMuF,OAAO,iCAGnC0D,QAAU,WACN,GAAIpH,GAAI7B,IACR,QACI6B,EAAEhB,OACFgB,EAAEb,QACFa,EAAE2B,OACF3B,EAAEL,QACFK,EAAEF,UACFE,EAAEC,UACFD,EAAEI,iBAIV+G,QAAU,WAQN,MAPqB,OAAjBhJ,KAAKkH,WAEDlH,KAAKkH,SADLlH,KAAK+G,IACY/C,EAAchE,KAAK+G,IAAK/G,KAAK4K,OAAS5F,EAAO2F,IAAI3K,KAAK+G,IAAM/B,EAAOhF,KAAK+G,KAAKkC,YAE7E8H,MAAM/Q,KAAKsD,GAAG0N,cAG9BhR,KAAKkH,UAGlByD,IAAM,WAEF,MADA3K,MAAK4K,QAAS,EACP5K,MAGXiR,MAAQ,WAEJ,MADAjR,MAAK4K,QAAS,EACP5K,MAGXuF,OAAS,SAAU2L,GACf,GAAIlO,GAAS2C,EAAa3F,KAAMkR,GAAelM,EAAOuL,cACtD,OAAOvQ,MAAKE,OAAO6P,WAAW/M,IAGlCoH,IAAM,SAAUxG,EAAO+K,GACnB,GAAIwC,EAQJ,OALIA,GADiB,gBAAVvN,GACDoB,EAAOvE,UAAUkO,EAAK/K,GAEtBoB,EAAOvE,SAASmD,EAAO+K,GAEjCzL,EAAgClD,KAAMmR,EAAK,GACpCnR,MAGXoR,SAAW,SAAUxN,EAAO+K,GACxB,GAAIwC,EAQJ,OALIA,GADiB,gBAAVvN,GACDoB,EAAOvE,UAAUkO,EAAK/K,GAEtBoB,EAAOvE,SAASmD,EAAO+K,GAEjCzL,EAAgClD,KAAMmR,EAAK,IACpCnR,MAGX6P,KAAO,SAAUjM,EAAOyN,EAAOC,GAC3B,GAEIzB,GAAM7M,EAFNuO,EAAOvR,KAAK4K,OAAS5F,EAAOpB,GAAO+G,MAAQ3F,EAAOpB,GAAOqN,QACzDO,EAAyC,KAA7BxR,KAAKuN,OAASgE,EAAKhE,OAwBnC,OArBI8D,KAEAA,EAAQA,EAAMhM,QAAQ,KAAM,KAGlB,SAAVgM,GAA8B,UAAVA,GACpBxB,EAAmD,OAA3C7P,KAAK0D,cAAgB6N,EAAK7N,eAClCV,EAAwC,IAA7BhD,KAAKa,OAAS0Q,EAAK1Q,SAAiBb,KAAKgB,QAAUuQ,EAAKvQ,SACnEgC,IAAYhD,KAAOgF,EAAOhF,MAAMyR,QAAQ,UAAaF,EAAOvM,EAAOuM,GAAME,QAAQ,WAAa5B,EAChF,SAAVwB,IACArO,GAAkB,MAGtB6M,EAAQ7P,KAAOuR,EAAQC,EACvBxO,EAAmB,WAAVqO,EAAqBxB,EAAO,IACvB,WAAVwB,EAAqBxB,EAAO,IAClB,SAAVwB,EAAmBxB,EAAO,KAChB,QAAVwB,EAAkBxB,EAAO,MACf,SAAVwB,EAAmBxB,EAAO,OAC1BA,GAEDyB,EAAUtO,EAAST,EAASS,IAGvC0O,KAAO,SAAUC,EAAMlI,GACnB,MAAOzE,GAAOvE,SAAST,KAAK6P,KAAK8B,IAAOzR,KAAKF,KAAKE,OAAOsQ,OAAOoB,UAAUnI,IAG9EoI,QAAU,SAAUpI,GAChB,MAAOzJ,MAAK0R,KAAK1M,IAAUyE,IAG/B2F,SAAW,WACP,GAAIS,GAAO7P,KAAK6P,KAAK7K,IAASyM,QAAQ,OAAQ,QAAQ,GAClDlM,EAAgB,GAAPsK,EAAY,WACd,GAAPA,EAAY,WACL,EAAPA,EAAW,UACJ,EAAPA,EAAW,UACJ,EAAPA,EAAW,UACJ,EAAPA,EAAW,WAAa,UAC5B,OAAO7P,MAAKuF,OAAOvF,KAAKE,OAAOkP,SAAS7J,EAAQvF,QAGpD8R,WAAa,WACT,GAAIjR,GAAOb,KAAKa,MAChB,OAAQA,GAAO,IAAM,GAAKA,EAAO,MAAQ,GAAMA,EAAO,MAAQ,GAGlEkR,MAAQ,WACJ,MAAQ/R,MAAKuN,OAASvI,GAAQhF,KAAKa,SAAS0M,QACxCvN,KAAKuN,OAASvI,GAAQhF,KAAKa,OAAQ,IAAI0M,QAG/CjM,IAAM,SAAUsC,GACZ,GAAItC,GAAMtB,KAAK4K,OAAS5K,KAAKsD,GAAG0O,YAAchS,KAAKsD,GAAG2O,QACtD,OAAgB,OAATrO,EAAgBtC,EACnBtB,KAAKoK,KAAM7I,EAAIqC,EAAQtC,KAG/BmQ,QAAS,SAAUJ,GAIf,OAHAA,EAAQA,EAAMhM,QAAQ,KAAM,KAI5B,IAAK,OACDrF,KAAKgB,MAAM,EAEf,KAAK,QACDhB,KAAKwD,KAAK,EAEd,KAAK,OACL,IAAK,MACDxD,KAAKwB,MAAM,EAEf,KAAK,OACDxB,KAAK2B,QAAQ,EAEjB,KAAK,SACD3B,KAAK8B,QAAQ,EAEjB,KAAK,SACD9B,KAAKiC,aAAa,GAStB,MAJc,SAAVoP,GACArR,KAAKsB,IAAI,GAGNtB,MAGXkS,MAAO,SAAUb,GACb,MAAOrR,MAAKyR,QAAQJ,GAAOjH,IAAIiH,EAAMhM,QAAQ,MAAO,KAAM,GAAG+L,SAAS,KAAM,IAGhFe,QAAS,SAAUvO,EAAOyN,GAEtB,MADAA,GAAyB,mBAAVA,GAAwBA,EAAQ,eACvCrR,KAAK2Q,QAAQc,QAAQJ,IAAUrM,EAAOpB,GAAO6N,QAAQJ,IAGjEe,SAAU,SAAUxO,EAAOyN,GAEvB,MADAA,GAAyB,mBAAVA,GAAwBA,EAAQ,eACvCrR,KAAK2Q,QAAQc,QAAQJ,IAAUrM,EAAOpB,GAAO6N,QAAQJ,IAGjEgB,OAAQ,SAAUzO,EAAOyN,GAErB,MADAA,GAAyB,mBAAVA,GAAwBA,EAAQ,eACvCrR,KAAK2Q,QAAQc,QAAQJ,MAAYrM,EAAOpB,GAAO6N,QAAQJ,IAGnE9D,KAAO,WACH,MAAOvN,MAAK4K,OAAS,EAAI5K,KAAKsD,GAAGgP,qBAGrC5O,YAAc,WACV,MAAOsB,GAAO2F,KAAK3K,KAAKa,OAAQb,KAAKgB,QAAU,EAAG,IAAIwC,QAG1D6G,UAAY,SAAUzG,GAClB,GAAIyG,GAAYT,GAAO5E,EAAOhF,MAAMyR,QAAQ,OAASzM,EAAOhF,MAAMyR,QAAQ,SAAW,OAAS,CAC9F,OAAgB,OAAT7N,EAAgByG,EAAYrK,KAAKoK,IAAI,IAAMxG,EAAQyG,IAG9DuC,QAAU,SAAUhJ,GAChB,GAAIzC,GAAO4I,EAAW/J,KAAM,EAAG,EAC/B,OAAgB,OAAT4D,EAAgBzC,EAAOnB,KAAKoK,IAAI,IAAsB,GAAhBxG,EAAQzC,KAGzDA,KAAO,SAAUyC,GACb,GAAIzC,GAAOnB,KAAKE,OAAOiB,KAAKnB,KAC5B,OAAgB,OAAT4D,EAAgBzC,EAAOnB,KAAKoK,IAAI,IAAsB,GAAhBxG,EAAQzC,KAMzDjB,KAAO,SAAUsE,GACb,MAAIA,KAAQ/E,EACDO,KAAKkF,OAEZlF,KAAKkF,MAAQL,EAAkBL,GACxBxE,QAmBdyC,EAAI,EAAGA,EAAI2I,EAAuBnI,OAAQR,IAC3CgI,EAAoBW,EAAuB3I,GAAG2E,cAAc/B,QAAQ,KAAM,IAAK+F,EAAuB3I,GAI1GgI,GAAoB,OAAQ,YAG5BzF,EAAOC,GAAG5D,KAAO2D,EAAOC,GAAG3D,IAC3B0D,EAAOC,GAAG/D,MAAQ8D,EAAOC,GAAG9D,KAC5B6D,EAAOC,GAAGsN,SAAWvN,EAAOC,GAAG2H,QAO/B5H,EAAOvE,SAASwE,GAAKzE,EAASsD,WAC1B5C,MAAQ,WACJ,MAAOqB,GAASvC,KAAKqB,OAAS,IAGlCuP,QAAU,WACN,MAAO5Q,MAAKoC,cACG,MAAbpC,KAAKqC,MACU,OAAfrC,KAAKsC,SAGXsP,SAAW,SAAUY,GACjB,GAAIC,IAAczS,KACdgD,EAAS2G,EAAa8I,GAAaD,EAAYxS,KAAKE,OAMxD,OAJIsS,KACAxP,EAAShD,KAAKE,OAAO0P,WAAW6C,EAAYzP,IAGzChD,KAAKE,OAAO6P,WAAW/M,IAGlC9C,KAAO8E,EAAOC,GAAG/E,KAerB,KAAKuC,IAAK6I,IACFA,GAAuB5I,eAAeD,KACtCqI,EAAqBrI,EAAG6I,GAAuB7I,IAC/CoI,EAAmBpI,EAAE2E,eAI7B0D,GAAqB,QAAS,QAS9B9F,EAAO9E,KAAK,MACRC,QAAU,SAAUwC,GAChB,GAAIH,GAAIG,EAAS,GACbK,EAAqC,OAAvBL,EAAS,IAAM,IAAa,KACnC,IAANH,EAAW,KACL,IAANA,EAAW,KACL,IAANA,EAAW,KAAO,IACvB,OAAOG,GAASK,KAWpB8B,IACAmG,OAAOC,QAAUlG,GAGA,mBAAV0N,SAIP1S,KAAa,OAAIgF,GAGC,kBAAX2N,SAAyBA,OAAOC,KACvCD,OAAO,YAAc,WACjB,MAAO3N,OAGhBjF,KAAKC","sourcesContent":["// moment.js\n// version : 2.0.0\n// author : Tim Wood\n// license : MIT\n// momentjs.com\n\n(function (undefined) {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var moment,\n        VERSION = \"2.0.0\",\n        round = Math.round, i,\n        // internal storage for language config files\n        languages = {},\n\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports),\n\n        // ASP.NET json date format regex\n        aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i,\n\n        // format tokens\n        formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LT|LL?L?L?|l{1,4})/g,\n\n        // parsing tokens\n        parseMultipleFormatChunker = /([0-9a-zA-Z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)/gi,\n\n        // parsing token regexes\n        parseTokenOneOrTwoDigits = /\\d\\d?/, // 0 - 99\n        parseTokenOneToThreeDigits = /\\d{1,3}/, // 0 - 999\n        parseTokenThreeDigits = /\\d{3}/, // 000 - 999\n        parseTokenFourDigits = /\\d{1,4}/, // 0 - 9999\n        parseTokenSixDigits = /[+\\-]?\\d{1,6}/, // -999,999 - 999,999\n        parseTokenWord = /[0-9]*[a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF]+\\s*?[\\u0600-\\u06FF]+/i, // any word (or two) characters or numbers including two word month in arabic.\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i, // +00:00 -00:00 +0000 -0000 or Z\n        parseTokenT = /T/i, // T (ISO seperator)\n        parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n\n        // preliminary iso regex\n        // 0000-00-00 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000\n        isoRegex = /^\\s*\\d{4}-\\d\\d-\\d\\d((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d\\d?\\d?)?)?)?)?([\\+\\-]\\d\\d:?\\d\\d)?)?/,\n        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',\n\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.S', /(T| )\\d\\d:\\d\\d:\\d\\d\\.\\d{1,3}/],\n            ['HH:mm:ss', /(T| )\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /(T| )\\d\\d:\\d\\d/],\n            ['HH', /(T| )\\d\\d/]\n        ],\n\n        // timezone chunker \"+10:00\" > [\"10\", \"00\"] or \"-1530\" > [\"-15\", \"30\"]\n        parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi,\n\n        // getter and setter names\n        proxyGettersAndSetters = 'Month|Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),\n        unitMillisecondFactors = {\n            'Milliseconds' : 1,\n            'Seconds' : 1e3,\n            'Minutes' : 6e4,\n            'Hours' : 36e5,\n            'Days' : 864e5,\n            'Months' : 2592e6,\n            'Years' : 31536e6\n        },\n\n        // format function strings\n        formatFunctions = {},\n\n        // tokens to ordinalize and pad\n        ordinalizeTokens = 'DDD w W M D d'.split(' '),\n        paddedTokens = 'M D H h m s w W'.split(' '),\n\n        formatTokenFunctions = {\n            M    : function () {\n                return this.month() + 1;\n            },\n            MMM  : function (format) {\n                return this.lang().monthsShort(this, format);\n            },\n            MMMM : function (format) {\n                return this.lang().months(this, format);\n            },\n            D    : function () {\n                return this.date();\n            },\n            DDD  : function () {\n                return this.dayOfYear();\n            },\n            d    : function () {\n                return this.day();\n            },\n            dd   : function (format) {\n                return this.lang().weekdaysMin(this, format);\n            },\n            ddd  : function (format) {\n                return this.lang().weekdaysShort(this, format);\n            },\n            dddd : function (format) {\n                return this.lang().weekdays(this, format);\n            },\n            w    : function () {\n                return this.week();\n            },\n            W    : function () {\n                return this.isoWeek();\n            },\n            YY   : function () {\n                return leftZeroFill(this.year() % 100, 2);\n            },\n            YYYY : function () {\n                return leftZeroFill(this.year(), 4);\n            },\n            YYYYY : function () {\n                return leftZeroFill(this.year(), 5);\n            },\n            a    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), true);\n            },\n            A    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), false);\n            },\n            H    : function () {\n                return this.hours();\n            },\n            h    : function () {\n                return this.hours() % 12 || 12;\n            },\n            m    : function () {\n                return this.minutes();\n            },\n            s    : function () {\n                return this.seconds();\n            },\n            S    : function () {\n                return ~~(this.milliseconds() / 100);\n            },\n            SS   : function () {\n                return leftZeroFill(~~(this.milliseconds() / 10), 2);\n            },\n            SSS  : function () {\n                return leftZeroFill(this.milliseconds(), 3);\n            },\n            Z    : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(~~(a / 60), 2) + \":\" + leftZeroFill(~~a % 60, 2);\n            },\n            ZZ   : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(~~(10 * a / 6), 4);\n            },\n            X    : function () {\n                return this.unix();\n            }\n        };\n\n    function padToken(func, count) {\n        return function (a) {\n            return leftZeroFill(func.call(this, a), count);\n        };\n    }\n    function ordinalizeToken(func) {\n        return function (a) {\n            return this.lang().ordinal(func.call(this, a));\n        };\n    }\n\n    while (ordinalizeTokens.length) {\n        i = ordinalizeTokens.pop();\n        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i]);\n    }\n    while (paddedTokens.length) {\n        i = paddedTokens.pop();\n        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);\n    }\n    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    function Language() {\n\n    }\n\n    // Moment prototype object\n    function Moment(config) {\n        extend(this, config);\n    }\n\n    // Duration Constructor\n    function Duration(duration) {\n        var data = this._data = {},\n            years = duration.years || duration.year || duration.y || 0,\n            months = duration.months || duration.month || duration.M || 0,\n            weeks = duration.weeks || duration.week || duration.w || 0,\n            days = duration.days || duration.day || duration.d || 0,\n            hours = duration.hours || duration.hour || duration.h || 0,\n            minutes = duration.minutes || duration.minute || duration.m || 0,\n            seconds = duration.seconds || duration.second || duration.s || 0,\n            milliseconds = duration.milliseconds || duration.millisecond || duration.ms || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 36e5; // 1000 * 60 * 60\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = months +\n            years * 12;\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n        seconds += absRound(milliseconds / 1000);\n\n        data.seconds = seconds % 60;\n        minutes += absRound(seconds / 60);\n\n        data.minutes = minutes % 60;\n        hours += absRound(minutes / 60);\n\n        data.hours = hours % 24;\n        days += absRound(hours / 24);\n\n        days += weeks * 7;\n        data.days = days % 30;\n\n        months += absRound(days / 30);\n\n        data.months = months % 12;\n        years += absRound(months / 12);\n\n        data.years = years;\n    }\n\n\n    /************************************\n        Helpers\n    ************************************/\n\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (b.hasOwnProperty(i)) {\n                a[i] = b[i];\n            }\n        }\n        return a;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.ceil(number);\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    // left zero fill a number\n    // see http://jsperf.com/left-zero-filling for performance comparison\n    function leftZeroFill(number, targetLength) {\n        var output = number + '';\n        while (output.length < targetLength) {\n            output = '0' + output;\n        }\n        return output;\n    }\n\n    // helper function for _.addTime and _.subtractTime\n    function addOrSubtractDurationFromMoment(mom, duration, isAdding) {\n        var ms = duration._milliseconds,\n            d = duration._days,\n            M = duration._months,\n            currentDate;\n\n        if (ms) {\n            mom._d.setTime(+mom + ms * isAdding);\n        }\n        if (d) {\n            mom.date(mom.date() + d * isAdding);\n        }\n        if (M) {\n            currentDate = mom.date();\n            mom.date(1)\n                .month(mom.month() + M * isAdding)\n                .date(Math.min(currentDate, mom.daysInMonth()));\n        }\n    }\n\n    // check if is an array\n    function isArray(input) {\n        return Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (~~array1[i] !== ~~array2[i]) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n\n    /************************************\n        Languages\n    ************************************/\n\n\n    Language.prototype = {\n        set : function (config) {\n            var prop, i;\n            for (i in config) {\n                prop = config[i];\n                if (typeof prop === 'function') {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        },\n\n        _months : \"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),\n        months : function (m) {\n            return this._months[m.month()];\n        },\n\n        _monthsShort : \"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),\n        monthsShort : function (m) {\n            return this._monthsShort[m.month()];\n        },\n\n        monthsParse : function (monthName) {\n            var i, mom, regex, output;\n\n            if (!this._monthsParse) {\n                this._monthsParse = [];\n            }\n\n            for (i = 0; i < 12; i++) {\n                // make the regex if we don't have it already\n                if (!this._monthsParse[i]) {\n                    mom = moment([2000, i]);\n                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n                }\n                // test the regex\n                if (this._monthsParse[i].test(monthName)) {\n                    return i;\n                }\n            }\n        },\n\n        _weekdays : \"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),\n        weekdays : function (m) {\n            return this._weekdays[m.day()];\n        },\n\n        _weekdaysShort : \"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),\n        weekdaysShort : function (m) {\n            return this._weekdaysShort[m.day()];\n        },\n\n        _weekdaysMin : \"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),\n        weekdaysMin : function (m) {\n            return this._weekdaysMin[m.day()];\n        },\n\n        _longDateFormat : {\n            LT : \"h:mm A\",\n            L : \"MM/DD/YYYY\",\n            LL : \"MMMM D YYYY\",\n            LLL : \"MMMM D YYYY LT\",\n            LLLL : \"dddd, MMMM D YYYY LT\"\n        },\n        longDateFormat : function (key) {\n            var output = this._longDateFormat[key];\n            if (!output && this._longDateFormat[key.toUpperCase()]) {\n                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {\n                    return val.slice(1);\n                });\n                this._longDateFormat[key] = output;\n            }\n            return output;\n        },\n\n        meridiem : function (hours, minutes, isLower) {\n            if (hours > 11) {\n                return isLower ? 'pm' : 'PM';\n            } else {\n                return isLower ? 'am' : 'AM';\n            }\n        },\n\n        _calendar : {\n            sameDay : '[Today at] LT',\n            nextDay : '[Tomorrow at] LT',\n            nextWeek : 'dddd [at] LT',\n            lastDay : '[Yesterday at] LT',\n            lastWeek : '[last] dddd [at] LT',\n            sameElse : 'L'\n        },\n        calendar : function (key, mom) {\n            var output = this._calendar[key];\n            return typeof output === 'function' ? output.apply(mom) : output;\n        },\n\n        _relativeTime : {\n            future : \"in %s\",\n            past : \"%s ago\",\n            s : \"a few seconds\",\n            m : \"a minute\",\n            mm : \"%d minutes\",\n            h : \"an hour\",\n            hh : \"%d hours\",\n            d : \"a day\",\n            dd : \"%d days\",\n            M : \"a month\",\n            MM : \"%d months\",\n            y : \"a year\",\n            yy : \"%d years\"\n        },\n        relativeTime : function (number, withoutSuffix, string, isFuture) {\n            var output = this._relativeTime[string];\n            return (typeof output === 'function') ?\n                output(number, withoutSuffix, string, isFuture) :\n                output.replace(/%d/i, number);\n        },\n        pastFuture : function (diff, output) {\n            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);\n        },\n\n        ordinal : function (number) {\n            return this._ordinal.replace(\"%d\", number);\n        },\n        _ordinal : \"%d\",\n\n        preparse : function (string) {\n            return string;\n        },\n\n        postformat : function (string) {\n            return string;\n        },\n\n        week : function (mom) {\n            return weekOfYear(mom, this._week.dow, this._week.doy);\n        },\n        _week : {\n            dow : 0, // Sunday is the first day of the week.\n            doy : 6  // The week that contains Jan 1st is the first week of the year.\n        }\n    };\n\n    // Loads a language definition into the `languages` cache.  The function\n    // takes a key and optionally values.  If not in the browser and no values\n    // are provided, it will load the language file module.  As a convenience,\n    // this function also returns the language values.\n    function loadLang(key, values) {\n        values.abbr = key;\n        if (!languages[key]) {\n            languages[key] = new Language();\n        }\n        languages[key].set(values);\n        return languages[key];\n    }\n\n    // Determines which language definition to use and returns it.\n    //\n    // With no parameters, it will return the global language.  If you\n    // pass in a language key, such as 'en', it will return the\n    // definition for 'en', so long as 'en' has already been loaded using\n    // moment.lang.\n    function getLangDefinition(key) {\n        if (!key) {\n            return moment.fn._lang;\n        }\n        if (!languages[key] && hasModule) {\n            require('./lang/' + key);\n        }\n        return languages[key];\n    }\n\n\n    /************************************\n        Formatting\n    ************************************/\n\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[.*\\]/)) {\n            return input.replace(/^\\[|\\]$/g, \"\");\n        }\n        return input.replace(/\\\\/g, \"\");\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = \"\";\n            for (i = 0; i < length; i++) {\n                output += typeof array[i].call === 'function' ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return m.lang().longDateFormat(input) || input;\n        }\n\n        while (i-- && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n        }\n\n        if (!formatFunctions[format]) {\n            formatFunctions[format] = makeFormatFunction(format);\n        }\n\n        return formatFunctions[format](m);\n    }\n\n\n    /************************************\n        Parsing\n    ************************************/\n\n\n    // get the regex to find the next token\n    function getParseRegexForToken(token) {\n        switch (token) {\n        case 'DDDD':\n            return parseTokenThreeDigits;\n        case 'YYYY':\n            return parseTokenFourDigits;\n        case 'YYYYY':\n            return parseTokenSixDigits;\n        case 'S':\n        case 'SS':\n        case 'SSS':\n        case 'DDD':\n            return parseTokenOneToThreeDigits;\n        case 'MMM':\n        case 'MMMM':\n        case 'dd':\n        case 'ddd':\n        case 'dddd':\n        case 'a':\n        case 'A':\n            return parseTokenWord;\n        case 'X':\n            return parseTokenTimestampMs;\n        case 'Z':\n        case 'ZZ':\n            return parseTokenTimezone;\n        case 'T':\n            return parseTokenT;\n        case 'MM':\n        case 'DD':\n        case 'YY':\n        case 'HH':\n        case 'hh':\n        case 'mm':\n        case 'ss':\n        case 'M':\n        case 'D':\n        case 'd':\n        case 'H':\n        case 'h':\n        case 'm':\n        case 's':\n            return parseTokenOneOrTwoDigits;\n        default :\n            return new RegExp(token.replace('\\\\', ''));\n        }\n    }\n\n    // function to convert string input to date\n    function addTimeToArrayFromToken(token, input, config) {\n        var a, b,\n            datePartArray = config._a;\n\n        switch (token) {\n        // MONTH\n        case 'M' : // fall through to MM\n        case 'MM' :\n            datePartArray[1] = (input == null) ? 0 : ~~input - 1;\n            break;\n        case 'MMM' : // fall through to MMMM\n        case 'MMMM' :\n            a = getLangDefinition(config._l).monthsParse(input);\n            // if we didn't find a month name, mark the date as invalid.\n            if (a != null) {\n                datePartArray[1] = a;\n            } else {\n                config._isValid = false;\n            }\n            break;\n        // DAY OF MONTH\n        case 'D' : // fall through to DDDD\n        case 'DD' : // fall through to DDDD\n        case 'DDD' : // fall through to DDDD\n        case 'DDDD' :\n            if (input != null) {\n                datePartArray[2] = ~~input;\n            }\n            break;\n        // YEAR\n        case 'YY' :\n            datePartArray[0] = ~~input + (~~input > 68 ? 1900 : 2000);\n            break;\n        case 'YYYY' :\n        case 'YYYYY' :\n            datePartArray[0] = ~~input;\n            break;\n        // AM / PM\n        case 'a' : // fall through to A\n        case 'A' :\n            config._isPm = ((input + '').toLowerCase() === 'pm');\n            break;\n        // 24 HOUR\n        case 'H' : // fall through to hh\n        case 'HH' : // fall through to hh\n        case 'h' : // fall through to hh\n        case 'hh' :\n            datePartArray[3] = ~~input;\n            break;\n        // MINUTE\n        case 'm' : // fall through to mm\n        case 'mm' :\n            datePartArray[4] = ~~input;\n            break;\n        // SECOND\n        case 's' : // fall through to ss\n        case 'ss' :\n            datePartArray[5] = ~~input;\n            break;\n        // MILLISECOND\n        case 'S' :\n        case 'SS' :\n        case 'SSS' :\n            datePartArray[6] = ~~ (('0.' + input) * 1000);\n            break;\n        // UNIX TIMESTAMP WITH MS\n        case 'X':\n            config._d = new Date(parseFloat(input) * 1000);\n            break;\n        // TIMEZONE\n        case 'Z' : // fall through to ZZ\n        case 'ZZ' :\n            config._useUTC = true;\n            a = (input + '').match(parseTimezoneChunker);\n            if (a && a[1]) {\n                config._tzh = ~~a[1];\n            }\n            if (a && a[2]) {\n                config._tzm = ~~a[2];\n            }\n            // reverse offsets\n            if (a && a[0] === '+') {\n                config._tzh = -config._tzh;\n                config._tzm = -config._tzm;\n            }\n            break;\n        }\n\n        // if the input is null, the date is not valid\n        if (input == null) {\n            config._isValid = false;\n        }\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function dateFromArray(config) {\n        var i, date, input = [];\n\n        if (config._d) {\n            return;\n        }\n\n        for (i = 0; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // add the offsets to the time to be parsed so that we can have a clean array for checking isValid\n        input[3] += config._tzh || 0;\n        input[4] += config._tzm || 0;\n\n        date = new Date(0);\n\n        if (config._useUTC) {\n            date.setUTCFullYear(input[0], input[1], input[2]);\n            date.setUTCHours(input[3], input[4], input[5], input[6]);\n        } else {\n            date.setFullYear(input[0], input[1], input[2]);\n            date.setHours(input[3], input[4], input[5], input[6]);\n        }\n\n        config._d = date;\n    }\n\n    // date from string and format string\n    function makeDateFromStringAndFormat(config) {\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var tokens = config._f.match(formattingTokens),\n            string = config._i,\n            i, parsedInput;\n\n        config._a = [];\n\n        for (i = 0; i < tokens.length; i++) {\n            parsedInput = (getParseRegexForToken(tokens[i]).exec(string) || [])[0];\n            if (parsedInput) {\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n            }\n            // don't parse if its not a known token\n            if (formatTokenFunctions[tokens[i]]) {\n                addTimeToArrayFromToken(tokens[i], parsedInput, config);\n            }\n        }\n        // handle am pm\n        if (config._isPm && config._a[3] < 12) {\n            config._a[3] += 12;\n        }\n        // if is 12 am, change hours to 0\n        if (config._isPm === false && config._a[3] === 12) {\n            config._a[3] = 0;\n        }\n        // return\n        dateFromArray(config);\n    }\n\n    // date from string and array of format strings\n    function makeDateFromStringAndArray(config) {\n        var tempConfig,\n            tempMoment,\n            bestMoment,\n\n            scoreToBeat = 99,\n            i,\n            currentDate,\n            currentScore;\n\n        while (config._f.length) {\n            tempConfig = extend({}, config);\n            tempConfig._f = config._f.pop();\n            makeDateFromStringAndFormat(tempConfig);\n            tempMoment = new Moment(tempConfig);\n\n            if (tempMoment.isValid()) {\n                bestMoment = tempMoment;\n                break;\n            }\n\n            currentScore = compareArrays(tempConfig._a, tempMoment.toArray());\n\n            if (currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempMoment;\n            }\n        }\n\n        extend(config, bestMoment);\n    }\n\n    // date from iso format\n    function makeDateFromString(config) {\n        var i,\n            string = config._i;\n        if (isoRegex.exec(string)) {\n            config._f = 'YYYY-MM-DDT';\n            for (i = 0; i < 4; i++) {\n                if (isoTimes[i][1].exec(string)) {\n                    config._f += isoTimes[i][0];\n                    break;\n                }\n            }\n            if (parseTokenTimezone.exec(string)) {\n                config._f += \" Z\";\n            }\n            makeDateFromStringAndFormat(config);\n        } else {\n            config._d = new Date(string);\n        }\n    }\n\n    function makeDateFromInput(config) {\n        var input = config._i,\n            matched = aspNetJsonRegex.exec(input);\n\n        if (input === undefined) {\n            config._d = new Date();\n        } else if (matched) {\n            config._d = new Date(+matched[1]);\n        } else if (typeof input === 'string') {\n            makeDateFromString(config);\n        } else if (isArray(input)) {\n            config._a = input.slice(0);\n            dateFromArray(config);\n        } else {\n            config._d = input instanceof Date ? new Date(+input) : new Date(input);\n        }\n    }\n\n\n    /************************************\n        Relative Time\n    ************************************/\n\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {\n        return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime(milliseconds, withoutSuffix, lang) {\n        var seconds = round(Math.abs(milliseconds) / 1000),\n            minutes = round(seconds / 60),\n            hours = round(minutes / 60),\n            days = round(hours / 24),\n            years = round(days / 365),\n            args = seconds < 45 && ['s', seconds] ||\n                minutes === 1 && ['m'] ||\n                minutes < 45 && ['mm', minutes] ||\n                hours === 1 && ['h'] ||\n                hours < 22 && ['hh', hours] ||\n                days === 1 && ['d'] ||\n                days <= 25 && ['dd', days] ||\n                days <= 45 && ['M'] ||\n                days < 345 && ['MM', round(days / 30)] ||\n                years === 1 && ['y'] || ['yy', years];\n        args[2] = withoutSuffix;\n        args[3] = milliseconds > 0;\n        args[4] = lang;\n        return substituteTimeAgo.apply({}, args);\n    }\n\n\n    /************************************\n        Week of Year\n    ************************************/\n\n\n    // firstDayOfWeek       0 = sun, 6 = sat\n    //                      the day of the week that starts the week\n    //                      (usually sunday or monday)\n    // firstDayOfWeekOfYear 0 = sun, 6 = sat\n    //                      the first week is the week that contains the first\n    //                      of this day of the week\n    //                      (eg. ISO weeks use thursday (4))\n    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n        var end = firstDayOfWeekOfYear - firstDayOfWeek,\n            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day();\n\n\n        if (daysToDayOfWeek > end) {\n            daysToDayOfWeek -= 7;\n        }\n\n        if (daysToDayOfWeek < end - 7) {\n            daysToDayOfWeek += 7;\n        }\n\n        return Math.ceil(moment(mom).add('d', daysToDayOfWeek).dayOfYear() / 7);\n    }\n\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    function makeMoment(config) {\n        var input = config._i,\n            format = config._f;\n\n        if (input === null || input === '') {\n            return null;\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = getLangDefinition().preparse(input);\n        }\n\n        if (moment.isMoment(input)) {\n            config = extend({}, input);\n            config._d = new Date(+input._d);\n        } else if (format) {\n            if (isArray(format)) {\n                makeDateFromStringAndArray(config);\n            } else {\n                makeDateFromStringAndFormat(config);\n            }\n        } else {\n            makeDateFromInput(config);\n        }\n\n        return new Moment(config);\n    }\n\n    moment = function (input, format, lang) {\n        return makeMoment({\n            _i : input,\n            _f : format,\n            _l : lang,\n            _isUTC : false\n        });\n    };\n\n    // creating with utc\n    moment.utc = function (input, format, lang) {\n        return makeMoment({\n            _useUTC : true,\n            _isUTC : true,\n            _l : lang,\n            _i : input,\n            _f : format\n        });\n    };\n\n    // creating with unix timestamp (in seconds)\n    moment.unix = function (input) {\n        return moment(input * 1000);\n    };\n\n    // duration\n    moment.duration = function (input, key) {\n        var isDuration = moment.isDuration(input),\n            isNumber = (typeof input === 'number'),\n            duration = (isDuration ? input._data : (isNumber ? {} : input)),\n            ret;\n\n        if (isNumber) {\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration && input.hasOwnProperty('_lang')) {\n            ret._lang = input._lang;\n        }\n\n        return ret;\n    };\n\n    // version number\n    moment.version = VERSION;\n\n    // default format\n    moment.defaultFormat = isoFormat;\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    moment.lang = function (key, values) {\n        var i;\n\n        if (!key) {\n            return moment.fn._lang._abbr;\n        }\n        if (values) {\n            loadLang(key, values);\n        } else if (!languages[key]) {\n            getLangDefinition(key);\n        }\n        moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);\n    };\n\n    // returns language data\n    moment.langData = function (key) {\n        if (key && key._lang && key._lang._abbr) {\n            key = key._lang._abbr;\n        }\n        return getLangDefinition(key);\n    };\n\n    // compare moment object\n    moment.isMoment = function (obj) {\n        return obj instanceof Moment;\n    };\n\n    // for typechecking Duration objects\n    moment.isDuration = function (obj) {\n        return obj instanceof Duration;\n    };\n\n\n    /************************************\n        Moment Prototype\n    ************************************/\n\n\n    moment.fn = Moment.prototype = {\n\n        clone : function () {\n            return moment(this);\n        },\n\n        valueOf : function () {\n            return +this._d;\n        },\n\n        unix : function () {\n            return Math.floor(+this._d / 1000);\n        },\n\n        toString : function () {\n            return this.format(\"ddd MMM DD YYYY HH:mm:ss [GMT]ZZ\");\n        },\n\n        toDate : function () {\n            return this._d;\n        },\n\n        toJSON : function () {\n            return moment.utc(this).format('YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        },\n\n        toArray : function () {\n            var m = this;\n            return [\n                m.year(),\n                m.month(),\n                m.date(),\n                m.hours(),\n                m.minutes(),\n                m.seconds(),\n                m.milliseconds()\n            ];\n        },\n\n        isValid : function () {\n            if (this._isValid == null) {\n                if (this._a) {\n                    this._isValid = !compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray());\n                } else {\n                    this._isValid = !isNaN(this._d.getTime());\n                }\n            }\n            return !!this._isValid;\n        },\n\n        utc : function () {\n            this._isUTC = true;\n            return this;\n        },\n\n        local : function () {\n            this._isUTC = false;\n            return this;\n        },\n\n        format : function (inputString) {\n            var output = formatMoment(this, inputString || moment.defaultFormat);\n            return this.lang().postformat(output);\n        },\n\n        add : function (input, val) {\n            var dur;\n            // switch args to support add('s', 1) and add(1, 's')\n            if (typeof input === 'string') {\n                dur = moment.duration(+val, input);\n            } else {\n                dur = moment.duration(input, val);\n            }\n            addOrSubtractDurationFromMoment(this, dur, 1);\n            return this;\n        },\n\n        subtract : function (input, val) {\n            var dur;\n            // switch args to support subtract('s', 1) and subtract(1, 's')\n            if (typeof input === 'string') {\n                dur = moment.duration(+val, input);\n            } else {\n                dur = moment.duration(input, val);\n            }\n            addOrSubtractDurationFromMoment(this, dur, -1);\n            return this;\n        },\n\n        diff : function (input, units, asFloat) {\n            var that = this._isUTC ? moment(input).utc() : moment(input).local(),\n                zoneDiff = (this.zone() - that.zone()) * 6e4,\n                diff, output;\n\n            if (units) {\n                // standardize on singular form\n                units = units.replace(/s$/, '');\n            }\n\n            if (units === 'year' || units === 'month') {\n                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2\n                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());\n                output += ((this - moment(this).startOf('month')) - (that - moment(that).startOf('month'))) / diff;\n                if (units === 'year') {\n                    output = output / 12;\n                }\n            } else {\n                diff = (this - that) - zoneDiff;\n                output = units === 'second' ? diff / 1e3 : // 1000\n                    units === 'minute' ? diff / 6e4 : // 1000 * 60\n                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60\n                    units === 'day' ? diff / 864e5 : // 1000 * 60 * 60 * 24\n                    units === 'week' ? diff / 6048e5 : // 1000 * 60 * 60 * 24 * 7\n                    diff;\n            }\n            return asFloat ? output : absRound(output);\n        },\n\n        from : function (time, withoutSuffix) {\n            return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);\n        },\n\n        fromNow : function (withoutSuffix) {\n            return this.from(moment(), withoutSuffix);\n        },\n\n        calendar : function () {\n            var diff = this.diff(moment().startOf('day'), 'days', true),\n                format = diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n            return this.format(this.lang().calendar(format, this));\n        },\n\n        isLeapYear : function () {\n            var year = this.year();\n            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n        },\n\n        isDST : function () {\n            return (this.zone() < moment([this.year()]).zone() ||\n                this.zone() < moment([this.year(), 5]).zone());\n        },\n\n        day : function (input) {\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n            return input == null ? day :\n                this.add({ d : input - day });\n        },\n\n        startOf: function (units) {\n            units = units.replace(/s$/, '');\n            // the following switch intentionally omits break keywords\n            // to utilize falling through the cases.\n            switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'day':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n                /* falls through */\n            }\n\n            // weeks are a special case\n            if (units === 'week') {\n                this.day(0);\n            }\n\n            return this;\n        },\n\n        endOf: function (units) {\n            return this.startOf(units).add(units.replace(/s?$/, 's'), 1).subtract('ms', 1);\n        },\n\n        isAfter: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) > +moment(input).startOf(units);\n        },\n\n        isBefore: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) < +moment(input).startOf(units);\n        },\n\n        isSame: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) === +moment(input).startOf(units);\n        },\n\n        zone : function () {\n            return this._isUTC ? 0 : this._d.getTimezoneOffset();\n        },\n\n        daysInMonth : function () {\n            return moment.utc([this.year(), this.month() + 1, 0]).date();\n        },\n\n        dayOfYear : function (input) {\n            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;\n            return input == null ? dayOfYear : this.add(\"d\", (input - dayOfYear));\n        },\n\n        isoWeek : function (input) {\n            var week = weekOfYear(this, 1, 4);\n            return input == null ? week : this.add(\"d\", (input - week) * 7);\n        },\n\n        week : function (input) {\n            var week = this.lang().week(this);\n            return input == null ? week : this.add(\"d\", (input - week) * 7);\n        },\n\n        // If passed a language key, it will set the language for this\n        // instance.  Otherwise, it will return the language configuration\n        // variables for this instance.\n        lang : function (key) {\n            if (key === undefined) {\n                return this._lang;\n            } else {\n                this._lang = getLangDefinition(key);\n                return this;\n            }\n        }\n    };\n\n    // helper for adding shortcuts\n    function makeGetterAndSetter(name, key) {\n        moment.fn[name] = moment.fn[name + 's'] = function (input) {\n            var utc = this._isUTC ? 'UTC' : '';\n            if (input != null) {\n                this._d['set' + utc + key](input);\n                return this;\n            } else {\n                return this._d['get' + utc + key]();\n            }\n        };\n    }\n\n    // loop through and add shortcuts (Month, Date, Hours, Minutes, Seconds, Milliseconds)\n    for (i = 0; i < proxyGettersAndSetters.length; i ++) {\n        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase().replace(/s$/, ''), proxyGettersAndSetters[i]);\n    }\n\n    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')\n    makeGetterAndSetter('year', 'FullYear');\n\n    // add plural methods\n    moment.fn.days = moment.fn.day;\n    moment.fn.weeks = moment.fn.week;\n    moment.fn.isoWeeks = moment.fn.isoWeek;\n\n    /************************************\n        Duration Prototype\n    ************************************/\n\n\n    moment.duration.fn = Duration.prototype = {\n        weeks : function () {\n            return absRound(this.days() / 7);\n        },\n\n        valueOf : function () {\n            return this._milliseconds +\n              this._days * 864e5 +\n              this._months * 2592e6;\n        },\n\n        humanize : function (withSuffix) {\n            var difference = +this,\n                output = relativeTime(difference, !withSuffix, this.lang());\n\n            if (withSuffix) {\n                output = this.lang().pastFuture(difference, output);\n            }\n\n            return this.lang().postformat(output);\n        },\n\n        lang : moment.fn.lang\n    };\n\n    function makeDurationGetter(name) {\n        moment.duration.fn[name] = function () {\n            return this._data[name];\n        };\n    }\n\n    function makeDurationAsGetter(name, factor) {\n        moment.duration.fn['as' + name] = function () {\n            return +this / factor;\n        };\n    }\n\n    for (i in unitMillisecondFactors) {\n        if (unitMillisecondFactors.hasOwnProperty(i)) {\n            makeDurationAsGetter(i, unitMillisecondFactors[i]);\n            makeDurationGetter(i.toLowerCase());\n        }\n    }\n\n    makeDurationAsGetter('Weeks', 6048e5);\n\n\n    /************************************\n        Default Lang\n    ************************************/\n\n\n    // Set default language, other languages will inherit from English.\n    moment.lang('en', {\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n\n    /************************************\n        Exposing Moment\n    ************************************/\n\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = moment;\n    }\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `moment` as a global object via a string identifier,\n        // for Closure Compiler \"advanced\" mode\n        this['moment'] = moment;\n    }\n    /*global define:false */\n    if (typeof define === \"function\" && define.amd) {\n        define(\"moment\", [], function () {\n            return moment;\n        });\n    }\n}).call(this);\n"]}