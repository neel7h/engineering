{"version":3,"file":"numeral.min.js","sources":["numeral.js"],"names":["Numeral","number","this","_n","toFixed","value","precision","optionals","output","power","Math","pow","round","optionalsRegExp","RegExp","replace","formatNumeral","n","format","indexOf","formatCurrency","formatPercentage","formatTime","formatNumber","unformatNumeral","string","unformatTime","zeroFormat","stringOriginal","languages","currentLanguage","delimiters","decimal","thousandRegExp","abbreviations","thousand","currency","symbol","millionRegExp","million","billionRegExp","billion","trillionRegExp","trillion","prefixes","bytesMultiplier","length","match","Number","ceil","prependSymbol","space","split","splice","join","hours","floor","minutes","seconds","timeArray","negP","optDec","abbr","bytes","ord","abs","slice","min","max","ordinal","w","toString","thousands","d","neg","loadLanguage","key","values","numeral","VERSION","hasModule","module","exports","input","isNumeral","version","obj","language","Error","b","fn","prototype","clone","inputString","defaultFormat","unformat","valueOf","set","add","subtract","multiply","divide","difference","ender","define","amd","call"],"mappings":"CAQA,WAsBI,QAASA,GAASC,GACdC,KAAKC,GAAKF,EASd,QAASG,GAASC,EAAOC,EAAWC,GAChC,GACIC,GADAC,EAAQC,KAAKC,IAAI,GAAIL,EAMzB,IAFAE,GAAUE,KAAKE,MAAMP,EAAQI,GAASA,GAAOL,QAAQE,GAEjDC,EAAW,CACX,GAAIM,GAAkB,GAAIC,QAAO,OAASP,EAAY,KACtDC,GAASA,EAAOO,QAAQF,EAAiB,IAG7C,MAAOL,GAQX,QAASQ,GAAeC,EAAGC,GACvB,GAAIV,EAcJ,OAVIA,GADAU,EAAOC,QAAQ,KAAO,GACbC,EAAeH,EAAGC,GACpBA,EAAOC,QAAQ,KAAO,GACpBE,EAAiBJ,EAAGC,GACtBA,EAAOC,QAAQ,KAAO,GACpBG,EAAWL,EAAGC,GAEdK,EAAaN,EAAGC,GAQjC,QAASM,GAAiBP,EAAGQ,GACzB,GAAIA,EAAON,QAAQ,KAAO,GACtBF,EAAEd,GAAKuB,EAAaD,OAEpB,IAAIA,IAAWE,EACXV,EAAEd,GAAK,MACJ,CACH,GAAIyB,GAAiBH,CACiC,OAAlDI,EAAUC,GAAiBC,WAAWC,UACtCP,EAASA,EAAOV,QAAQ,MAAM,IAAIA,QAAQc,EAAUC,GAAiBC,WAAWC,QAAS,KAa7F,KAAK,GATDC,GAAiB,GAAInB,QAAO,YAAce,EAAUC,GAAiBI,cAAcC,SAAW,aAAeN,EAAUC,GAAiBM,SAASC,OAAS,iBAC1JC,EAAgB,GAAIxB,QAAO,YAAce,EAAUC,GAAiBI,cAAcK,QAAU,aAAeV,EAAUC,GAAiBM,SAASC,OAAS,iBACxJG,EAAgB,GAAI1B,QAAO,YAAce,EAAUC,GAAiBI,cAAcO,QAAU,aAAeZ,EAAUC,GAAiBM,SAASC,OAAS,iBACxJK,EAAiB,GAAI5B,QAAO,YAAce,EAAUC,GAAiBI,cAAcS,SAAW,aAAed,EAAUC,GAAiBM,SAASC,OAAS,iBAG1JO,GAAY,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACtDC,GAAkB,EAEbpC,EAAQ,EAAGA,GAASmC,EAASE,UAClCD,EAAmBpB,EAAON,QAAQyB,EAASnC,IAAU,GAAMC,KAAKC,IAAI,KAAMF,EAAQ,IAAK,GAD7CA,KAS9CQ,EAAEd,IAAM,EAAoB0C,EAAkB,IAAOjB,EAAemB,MAAMd,GAAmBvB,KAAKC,IAAI,GAAI,GAAK,IAAOiB,EAAemB,MAAMT,GAAkB5B,KAAKC,IAAI,GAAI,GAAK,IAAOiB,EAAemB,MAAMP,GAAkB9B,KAAKC,IAAI,GAAI,GAAK,IAAOiB,EAAemB,MAAML,GAAmBhC,KAAKC,IAAI,GAAI,IAAM,IAAOc,EAAON,QAAQ,KAAO,GAAM,IAAO,GAAK6B,QAASvB,EAAON,QAAQ,KAAO,GAAM,IAAM,IAAMM,EAAOV,QAAQ,cAAe,KAG/aE,EAAEd,GAAK,EAAoBO,KAAKuC,KAAKhC,EAAEd,IAAMc,EAAEd,GAGvD,MAAOc,GAAEd,GAGb,QAASiB,GAAgBH,EAAGC,GACxB,GAAIgC,GAAiBhC,EAAOC,QAAQ,MAAQ,GAAK,GAAO,EAGpDgC,EAAQ,EAGRjC,GAAOC,QAAQ,MAAQ,IACvBgC,EAAQ,IACRjC,EAASA,EAAOH,QAAQ,KAAM,KACvBG,EAAOC,QAAQ,MAAQ,IAC9BgC,EAAQ,IACRjC,EAASA,EAAOH,QAAQ,KAAM,KAE9BG,EAASA,EAAOH,QAAQ,IAAK,GAIjC,IAAIP,GAASQ,EAAcC,EAAGC,EAqB9B,OAlBIgC,GACI1C,EAAOW,QAAQ,KAAO,IAAMX,EAAOW,QAAQ,KAAO,IAClDX,EAASA,EAAO4C,MAAM,IACtB5C,EAAO6C,OAAO,EAAG,EAAGxB,EAAUC,GAAiBM,SAASC,OAASc,GACjE3C,EAASA,EAAO8C,KAAK,KAErB9C,EAASqB,EAAUC,GAAiBM,SAASC,OAASc,EAAQ3C,EAG9DA,EAAOW,QAAQ,KAAO,IACtBX,EAASA,EAAO4C,MAAM,IACtB5C,EAAO6C,OAAO,GAAI,EAAGF,EAAQtB,EAAUC,GAAiBM,SAASC,QACjE7B,EAASA,EAAO8C,KAAK,KAErB9C,EAASA,EAAS2C,EAAQtB,EAAUC,GAAiBM,SAASC,OAI/D7B,EAGX,QAASa,GAAkBJ,EAAGC,GAC1B,GAAIiC,GAAQ,EAERjC,GAAOC,QAAQ,MAAQ,IACvBgC,EAAQ,IACRjC,EAASA,EAAOH,QAAQ,KAAM,KAE9BG,EAASA,EAAOH,QAAQ,IAAK,IAGjCE,EAAEd,GAAY,IAAPc,EAAEd,EACT,IAAIK,GAASQ,EAAcC,EAAGC,EAQ9B,OAPIV,GAAOW,QAAQ,KAAO,IACtBX,EAASA,EAAO4C,MAAM,IACtB5C,EAAO6C,OAAO,GAAI,EAAGF,EAAQ,KAC7B3C,EAASA,EAAO8C,KAAK,KAErB9C,EAASA,EAAS2C,EAAQ,IAEvB3C,EAGX,QAASc,GAAYL,GACjB,GAAIsC,GAAQ7C,KAAK8C,MAAMvC,EAAEd,GAAG,GAAG,IAC3BsD,EAAU/C,KAAK8C,OAAOvC,EAAEd,GAAc,GAARoD,EAAa,IAAK,IAChDG,EAAUhD,KAAKE,MAAMK,EAAEd,GAAc,GAARoD,EAAa,GAAiB,GAAVE,EACrD,OAAOF,GAAQ,KAAkB,GAAVE,EAAgB,IAAMA,EAAUA,GAAW,KAAkB,GAAVC,EAAgB,IAAMA,EAAUA,GAG9G,QAAShC,GAAcD,GACnB,GAAIkC,GAAYlC,EAAO2B,MAAM,KACzBM,EAAU,CAed,OAbyB,KAArBC,EAAUb,QAEVY,GAA4C,GAAvBV,OAAOW,EAAU,IAAW,GAEjDD,GAA4C,GAAvBV,OAAOW,EAAU,IAEtCD,GAAoBV,OAAOW,EAAU,KACT,IAArBA,EAAUb,SAEjBY,GAA4C,GAAvBV,OAAOW,EAAU,IAEtCD,GAAoBV,OAAOW,EAAU,KAElCX,OAAOU,GAGlB,QAASnC,GAAcN,EAAGC,GACtB,GAAI0C,IAAO,EACPC,GAAS,EACTC,EAAO,GACPC,EAAQ,GACRC,EAAM,GACNC,EAAMvD,KAAKuD,IAAIhD,EAAEd,GAGrB,IAAa,IAATc,EAAEd,IAA2B,OAAfwB,EACd,MAAOA,EAsCP,IAnCIT,EAAOC,QAAQ,KAAO,KACtByC,GAAO,EACP1C,EAASA,EAAOgD,MAAM,EAAG,KAIzBhD,EAAOC,QAAQ,KAAO,KAElBD,EAAOC,QAAQ,MAAQ,IACvB2C,EAAO,IACP5C,EAASA,EAAOH,QAAQ,KAAM,KAE9BG,EAASA,EAAOH,QAAQ,IAAK,IAG7BkD,GAAOvD,KAAKC,IAAI,GAAI,KAEpBmD,GAAcjC,EAAUC,GAAiBI,cAAcS,SACvD1B,EAAEd,GAAKc,EAAEd,GAAKO,KAAKC,IAAI,GAAI,KACpBsD,EAAMvD,KAAKC,IAAI,GAAI,KAAOsD,GAAOvD,KAAKC,IAAI,GAAI,IAErDmD,GAAcjC,EAAUC,GAAiBI,cAAcO,QACvDxB,EAAEd,GAAKc,EAAEd,GAAKO,KAAKC,IAAI,GAAI,IACpBsD,EAAMvD,KAAKC,IAAI,GAAI,IAAMsD,GAAOvD,KAAKC,IAAI,GAAI,IAEpDmD,GAAcjC,EAAUC,GAAiBI,cAAcK,QACvDtB,EAAEd,GAAKc,EAAEd,GAAKO,KAAKC,IAAI,GAAI,IACpBsD,EAAMvD,KAAKC,IAAI,GAAI,IAAMsD,GAAOvD,KAAKC,IAAI,GAAI,KAEpDmD,GAAcjC,EAAUC,GAAiBI,cAAcC,SACvDlB,EAAEd,GAAKc,EAAEd,GAAKO,KAAKC,IAAI,GAAI,KAK/BO,EAAOC,QAAQ,KAAO,GAAI,CAEtBD,EAAOC,QAAQ,MAAQ,IACvB4C,EAAQ,IACR7C,EAASA,EAAOH,QAAQ,KAAM,KAE9BG,EAASA,EAAOH,QAAQ,IAAK,GAOjC,KAAK,GAHDoD,GACAC,EAFAxB,GAAY,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAItDnC,EAAQ,EAAGA,GAASmC,EAASE,OAAQrC,IAI1C,GAHA0D,EAAMzD,KAAKC,IAAI,KAAMF,GACrB2D,EAAM1D,KAAKC,IAAI,KAAMF,EAAM,GAEvBQ,EAAEd,IAAMgE,GAAOlD,EAAEd,GAAKiE,EAAK,CAC3BL,GAAgBnB,EAASnC,GACrB0D,EAAM,IACNlD,EAAEd,GAAKc,EAAEd,GAAKgE,EAElB,QAMRjD,EAAOC,QAAQ,KAAO,KAElBD,EAAOC,QAAQ,MAAQ,IACvB6C,EAAM,IACN9C,EAASA,EAAOH,QAAQ,KAAM,KAE9BG,EAASA,EAAOH,QAAQ,IAAK,IAGjCiD,GAAYnC,EAAUC,GAAiBuC,QAAQpD,EAAEd,KAGjDe,EAAOC,QAAQ,OAAS,KACxB0C,GAAS,EACT3C,EAASA,EAAOH,QAAQ,MAAO,KAGnC,IAAIuD,GAAIrD,EAAEd,GAAGoE,WAAWnB,MAAM,KAAK,GAC/B9C,EAAYY,EAAOkC,MAAM,KAAK,GAC9BoB,EAAYtD,EAAOC,QAAQ,KAC3BsD,EAAI,GACJC,GAAM,CAwCV,OAtCIpE,IACIA,EAAUa,QAAQ,KAAO,IACzBb,EAAYA,EAAUS,QAAQ,IAAK,IACnCT,EAAYA,EAAU8C,MAAM,KAC5BqB,EAAIrE,EAAQa,EAAEd,GAAKG,EAAU,GAAGwC,OAASxC,EAAU,GAAGwC,OAASxC,EAAU,GAAGwC,SAE5E2B,EAAIrE,EAAQa,EAAEd,GAAIG,EAAUwC,QAGhCwB,EAAIG,EAAErB,MAAM,KAAK,GAGbqB,EADAA,EAAErB,MAAM,KAAK,GAAGN,OACZjB,EAAUC,GAAiBC,WAAWC,QAAUyC,EAAErB,MAAM,KAAK,GAE7D,GAGJS,GAAiC,IAAvBb,OAAOyB,EAAEP,MAAM,MACzBO,EAAI,KAGRH,EAAIlE,EAAQa,EAAEd,GAAI,MAIlBmE,EAAEnD,QAAQ,KAAO,KACjBmD,EAAIA,EAAEJ,MAAM,GACZQ,GAAM,GAGNF,EAAY,KACZF,EAAIA,EAAEC,WAAWxD,QAAQ,0BAA2B,KAAOc,EAAUC,GAAiBC,WAAWyC,YAGzE,IAAxBtD,EAAOC,QAAQ,OACfmD,EAAI,KAGCV,GAAQc,EAAO,IAAM,MAASd,GAAQc,EAAO,IAAM,IAAMJ,EAAIG,GAAK,EAAQT,EAAM,KAAO,EAASF,EAAO,KAAO,EAAUC,EAAQ,KAAQH,GAAQc,EAAO,IAAM,IAmF9K,QAASC,GAAaC,EAAKC,GACvBhD,EAAU+C,GAAOC,EAjarB,GAAIC,GACAC,EAAU,QAEVlD,KACAC,EAAkB,KAClBH,EAAa,KAEbqD,EAA+B,mBAAXC,SAA0BA,OAAOC,OA8UzDJ,GAAU,SAAUK,GAOhB,MANIL,GAAQM,UAAUD,GAClBA,EAAQA,EAAM9E,QACN2C,OAAOmC,KACfA,EAAQ,GAGL,GAAInF,GAAQgD,OAAOmC,KAI9BL,EAAQO,QAAUN,EAGlBD,EAAQM,UAAY,SAAUE,GAC1B,MAAOA,aAAetF,IAM1B8E,EAAQS,SAAW,SAAUX,EAAKC,GAC9B,IAAKD,EACD,MAAO9C,EAGX,IAAI8C,IAAQC,EAAQ,CAChB,IAAIhD,EAAU+C,GACV,KAAM,IAAIY,OAAM,sBAAwBZ,EAE5C9C,GAAkB8C,EAOtB,OAJIC,IAAWhD,EAAU+C,KACrBD,EAAaC,EAAKC,GAGfC,GAGXA,EAAQS,SAAS,MACbxD,YACIyC,UAAW,IACXxC,QAAS,KAEbE,eACIC,SAAU,IACVI,QAAS,IACTE,QAAS,IACTE,SAAU,KAEd0B,QAAS,SAAUpE,GACf,GAAIwF,GAAIxF,EAAS,EACjB,OAAmC,QAAvBA,EAAS,IAAM,IAAa,KAC7B,IAANwF,EAAW,KACL,IAANA,EAAW,KACL,IAANA,EAAW,KAAO,MAE3BrD,UACIC,OAAQ,OAIhByC,EAAQnD,WAAa,SAAUT,GAEvBS,EADmB,gBAAb,GACOT,EAEA,MAkBrB4D,EAAQY,GAAK1F,EAAQ2F,WAEjBC,MAAQ,WACJ,MAAOd,GAAQ5E,OAGnBgB,OAAS,SAAU2E,GACf,MAAO7E,GAAcd,KAAM2F,EAAcA,EAAcf,EAAQgB,gBAGnEC,SAAW,SAAUF,GACjB,MAAOrE,GAAgBtB,KAAM2F,EAAcA,EAAcf,EAAQgB,gBAGrEzF,MAAQ,WACJ,MAAOH,MAAKC,IAGhB6F,QAAU,WACN,MAAO9F,MAAKC,IAGhB8F,IAAM,SAAU5F,GAEZ,MADAH,MAAKC,GAAK6C,OAAO3C,GACVH,MAGXgG,IAAM,SAAU7F,GAEZ,MADAH,MAAKC,GAAKD,KAAKC,GAAK6C,OAAO3C,GACpBH,MAGXiG,SAAW,SAAU9F,GAEjB,MADAH,MAAKC,GAAKD,KAAKC,GAAK6C,OAAO3C,GACpBH,MAGXkG,SAAW,SAAU/F,GAEjB,MADAH,MAAKC,GAAKD,KAAKC,GAAK6C,OAAO3C,GACpBH,MAGXmG,OAAS,SAAUhG,GAEf,MADAH,MAAKC,GAAKD,KAAKC,GAAK6C,OAAO3C,GACpBH,MAGXoG,WAAa,SAAUjG,GACnB,GAAIiG,GAAapG,KAAKC,GAAK6C,OAAO3C,EAMlC,OAJiB,GAAbiG,IACAA,GAAcA,GAGXA,IAUXtB,IACAC,OAAOC,QAAUJ,GAIA,mBAAVyB,SAIPrG,KAAc,QAAI4E,GAIA,kBAAX0B,SAAyBA,OAAOC,KACvCD,UAAW,WACP,MAAO1B,OAGhB4B,KAAKxG","sourcesContent":["/*!\n * numeral.js\n * version : 1.4.9\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function () {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var numeral,\n        VERSION = '1.4.9',\n        // internal storage for language config files\n        languages = {},\n        currentLanguage = 'en',\n        zeroFormat = null,\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Numeral prototype object\n    function Numeral (number) {\n        this._n = number;\n    }\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    function toFixed (value, precision, optionals) {\n        var power = Math.pow(10, precision),\n            output;\n\n        // Multiply up by precision, round accurately, then divide and use native toFixed():\n        output = (Math.round(value * power) / power).toFixed(precision);\n\n        if (optionals) {\n            var optionalsRegExp = new RegExp('0{1,' + optionals + '}$');\n            output = output.replace(optionalsRegExp, '');\n        }\n\n        return output;\n    }\n\n    /************************************\n        Formatting\n    ************************************/\n\n    // determine what type of formatting we need to do\n    function formatNumeral (n, format) {\n        var output;\n\n        // figure out what kind of format we are dealing with\n        if (format.indexOf('$') > -1) { // currency!!!!!\n            output = formatCurrency(n, format);\n        } else if (format.indexOf('%') > -1) { // percentage\n            output = formatPercentage(n, format);\n        } else if (format.indexOf(':') > -1) { // time\n            output = formatTime(n, format);\n        } else { // plain ol' numbers or bytes\n            output = formatNumber(n, format);\n        }\n\n        // return string\n        return output;\n    }\n\n    // revert to number\n    function unformatNumeral (n, string) {\n        if (string.indexOf(':') > -1) {\n            n._n = unformatTime(string);\n        } else {\n            if (string === zeroFormat) {\n                n._n = 0;\n            } else {\n                var stringOriginal = string;\n                if (languages[currentLanguage].delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');\n                }\n\n                // see if abbreviations are there so that we can multiply to the correct number\n                var thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$'),\n                    millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$'),\n                    billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$'),\n                    trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\n                // see if bytes are there so that we can multiply to the correct number\n                var prefixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n                    bytesMultiplier = false;\n\n                for (var power = 0; power <= prefixes.length; power++) {\n                    bytesMultiplier = (string.indexOf(prefixes[power]) > -1) ? Math.pow(1024, power + 1) : false;\n\n                    if (bytesMultiplier) {\n                        break;\n                    }\n                }\n\n                // do some math to create our number\n                n._n = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * Number(((string.indexOf('(') > -1) ? '-' : '') + string.replace(/[^0-9\\.-]+/g, ''));\n\n                // round if we are talking about bytes\n                n._n = (bytesMultiplier) ? Math.ceil(n._n) : n._n;\n            }\n        }\n        return n._n;\n    }\n\n    function formatCurrency (n, format) {\n        var prependSymbol = (format.indexOf('$') <= 1) ? true : false;\n\n        // remove $ for the moment\n        var space = '';\n\n        // check for space before or after currency\n        if (format.indexOf(' $') > -1) {\n            space = ' ';\n            format = format.replace(' $', '');\n        } else if (format.indexOf('$ ') > -1) {\n            space = ' ';\n            format = format.replace('$ ', '');\n        } else {\n            format = format.replace('$', '');\n        }\n\n        // format the number\n        var output = formatNumeral(n, format);\n\n        // position the symbol\n        if (prependSymbol) {\n            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n                output = output.split('');\n                output.splice(1, 0, languages[currentLanguage].currency.symbol + space);\n                output = output.join('');\n            } else {\n                output = languages[currentLanguage].currency.symbol + space + output;\n            }\n        } else {\n            if (output.indexOf(')') > -1) {\n                output = output.split('');\n                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);\n                output = output.join('');\n            } else {\n                output = output + space + languages[currentLanguage].currency.symbol;\n            }\n        }\n\n        return output;\n    }\n\n    function formatPercentage (n, format) {\n        var space = '';\n        // check for space before %\n        if (format.indexOf(' %') > -1) {\n            space = ' ';\n            format = format.replace(' %', '');\n        } else {\n            format = format.replace('%', '');\n        }\n\n        n._n = n._n * 100;\n        var output = formatNumeral(n, format);\n        if (output.indexOf(')') > -1 ) {\n            output = output.split('');\n            output.splice(-1, 0, space + '%');\n            output = output.join('');\n        } else {\n            output = output + space + '%';\n        }\n        return output;\n    }\n\n    function formatTime (n, format) {\n        var hours = Math.floor(n._n/60/60),\n            minutes = Math.floor((n._n - (hours * 60 * 60))/60),\n            seconds = Math.round(n._n - (hours * 60 * 60) - (minutes * 60));\n        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n    }\n\n    function unformatTime (string) {\n        var timeArray = string.split(':'),\n            seconds = 0;\n        // turn hours and minutes into seconds and add them all up\n        if (timeArray.length === 3) {\n            // hours\n            seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n            // minutes\n            seconds = seconds + (Number(timeArray[1]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n            // minutes\n            seconds = seconds + (Number(timeArray[0]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[1]);\n        }\n        return Number(seconds);\n    }\n\n    function formatNumber (n, format) {\n        var negP = false,\n            optDec = false,\n            abbr = '',\n            bytes = '',\n            ord = '',\n            abs = Math.abs(n._n);\n\n        // check if number is zero and a custom zero format has been set\n        if (n._n === 0 && zeroFormat !== null) {\n            return zeroFormat;\n        } else {\n            // see if we should use parentheses for negative number\n            if (format.indexOf('(') > -1) {\n                negP = true;\n                format = format.slice(1, -1);\n            }\n\n            // see if abbreviation is wanted\n            if (format.indexOf('a') > -1) {\n                // check for space before abbreviation\n                if (format.indexOf(' a') > -1) {\n                    abbr = ' ';\n                    format = format.replace(' a', '');\n                } else {\n                    format = format.replace('a', '');\n                }\n\n                if (abs >= Math.pow(10, 12)) {\n                    // trillion\n                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;\n                    n._n = n._n / Math.pow(10, 12);\n                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9)) {\n                    // billion\n                    abbr = abbr + languages[currentLanguage].abbreviations.billion;\n                    n._n = n._n / Math.pow(10, 9);\n                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6)) {\n                    // million\n                    abbr = abbr + languages[currentLanguage].abbreviations.million;\n                    n._n = n._n / Math.pow(10, 6);\n                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3)) {\n                    // thousand\n                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;\n                    n._n = n._n / Math.pow(10, 3);\n                }\n            }\n\n            // see if we are formatting bytes\n            if (format.indexOf('b') > -1) {\n                // check for space before\n                if (format.indexOf(' b') > -1) {\n                    bytes = ' ';\n                    format = format.replace(' b', '');\n                } else {\n                    format = format.replace('b', '');\n                }\n\n                var prefixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n                    min,\n                    max;\n\n                for (var power = 0; power <= prefixes.length; power++) {\n                    min = Math.pow(1024, power);\n                    max = Math.pow(1024, power+1);\n\n                    if (n._n >= min && n._n < max) {\n                        bytes = bytes + prefixes[power];\n                        if (min > 0) {\n                            n._n = n._n / min;\n                        }\n                        break;\n                    }\n                }\n            }\n\n            // see if ordinal is wanted\n            if (format.indexOf('o') > -1) {\n                // check for space before\n                if (format.indexOf(' o') > -1) {\n                    ord = ' ';\n                    format = format.replace(' o', '');\n                } else {\n                    format = format.replace('o', '');\n                }\n\n                ord = ord + languages[currentLanguage].ordinal(n._n);\n            }\n\n            if (format.indexOf('[.]') > -1) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            var w = n._n.toString().split('.')[0],\n                precision = format.split('.')[1],\n                thousands = format.indexOf(','),\n                d = '',\n                neg = false;\n\n            if (precision) {\n                if (precision.indexOf('[') > -1) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    d = toFixed(n._n, (precision[0].length + precision[1].length), precision[1].length);\n                } else {\n                    d = toFixed(n._n, precision.length);\n                }\n\n                w = d.split('.')[0];\n\n                if (d.split('.')[1].length) {\n                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];\n                } else {\n                    d = '';\n                }\n\n                if (optDec && Number(d.slice(1)) === 0) {\n                    d = '';\n                }\n            } else {\n                w = toFixed(n._n, null);\n            }\n\n            // format number\n            if (w.indexOf('-') > -1) {\n                w = w.slice(1);\n                neg = true;\n            }\n\n            if (thousands > -1) {\n                w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                w = '';\n            }\n\n            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');\n        }\n    }\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    numeral = function (input) {\n        if (numeral.isNumeral(input)) {\n            input = input.value();\n        } else if (!Number(input)) {\n            input = 0;\n        }\n\n        return new Numeral(Number(input));\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function (obj) {\n        return obj instanceof Numeral;\n    };\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    numeral.language = function (key, values) {\n        if (!key) {\n            return currentLanguage;\n        }\n\n        if (key && !values) {\n            if(!languages[key]) {\n                throw new Error('Unknown language : ' + key);\n            }\n            currentLanguage = key;\n        }\n\n        if (values || !languages[key]) {\n            loadLanguage(key, values);\n        }\n\n        return numeral;\n    };\n\n    numeral.language('en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    numeral.zeroFormat = function (format) {\n        if (typeof(format) === 'string') {\n            zeroFormat = format;\n        } else {\n            zeroFormat = null;\n        }\n    };\n\n    /************************************\n        Helpers\n    ************************************/\n\n    function loadLanguage(key, values) {\n        languages[key] = values;\n    }\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n\n    numeral.fn = Numeral.prototype = {\n\n        clone : function () {\n            return numeral(this);\n        },\n\n        format : function (inputString) {\n            return formatNumeral(this, inputString ? inputString : numeral.defaultFormat);\n        },\n\n        unformat : function (inputString) {\n            return unformatNumeral(this, inputString ? inputString : numeral.defaultFormat);\n        },\n\n        value : function () {\n            return this._n;\n        },\n\n        valueOf : function () {\n            return this._n;\n        },\n\n        set : function (value) {\n            this._n = Number(value);\n            return this;\n        },\n\n        add : function (value) {\n            this._n = this._n + Number(value);\n            return this;\n        },\n\n        subtract : function (value) {\n            this._n = this._n - Number(value);\n            return this;\n        },\n\n        multiply : function (value) {\n            this._n = this._n * Number(value);\n            return this;\n        },\n\n        divide : function (value) {\n            this._n = this._n / Number(value);\n            return this;\n        },\n\n        difference : function (value) {\n            var difference = this._n - Number(value);\n\n            if (difference < 0) {\n                difference = -difference;\n            }\n\n            return difference;\n        }\n\n    };\n\n    /************************************\n        Exposing Numeral\n    ************************************/\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = numeral;\n    }\n\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `numeral` as a global object via a string identifier,\n        // for Closure Compiler 'advanced' mode\n        this['numeral'] = numeral;\n    }\n\n    /*global define:false */\n    if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return numeral;\n        });\n    }\n}).call(this);\n"]}