{"version":3,"file":"jquery-cookie.min.js","sources":["jquery-cookie.js"],"names":["factory","define","amd","jQuery","$","encode","s","config","raw","encodeURIComponent","decode","decodeURIComponent","stringifyCookieValue","value","json","JSON","stringify","String","parseCookieValue","indexOf","slice","replace","pluses","parse","e","read","converter","isFunction","cookie","key","options","undefined","extend","defaults","expires","days","t","Date","setTime","document","toUTCString","path","domain","secure","join","result","cookies","split","i","l","length","parts","name","shift","removeCookie"],"mappings":"CAOC,SAAUA,GACe,kBAAXC,SAAyBA,OAAOC,IAEvCD,QAAQ,UAAWD,GAGnBA,EAAQG,SAEd,SAAUC,GAIR,QAASC,GAAOC,GACZ,MAAOC,GAAOC,IAAMF,EAAIG,mBAAmBH,GAG/C,QAASI,GAAOJ,GACZ,MAAOC,GAAOC,IAAMF,EAAIK,mBAAmBL,GAG/C,QAASM,GAAqBC,GAC1B,MAAOR,GAAOE,EAAOO,KAAOC,KAAKC,UAAUH,GAASI,OAAOJ,IAG/D,QAASK,GAAiBZ,GACC,IAAnBA,EAAEa,QAAQ,OAEVb,EAAIA,EAAEc,MAAM,EAAG,IAAIC,QAAQ,OAAQ,KAAKA,QAAQ,QAAS,MAG7D,KAKI,MADAf,GAAIK,mBAAmBL,EAAEe,QAAQC,EAAQ,MAClCf,EAAOO,KAAOC,KAAKQ,MAAMjB,GAAKA,EACvC,MAAMkB,KAGZ,QAASC,GAAKnB,EAAGoB,GACb,GAAIb,GAAQN,EAAOC,IAAMF,EAAIY,EAAiBZ,EAC9C,OAAOF,GAAEuB,WAAWD,GAAaA,EAAUb,GAASA,EA/BxD,GAAIS,GAAS,MAkCTf,EAASH,EAAEwB,OAAS,SAAUC,EAAKhB,EAAOiB,GAI1C,GAAcC,SAAVlB,IAAwBT,EAAEuB,WAAWd,GAAQ,CAG7C,GAFAiB,EAAU1B,EAAE4B,UAAWzB,EAAO0B,SAAUH,GAET,gBAApBA,GAAQI,QAAsB,CACrC,GAAIC,GAAOL,EAAQI,QAASE,EAAIN,EAAQI,QAAU,GAAIG,KACtDD,GAAEE,SAASF,EAAW,MAAPD,GAGnB,MAAQI,UAASX,QACbvB,EAAOwB,GAAM,IAAKjB,EAAqBC,GACvCiB,EAAQI,QAAU,aAAeJ,EAAQI,QAAQM,cAAgB,GACjEV,EAAQW,KAAU,UAAYX,EAAQW,KAAO,GAC7CX,EAAQY,OAAU,YAAcZ,EAAQY,OAAS,GACjDZ,EAAQa,OAAU,WAAa,IACjCC,KAAK,IAYX,IAAK,GAPDC,GAAShB,EAAME,UAKfe,EAAUP,SAASX,OAASW,SAASX,OAAOmB,MAAM,SAE7CC,EAAI,EAAGC,EAAIH,EAAQI,OAAYD,EAAJD,EAAOA,IAAK,CAC5C,GAAIG,GAAQL,EAAQE,GAAGD,MAAM,KACzBK,EAAO1C,EAAOyC,EAAME,SACpBzB,EAASuB,EAAMP,KAAK,IAExB,IAAIf,GAAOA,IAAQuB,EAAM,CAErBP,EAASpB,EAAKG,EAAQf,EACtB,OAICgB,GAAmCE,UAA3BH,EAASH,EAAKG,MACvBiB,EAAOO,GAAQxB,GAIvB,MAAOiB,GAGXtC,GAAO0B,YAEP7B,EAAEkD,aAAe,SAAUzB,EAAKC,GAC5B,MAAsBC,UAAlB3B,EAAEwB,OAAOC,IACF,GAIXzB,EAAEwB,OAAOC,EAAK,GAAIzB,EAAE4B,UAAWF,GAAWI,QAAS,OAC3C9B,EAAEwB,OAAOC","sourcesContent":["/*!\r\n * jQuery Cookie Plugin v1.4.0\r\n * https://github.com/carhartl/jquery-cookie\r\n *\r\n * Copyright 2013 Klaus Hartl\r\n * Released under the MIT license\r\n */\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as anonymous module.\r\n        define(['jquery'], factory);\r\n    } else {\r\n        // Browser globals.\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n\r\n    var pluses = /\\+/g;\r\n\r\n    function encode(s) {\r\n        return config.raw ? s : encodeURIComponent(s);\r\n    }\r\n\r\n    function decode(s) {\r\n        return config.raw ? s : decodeURIComponent(s);\r\n    }\r\n\r\n    function stringifyCookieValue(value) {\r\n        return encode(config.json ? JSON.stringify(value) : String(value));\r\n    }\r\n\r\n    function parseCookieValue(s) {\r\n        if (s.indexOf('\"') === 0) {\r\n            // This is a quoted cookie as according to RFC2068, unescape...\r\n            s = s.slice(1, -1).replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\r\n        }\r\n\r\n        try {\r\n            // Replace server-side written pluses with spaces.\r\n            // If we can't decode the cookie, ignore it, it's unusable.\r\n            // If we can't parse the cookie, ignore it, it's unusable.\r\n            s = decodeURIComponent(s.replace(pluses, ' '));\r\n            return config.json ? JSON.parse(s) : s;\r\n        } catch(e) {}\r\n    }\r\n\r\n    function read(s, converter) {\r\n        var value = config.raw ? s : parseCookieValue(s);\r\n        return $.isFunction(converter) ? converter(value) : value;\r\n    }\r\n\r\n    var config = $.cookie = function (key, value, options) {\r\n\r\n        // Write\r\n\r\n        if (value !== undefined && !$.isFunction(value)) {\r\n            options = $.extend({}, config.defaults, options);\r\n\r\n            if (typeof options.expires === 'number') {\r\n                var days = options.expires, t = options.expires = new Date();\r\n                t.setTime(+t + days * 864e+5);\r\n            }\r\n\r\n            return (document.cookie = [\r\n                encode(key), '=', stringifyCookieValue(value),\r\n                options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE\r\n                options.path    ? '; path=' + options.path : '',\r\n                options.domain  ? '; domain=' + options.domain : '',\r\n                options.secure  ? '; secure' : ''\r\n            ].join(''));\r\n        }\r\n\r\n        // Read\r\n\r\n        var result = key ? undefined : {};\r\n\r\n        // To prevent the for loop in the first place assign an empty array\r\n        // in case there are no cookies at all. Also prevents odd result when\r\n        // calling $.cookie().\r\n        var cookies = document.cookie ? document.cookie.split('; ') : [];\r\n\r\n        for (var i = 0, l = cookies.length; i < l; i++) {\r\n            var parts = cookies[i].split('=');\r\n            var name = decode(parts.shift());\r\n            var cookie = parts.join('=');\r\n\r\n            if (key && key === name) {\r\n                // If second argument (value) is a function it's a converter...\r\n                result = read(cookie, value);\r\n                break;\r\n            }\r\n\r\n            // Prevent storing a cookie that we couldn't decode.\r\n            if (!key && (cookie = read(cookie)) !== undefined) {\r\n                result[name] = cookie;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    config.defaults = {};\r\n\r\n    $.removeCookie = function (key, options) {\r\n        if ($.cookie(key) === undefined) {\r\n            return false;\r\n        }\r\n\r\n        // Must not alter options, thus extending a fresh object...\r\n        $.cookie(key, '', $.extend({}, options, { expires: -1 }));\r\n        return !$.cookie(key);\r\n    };\r\n\r\n}));"]}