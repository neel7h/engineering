{"version":3,"file":"backbone-marionette.min.js","sources":["backbone-marionette.js"],"names":["Backbone","ChildViewContainer","_","Container","initialViews","this","_views","_indexByModel","_indexByCollection","_indexByCustom","_updateLength","_addInitialViews","extend","prototype","add","view","customIndex","viewCid","cid","model","collection","findByModel","findByCid","findByCollection","col","findByCustom","index","findByIndex","values","remove","cust","key","hasOwnProperty","call","method","args","Array","slice","arguments","apply","each","isFunction","length","size","views","i","methods","concat","toArray","Wreqr","Marionette","Handlers","options","_wreqrHandlers","initialize","Model","Events","setHandlers","handlers","handler","name","context","isObject","callback","setHandler","config","trigger","hasHandler","getHandler","Error","removeHandler","removeAllHandlers","CommandStorage","_commands","getCommands","commandName","commands","command","instances","addCommand","push","clearCommands","Commands","storageType","constructor","_initializeStorage","on","_executeCommands","execute","storage","StorageType","RequestResponse","request","EventAggregator","EA","global","protoSlice","throwError","message","error","$","getOption","target","optionName","value","undefined","triggerMethod","getEventName","match","prefix","eventName","toUpperCase","splitter","event","methodName","replace","tail","MonitorDOMRefresh","handleShow","_isShown","triggerDOMRefresh","handleRender","_isRendered","listenTo","bindFromStrings","entity","evt","methodNames","split","bindToFunction","unbindFromStrings","stopListening","unbindToFunction","iterateEvents","bindings","functionCallback","stringCallback","bindEntityEvents","unbindEntityEvents","Callbacks","_deferred","Deferred","_callbacks","contextOverride","cb","ctx","done","run","resolve","reset","callbacks","Controller","close","unbind","Region","el","err","buildRegion","regionConfig","defaultRegionType","regionIsString","regionSelectorIsString","selector","regionTypeIsUndefined","regionType","regionIsType","RegionType","region","parentEl","getEl","find","show","ensureEl","isViewClosed","isClosed","isUndefined","$el","isDifferentView","currentView","render","open","empty","append","attachView","RegionManager","_regions","addRegions","regionDefinitions","defaults","regions","definition","addRegion","isString","hasSelector","_store","get","removeRegion","_remove","removeRegions","closeRegions","_setLength","TemplateCache","templateId","templateCaches","cachedTemplate","load","clear","compiledTemplate","template","loadTemplate","compileTemplate","html","rawTemplate","Renderer","data","templateFunc","View","bindAll","onShowCalled","getTemplate","mixinTemplateHelpers","templateHelpers","configureTriggers","triggers","triggerEvents","result","e","preventDefault","stopPropagation","delegateEvents","events","_delegateDOMEvents","combinedEvents","undelegateEvents","shouldClose","unbindUIElements","bindUIElements","ui","_uiBindings","keys","ItemView","serializeData","toJSON","items","CollectionView","itemViewEventPrefix","_initChildViewStorage","_initialEvents","addChildView","removeItemView","item","closeEmptyView","getItemView","indexOf","addItemView","children","child","triggerBeforeRender","triggerRendered","_renderChildren","closeChildren","showCollection","showEmptyView","EmptyView","_showingEmptyView","itemView","itemViewOptions","buildItemView","addChildViewEventForwarding","renderItemView","splice","appendHtml","ItemViewType","removeChildView","checkEmpty","collectionView","CompositeView","isRendered","resetItemViewContainer","renderModel","cv","iv","$container","getItemViewContainer","containerView","$itemViewContainer","container","itemViewContainer","Layout","_firstRender","_initializeRegions","_reInitializeRegions","regionManager","_buildRegions","that","_initRegionManager","AppRouter","Router","appRoutes","controller","processAppRoutes","routeNames","reverse","route","bind","Application","_initCallbacks","vent","reqres","submodules","addInitializer","initializer","start","_regionManager","module","unshift","Module","create","moduleName","app","_setupInitializersAndFinalizers","startWithParent","_initializerCallbacks","addFinalizer","_finalizerCallbacks","_isInitialized","mod","stop","addDefinition","moduleDefinition","customArgs","_runModuleDefinition","flatten","moduleNames","moduleDefinitions","parentModule","_getModule","_addModuleDefinition","def","fn","define","startWithParentIsConfigured"],"mappings":"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","sourcesContent":["// MarionetteJS (Backbone.Marionette)\n// ----------------------------------\n// v1.0.3\n//\n// Copyright (c)2013 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://marionettejs.com\n\n\n\n/*!\n * Includes BabySitter\n * https://github.com/marionettejs/backbone.babysitter/\n *\n * Includes Wreqr\n * https://github.com/marionettejs/backbone.wreqr/\n */\n\n// Backbone.BabySitter\n// -------------------\n// v0.0.5\n//\n// Copyright (c)2013 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://github.com/babysitterjs/backbone.babysitter\n\n// Backbone.ChildViewContainer\n// ---------------------------\n//\n// Provide a container to store, retrieve and\n// shut down child views.\n\nBackbone.ChildViewContainer = (function(Backbone, _){\n  \n  // Container Constructor\n  // ---------------------\n\n  var Container = function(initialViews){\n    this._views = {};\n    this._indexByModel = {};\n    this._indexByCollection = {};\n    this._indexByCustom = {};\n    this._updateLength();\n\n    this._addInitialViews(initialViews);\n  };\n\n  // Container Methods\n  // -----------------\n\n  _.extend(Container.prototype, {\n\n    // Add a view to this container. Stores the view\n    // by `cid` and makes it searchable by the model\n    // and/or collection of the view. Optionally specify\n    // a custom key to store an retrieve the view.\n    add: function(view, customIndex){\n      var viewCid = view.cid;\n\n      // store the view\n      this._views[viewCid] = view;\n\n      // index it by model\n      if (view.model){\n        this._indexByModel[view.model.cid] = viewCid;\n      }\n\n      // index it by collection\n      if (view.collection){\n        this._indexByCollection[view.collection.cid] = viewCid;\n      }\n\n      // index by custom\n      if (customIndex){\n        this._indexByCustom[customIndex] = viewCid;\n      }\n\n      this._updateLength();\n    },\n\n    // Find a view by the model that was attached to\n    // it. Uses the model's `cid` to find it, and\n    // retrieves the view by it's `cid` from the result\n    findByModel: function(model){\n      var viewCid = this._indexByModel[model.cid];\n      return this.findByCid(viewCid);\n    },\n\n    // Find a view by the collection that was attached to\n    // it. Uses the collection's `cid` to find it, and\n    // retrieves the view by it's `cid` from the result\n    findByCollection: function(col){\n      var viewCid = this._indexByCollection[col.cid];\n      return this.findByCid(viewCid);\n    },\n\n    // Find a view by a custom indexer.\n    findByCustom: function(index){\n      var viewCid = this._indexByCustom[index];\n      return this.findByCid(viewCid);\n    },\n\n    // Find by index. This is not guaranteed to be a\n    // stable index.\n    findByIndex: function(index){\n      return _.values(this._views)[index];\n    },\n\n    // retrieve a view by it's `cid` directly\n    findByCid: function(cid){\n      return this._views[cid];\n    },\n\n    // Remove a view\n    remove: function(view){\n      var viewCid = view.cid;\n\n      // delete model index\n      if (view.model){\n        delete this._indexByModel[view.model.cid];\n      }\n\n      // delete collection index\n      if (view.collection){\n        delete this._indexByCollection[view.collection.cid];\n      }\n\n      // delete custom index\n      var cust;\n\n      for (var key in this._indexByCustom){\n        if (this._indexByCustom.hasOwnProperty(key)){\n          if (this._indexByCustom[key] === viewCid){\n            cust = key;\n            break;\n          }\n        }\n      }\n\n      if (cust){\n        delete this._indexByCustom[cust];\n      }\n\n      // remove the view from the container\n      delete this._views[viewCid];\n\n      // update the length\n      this._updateLength();\n    },\n\n    // Call a method on every view in the container,\n    // passing parameters to the call method one at a\n    // time, like `function.call`.\n    call: function(method, args){\n      args = Array.prototype.slice.call(arguments, 1);\n      this.apply(method, args);\n    },\n\n    // Apply a method on every view in the container,\n    // passing parameters to the call method one at a\n    // time, like `function.apply`.\n    apply: function(method, args){\n      var view;\n\n      // fix for IE < 9\n      args = args || [];\n\n      _.each(this._views, function(view, key){\n        if (_.isFunction(view[method])){\n          view[method].apply(view, args);\n        }\n      });\n\n    },\n\n    // Update the `.length` attribute on this container\n    _updateLength: function(){\n      this.length = _.size(this._views);\n    },\n\n    // set up an initial list of views\n    _addInitialViews: function(views){\n      if (!views){ return; }\n\n      var view, i,\n          length = views.length;\n\n      for (i=0; i<length; i++){\n        view = views[i];\n        this.add(view);\n      }\n    }\n  });\n\n  // Borrowing this code from Backbone.Collection:\n  // http://backbonejs.org/docs/backbone.html#section-106\n  //\n  // Mix in methods from Underscore, for iteration, and other\n  // collection related features.\n  var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter', \n    'select', 'reject', 'every', 'all', 'some', 'any', 'include', \n    'contains', 'invoke', 'toArray', 'first', 'initial', 'rest', \n    'last', 'without', 'isEmpty', 'pluck'];\n\n  _.each(methods, function(method) {\n    Container.prototype[method] = function() {\n      var views = _.values(this._views);\n      var args = [views].concat(_.toArray(arguments));\n      return _[method].apply(_, args);\n    };\n  });\n\n  // return the public API\n  return Container;\n})(Backbone, _);\n\n// Backbone.Wreqr (Backbone.Marionette)\n// ----------------------------------\n// v0.2.0\n//\n// Copyright (c)2013 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://github.com/marionettejs/backbone.wreqr\n\n\nBackbone.Wreqr = (function(Backbone, Marionette, _){\n  \"use strict\";\n  var Wreqr = {};\n\n  // Handlers\n// --------\n// A registry of functions to call, given a name\n\nWreqr.Handlers = (function(Backbone, _){\n  \"use strict\";\n  \n  // Constructor\n  // -----------\n\n  var Handlers = function(options){\n    this.options = options;\n    this._wreqrHandlers = {};\n    \n    if (_.isFunction(this.initialize)){\n      this.initialize(options);\n    }\n  };\n\n  Handlers.extend = Backbone.Model.extend;\n\n  // Instance Members\n  // ----------------\n\n  _.extend(Handlers.prototype, Backbone.Events, {\n\n    // Add multiple handlers using an object literal configuration\n    setHandlers: function(handlers){\n      _.each(handlers, function(handler, name){\n        var context = null;\n\n        if (_.isObject(handler) && !_.isFunction(handler)){\n          context = handler.context;\n          handler = handler.callback;\n        }\n\n        this.setHandler(name, handler, context);\n      }, this);\n    },\n\n    // Add a handler for the given name, with an\n    // optional context to run the handler within\n    setHandler: function(name, handler, context){\n      var config = {\n        callback: handler,\n        context: context\n      };\n\n      this._wreqrHandlers[name] = config;\n\n      this.trigger(\"handler:add\", name, handler, context);\n    },\n\n    // Determine whether or not a handler is registered\n    hasHandler: function(name){\n      return !! this._wreqrHandlers[name];\n    },\n\n    // Get the currently registered handler for\n    // the specified name. Throws an exception if\n    // no handler is found.\n    getHandler: function(name){\n      var config = this._wreqrHandlers[name];\n\n      if (!config){\n        throw new Error(\"Handler not found for '\" + name + \"'\");\n      }\n\n      return function(){\n        var args = Array.prototype.slice.apply(arguments);\n        return config.callback.apply(config.context, args);\n      };\n    },\n\n    // Remove a handler for the specified name\n    removeHandler: function(name){\n      delete this._wreqrHandlers[name];\n    },\n\n    // Remove all handlers from this registry\n    removeAllHandlers: function(){\n      this._wreqrHandlers = {};\n    }\n  });\n\n  return Handlers;\n})(Backbone, _);\n\n  // Wreqr.CommandStorage\n// --------------------\n//\n// Store and retrieve commands for execution.\nWreqr.CommandStorage = (function(){\n  \"use strict\";\n\n  // Constructor function\n  var CommandStorage = function(options){\n    this.options = options;\n    this._commands = {};\n\n    if (_.isFunction(this.initialize)){\n      this.initialize(options);\n    }\n  };\n\n  // Instance methods\n  _.extend(CommandStorage.prototype, Backbone.Events, {\n\n    // Get an object literal by command name, that contains\n    // the `commandName` and the `instances` of all commands\n    // represented as an array of arguments to process\n    getCommands: function(commandName){\n      var commands = this._commands[commandName];\n\n      // we don't have it, so add it\n      if (!commands){\n\n        // build the configuration\n        commands = {\n          command: commandName, \n          instances: []\n        };\n\n        // store it\n        this._commands[commandName] = commands;\n      }\n\n      return commands;\n    },\n\n    // Add a command by name, to the storage and store the\n    // args for the command\n    addCommand: function(commandName, args){\n      var command = this.getCommands(commandName);\n      command.instances.push(args);\n    },\n\n    // Clear all commands for the given `commandName`\n    clearCommands: function(commandName){\n      var command = this.getCommands(commandName);\n      command.instances = [];\n    }\n  });\n\n  return CommandStorage;\n})();\n\n  // Wreqr.Commands\n// --------------\n//\n// A simple command pattern implementation. Register a command\n// handler and execute it.\nWreqr.Commands = (function(Wreqr){\n  \"use strict\";\n\n  return Wreqr.Handlers.extend({\n    // default storage type\n    storageType: Wreqr.CommandStorage,\n\n    constructor: function(options){\n      this.options = options || {};\n\n      this._initializeStorage(this.options);\n      this.on(\"handler:add\", this._executeCommands, this);\n\n      var args = Array.prototype.slice.call(arguments);\n      Wreqr.Handlers.prototype.constructor.apply(this, args);\n    },\n\n    // Execute a named command with the supplied args\n    execute: function(name, args){\n      name = arguments[0];\n      args = Array.prototype.slice.call(arguments, 1);\n\n      if (this.hasHandler(name)){\n        this.getHandler(name).apply(this, args);\n      } else {\n        this.storage.addCommand(name, args);\n      }\n\n    },\n\n    // Internal method to handle bulk execution of stored commands\n    _executeCommands: function(name, handler, context){\n      var command = this.storage.getCommands(name);\n\n      // loop through and execute all the stored command instances\n      _.each(command.instances, function(args){\n        handler.apply(context, args);\n      });\n\n      this.storage.clearCommands(name);\n    },\n\n    // Internal method to initialize storage either from the type's\n    // `storageType` or the instance `options.storageType`.\n    _initializeStorage: function(options){\n      var storage;\n\n      var StorageType = options.storageType || this.storageType;\n      if (_.isFunction(StorageType)){\n        storage = new StorageType();\n      } else {\n        storage = StorageType;\n      }\n\n      this.storage = storage;\n    }\n  });\n\n})(Wreqr);\n\n  // Wreqr.RequestResponse\n// ---------------------\n//\n// A simple request/response implementation. Register a\n// request handler, and return a response from it\nWreqr.RequestResponse = (function(Wreqr){\n  \"use strict\";\n\n  return Wreqr.Handlers.extend({\n    request: function(){\n      var name = arguments[0];\n      var args = Array.prototype.slice.call(arguments, 1);\n\n      return this.getHandler(name).apply(this, args);\n    }\n  });\n\n})(Wreqr);\n\n  // Event Aggregator\n// ----------------\n// A pub-sub object that can be used to decouple various parts\n// of an application through event-driven architecture.\n\nWreqr.EventAggregator = (function(Backbone, _){\n  \"use strict\";\n  var EA = function(){};\n\n  // Copy the `extend` function used by Backbone's classes\n  EA.extend = Backbone.Model.extend;\n\n  // Copy the basic Backbone.Events on to the event aggregator\n  _.extend(EA.prototype, Backbone.Events);\n\n  return EA;\n})(Backbone, _);\n\n\n  return Wreqr;\n})(Backbone, Backbone.Marionette, _);\n\nvar Marionette = (function(global, Backbone, _){\n  \"use strict\";\n\n  // Define and export the Marionette namespace\n  var Marionette = {};\n  Backbone.Marionette = Marionette;\n\n  // Get the DOM manipulator for later use\n  Marionette.$ = Backbone.$;\n\n// Helpers\n// -------\n\n// For slicing `arguments` in functions\nvar protoSlice = Array.prototype.slice;\nfunction slice(args) {\n  return protoSlice.call(args);\n}\n\nfunction throwError(message, name) {\n  var error = new Error(message);\n  error.name = name || 'Error';\n  throw error;\n}\n\n// Marionette.extend\n// -----------------\n\n// Borrow the Backbone `extend` method so we can use it as needed\nMarionette.extend = Backbone.Model.extend;\n\n// Marionette.getOption\n// --------------------\n\n// Retrieve an object, function or other value from a target\n// object or its `options`, with `options` taking precedence.\nMarionette.getOption = function(target, optionName){\n  if (!target || !optionName){ return; }\n  var value;\n\n  if (target.options && (optionName in target.options) && (target.options[optionName] !== undefined)){\n    value = target.options[optionName];\n  } else {\n    value = target[optionName];\n  }\n\n  return value;\n};\n\n// Trigger an event and a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method. \n//\n// `this.triggerMethod(\"foo:bar\") will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nMarionette.triggerMethod = (function(){\n  \n  // split the event name on the :\n  var splitter = /(^|:)(\\w)/gi;\n\n  // take the event section (\"section1:section2:section3\")\n  // and turn it in to uppercase name\n  function getEventName(match, prefix, eventName) { \n    return eventName.toUpperCase();\n  }\n\n  // actual triggerMethod name\n  var triggerMethod = function(event) {\n    // get the method name from the event name\n    var methodName = 'on' + event.replace(splitter, getEventName);\n    var method = this[methodName];\n\n    // trigger the event\n    this.trigger.apply(this, arguments);\n\n    // call the onMethodName if it exists\n    if (_.isFunction(method)) {\n      // pass all arguments, except the event name\n      return method.apply(this, _.tail(arguments));\n    }\n  };\n\n  return triggerMethod;\n})();\n\n// DOMRefresh\n// ----------\n//\n// Monitor a view's state, and after it has been rendered and shown\n// in the DOM, trigger a \"dom:refresh\" event every time it is\n// re-rendered.\n\nMarionette.MonitorDOMRefresh = (function(){\n  // track when the view has been rendered\n  function handleShow(view){\n    view._isShown = true;\n    triggerDOMRefresh(view);\n  }\n\n  // track when the view has been shown in the DOM,\n  // using a Marionette.Region (or by other means of triggering \"show\")\n  function handleRender(view){\n    view._isRendered = true;\n    triggerDOMRefresh(view);\n  }\n\n  // Trigger the \"dom:refresh\" event and corresponding \"onDomRefresh\" method\n  function triggerDOMRefresh(view){\n    if (view._isShown && view._isRendered){\n      if (_.isFunction(view.triggerMethod)){\n        view.triggerMethod(\"dom:refresh\");\n      }\n    }\n  }\n\n  // Export public API\n  return function(view){\n    view.listenTo(view, \"show\", function(){\n      handleShow(view);\n    });\n\n    view.listenTo(view, \"render\", function(){\n      handleRender(view);\n    });\n  };\n})();\n\n\n// Marionette.bindEntityEvents & unbindEntityEvents\n// ---------------------------\n//\n// These methods are used to bind/unbind a backbone \"entity\" (collection/model) \n// to methods on a target object. \n//\n// The first parameter, `target`, must have a `listenTo` method from the\n// EventBinder object.\n//\n// The second parameter is the entity (Backbone.Model or Backbone.Collection)\n// to bind the events from.\n//\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n// configuration. Multiple handlers can be separated by a space. A\n// function can be supplied instead of a string handler name. \n\n(function(Marionette){\n  \"use strict\";\n\n  // Bind the event to handlers specified as a string of\n  // handler names on the target object\n  function bindFromStrings(target, entity, evt, methods){\n    var methodNames = methods.split(/\\s+/);\n\n    _.each(methodNames,function(methodName) {\n\n      var method = target[methodName];\n      if(!method) {\n        throwError(\"Method '\"+ methodName +\"' was configured as an event handler, but does not exist.\");\n      }\n\n      target.listenTo(entity, evt, method, target);\n    });\n  }\n\n  // Bind the event to a supplied callback function\n  function bindToFunction(target, entity, evt, method){\n      target.listenTo(entity, evt, method, target);\n  }\n\n  // Bind the event to handlers specified as a string of\n  // handler names on the target object\n  function unbindFromStrings(target, entity, evt, methods){\n    var methodNames = methods.split(/\\s+/);\n\n    _.each(methodNames,function(methodName) {\n      var method = target[methodName];\n      target.stopListening(entity, evt, method, target);\n    });\n  }\n\n  // Bind the event to a supplied callback function\n  function unbindToFunction(target, entity, evt, method){\n      target.stopListening(entity, evt, method, target);\n  }\n\n  \n  // generic looping function\n  function iterateEvents(target, entity, bindings, functionCallback, stringCallback){\n    if (!entity || !bindings) { return; }\n\n    // allow the bindings to be a function\n    if (_.isFunction(bindings)){\n      bindings = bindings.call(target);\n    }\n\n    // iterate the bindings and bind them\n    _.each(bindings, function(methods, evt){\n\n      // allow for a function as the handler, \n      // or a list of event names as a string\n      if (_.isFunction(methods)){\n        functionCallback(target, entity, evt, methods);\n      } else {\n        stringCallback(target, entity, evt, methods);\n      }\n\n    });\n  }\n \n  // Export Public API\n  Marionette.bindEntityEvents = function(target, entity, bindings){\n    iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);\n  };\n\n  Marionette.unbindEntityEvents = function(target, entity, bindings){\n    iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);\n  };\n\n})(Marionette);\n\n\n// Callbacks\n// ---------\n\n// A simple way of managing a collection of callbacks\n// and executing them at a later point in time, using jQuery's\n// `Deferred` object.\nMarionette.Callbacks = function(){\n  this._deferred = Marionette.$.Deferred();\n  this._callbacks = [];\n};\n\n_.extend(Marionette.Callbacks.prototype, {\n\n  // Add a callback to be executed. Callbacks added here are\n  // guaranteed to execute, even if they are added after the \n  // `run` method is called.\n  add: function(callback, contextOverride){\n    this._callbacks.push({cb: callback, ctx: contextOverride});\n\n    this._deferred.done(function(context, options){\n      if (contextOverride){ context = contextOverride; }\n      callback.call(context, options);\n    });\n  },\n\n  // Run all registered callbacks with the context specified. \n  // Additional callbacks can be added after this has been run \n  // and they will still be executed.\n  run: function(options, context){\n    this._deferred.resolve(context, options);\n  },\n\n  // Resets the list of callbacks to be run, allowing the same list\n  // to be run multiple times - whenever the `run` method is called.\n  reset: function(){\n    var callbacks = this._callbacks;\n    this._deferred = Marionette.$.Deferred();\n    this._callbacks = [];\n    \n    _.each(callbacks, function(cb){\n      this.add(cb.cb, cb.ctx);\n    }, this);\n  }\n});\n\n\n// Marionette Controller\n// ---------------------\n//\n// A multi-purpose object to use as a controller for\n// modules and routers, and as a mediator for workflow\n// and coordination of other objects, views, and more.\nMarionette.Controller = function(options){\n  this.triggerMethod = Marionette.triggerMethod;\n  this.options = options || {};\n\n  if (_.isFunction(this.initialize)){\n    this.initialize(this.options);\n  }\n};\n\nMarionette.Controller.extend = Marionette.extend;\n\n// Controller Methods\n// --------------\n\n// Ensure it can trigger events with Backbone.Events\n_.extend(Marionette.Controller.prototype, Backbone.Events, {\n  close: function(){\n    this.stopListening();\n    this.triggerMethod(\"close\");\n    this.unbind();\n  }\n});\n\n// Region \n// ------\n//\n// Manage the visual regions of your composite application. See\n// http://lostechies.com/derickbailey/2011/12/12/composite-js-apps-regions-and-region-managers/\n\nMarionette.Region = function(options){\n  this.options = options || {};\n\n  this.el = Marionette.getOption(this, \"el\");\n\n  if (!this.el){\n    var err = new Error(\"An 'el' must be specified for a region.\");\n    err.name = \"NoElError\";\n    throw err;\n  }\n\n  if (this.initialize){\n    var args = Array.prototype.slice.apply(arguments);\n    this.initialize.apply(this, args);\n  }\n};\n\n\n// Region Type methods\n// -------------------\n\n_.extend(Marionette.Region, {\n\n  // Build an instance of a region by passing in a configuration object\n  // and a default region type to use if none is specified in the config.\n  //\n  // The config object should either be a string as a jQuery DOM selector,\n  // a Region type directly, or an object literal that specifies both\n  // a selector and regionType:\n  //\n  // ```js\n  // {\n  //   selector: \"#foo\",\n  //   regionType: MyCustomRegion\n  // }\n  // ```\n  //\n  buildRegion: function(regionConfig, defaultRegionType){\n    var regionIsString = (typeof regionConfig === \"string\");\n    var regionSelectorIsString = (typeof regionConfig.selector === \"string\");\n    var regionTypeIsUndefined = (typeof regionConfig.regionType === \"undefined\");\n    var regionIsType = (typeof regionConfig === \"function\");\n\n    if (!regionIsType && !regionIsString && !regionSelectorIsString) {\n      throw new Error(\"Region must be specified as a Region type, a selector string or an object with selector property\");\n    }\n\n    var selector, RegionType;\n   \n    // get the selector for the region\n    \n    if (regionIsString) {\n      selector = regionConfig;\n    } \n\n    if (regionConfig.selector) {\n      selector = regionConfig.selector;\n    }\n\n    // get the type for the region\n    \n    if (regionIsType){\n      RegionType = regionConfig;\n    }\n\n    if (!regionIsType && regionTypeIsUndefined) {\n      RegionType = defaultRegionType;\n    }\n\n    if (regionConfig.regionType) {\n      RegionType = regionConfig.regionType;\n    }\n    \n    // build the region instance\n    var region = new RegionType({\n      el: selector\n    });\n\n    // override the `getEl` function if we have a parentEl\n    // this must be overridden to ensure the selector is found\n    // on the first use of the region. if we try to assign the\n    // region's `el` to `parentEl.find(selector)` in the object\n    // literal to build the region, the element will not be\n    // guaranteed to be in the DOM already, and will cause problems\n    if (regionConfig.parentEl){\n\n      region.getEl = function(selector) {\n        var parentEl = regionConfig.parentEl;\n        if (_.isFunction(parentEl)){\n          parentEl = parentEl();\n        }\n        return parentEl.find(selector);\n      };\n    }\n\n    return region;\n  }\n\n});\n\n// Region Instance Methods\n// -----------------------\n\n_.extend(Marionette.Region.prototype, Backbone.Events, {\n\n  // Displays a backbone view instance inside of the region.\n  // Handles calling the `render` method for you. Reads content\n  // directly from the `el` attribute. Also calls an optional\n  // `onShow` and `close` method on your view, just after showing\n  // or just before closing the view, respectively.\n  show: function(view){\n\n    this.ensureEl();\n\n    var isViewClosed = view.isClosed || _.isUndefined(view.$el);\n\n    var isDifferentView = view !== this.currentView;\n\n    if (isDifferentView) {\n      this.close();\n    }\n\n    view.render();\n\n    if (isDifferentView || isViewClosed) {\n      this.open(view);\n    }\n    \n    this.currentView = view;\n\n    Marionette.triggerMethod.call(this, \"show\", view);\n    Marionette.triggerMethod.call(view, \"show\");\n  },\n\n  ensureEl: function(){\n    if (!this.$el || this.$el.length === 0){\n      this.$el = this.getEl(this.el);\n    }\n  },\n\n  // Override this method to change how the region finds the\n  // DOM element that it manages. Return a jQuery selector object.\n  getEl: function(selector){\n    return Marionette.$(selector);\n  },\n\n  // Override this method to change how the new view is\n  // appended to the `$el` that the region is managing\n  open: function(view){\n    this.$el.empty().append(view.el);\n  },\n\n  // Close the current view, if there is one. If there is no\n  // current view, it does nothing and returns immediately.\n  close: function(){\n    var view = this.currentView;\n    if (!view || view.isClosed){ return; }\n\n    // call 'close' or 'remove', depending on which is found\n    if (view.close) { view.close(); }\n    else if (view.remove) { view.remove(); }\n\n    Marionette.triggerMethod.call(this, \"close\");\n\n    delete this.currentView;\n  },\n\n  // Attach an existing view to the region. This \n  // will not call `render` or `onShow` for the new view, \n  // and will not replace the current HTML for the `el`\n  // of the region.\n  attachView: function(view){\n    this.currentView = view;\n  },\n\n  // Reset the region by closing any existing view and\n  // clearing out the cached `$el`. The next time a view\n  // is shown via this region, the region will re-query the\n  // DOM for the region's `el`.\n  reset: function(){\n    this.close();\n    delete this.$el;\n  }\n});\n\n// Copy the `extend` function used by Backbone's classes\nMarionette.Region.extend = Marionette.extend;\n\n// Marionette.RegionManager\n// ------------------------\n//\n// Manage one or more related `Marionette.Region` objects.\nMarionette.RegionManager = (function(Marionette){\n\n  var RegionManager = Marionette.Controller.extend({\n    constructor: function(options){\n      this._regions = {};\n      Marionette.Controller.prototype.constructor.call(this, options);\n    },\n\n    // Add multiple regions using an object literal, where\n    // each key becomes the region name, and each value is\n    // the region definition.\n    addRegions: function(regionDefinitions, defaults){\n      var regions = {};\n\n      _.each(regionDefinitions, function(definition, name){\n        if (typeof definition === \"string\"){\n          definition = { selector: definition };\n        }\n\n        if (definition.selector){\n          definition = _.defaults({}, definition, defaults);\n        }\n\n        var region = this.addRegion(name, definition);\n        regions[name] = region;\n      }, this);\n\n      return regions;\n    },\n\n    // Add an individual region to the region manager,\n    // and return the region instance\n    addRegion: function(name, definition){\n      var region;\n\n      var isObject = _.isObject(definition);\n      var isString = _.isString(definition);\n      var hasSelector = !!definition.selector;\n\n      if (isString || (isObject && hasSelector)){\n        region = Marionette.Region.buildRegion(definition, Marionette.Region);\n      } else if (_.isFunction(definition)){\n        region = Marionette.Region.buildRegion(definition, Marionette.Region);\n      } else {\n        region = definition;\n      }\n\n      this._store(name, region);\n      this.triggerMethod(\"region:add\", name, region);\n      return region;\n    },\n\n    // Get a region by name\n    get: function(name){\n      return this._regions[name];\n    },\n\n    // Remove a region by name\n    removeRegion: function(name){\n      var region = this._regions[name];\n      this._remove(name, region);\n    },\n\n    // Close all regions in the region manager, and\n    // remove them\n    removeRegions: function(){\n      _.each(this._regions, function(region, name){\n        this._remove(name, region);\n      }, this);\n    },\n\n    // Close all regions in the region manager, but\n    // leave them attached\n    closeRegions: function(){\n      _.each(this._regions, function(region, name){\n        region.close();\n      }, this);\n    },\n\n    // Close all regions and shut down the region\n    // manager entirely\n    close: function(){\n      this.removeRegions();\n      var args = Array.prototype.slice.call(arguments);\n      Marionette.Controller.prototype.close.apply(this, args);\n    },\n\n    // internal method to store regions\n    _store: function(name, region){\n      this._regions[name] = region;\n      this._setLength();\n    },\n\n    // internal method to remove a region\n    _remove: function(name, region){\n      region.close();\n      delete this._regions[name];\n      this._setLength();\n      this.triggerMethod(\"region:remove\", name, region);\n    },\n\n    // set the number of regions current held\n    _setLength: function(){\n      this.length = _.size(this._regions);\n    }\n\n  });\n\n  // Borrowing this code from Backbone.Collection:\n  // http://backbonejs.org/docs/backbone.html#section-106\n  //\n  // Mix in methods from Underscore, for iteration, and other\n  // collection related features.\n  var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter', \n    'select', 'reject', 'every', 'all', 'some', 'any', 'include', \n    'contains', 'invoke', 'toArray', 'first', 'initial', 'rest', \n    'last', 'without', 'isEmpty', 'pluck'];\n\n  _.each(methods, function(method) {\n    RegionManager.prototype[method] = function() {\n      var regions = _.values(this._regions);\n      var args = [regions].concat(_.toArray(arguments));\n      return _[method].apply(_, args);\n    };\n  });\n\n  return RegionManager;\n})(Marionette);\n\n\n// Template Cache\n// --------------\n\n// Manage templates stored in `<script>` blocks,\n// caching them for faster access.\nMarionette.TemplateCache = function(templateId){\n  this.templateId = templateId;\n};\n\n// TemplateCache object-level methods. Manage the template\n// caches from these method calls instead of creating \n// your own TemplateCache instances\n_.extend(Marionette.TemplateCache, {\n  templateCaches: {},\n\n  // Get the specified template by id. Either\n  // retrieves the cached version, or loads it\n  // from the DOM.\n  get: function(templateId){\n    var cachedTemplate = this.templateCaches[templateId];\n\n    if (!cachedTemplate){\n      cachedTemplate = new Marionette.TemplateCache(templateId);\n      this.templateCaches[templateId] = cachedTemplate;\n    }\n\n    return cachedTemplate.load();\n  },\n\n  // Clear templates from the cache. If no arguments\n  // are specified, clears all templates:\n  // `clear()`\n  //\n  // If arguments are specified, clears each of the \n  // specified templates from the cache:\n  // `clear(\"#t1\", \"#t2\", \"...\")`\n  clear: function(){\n    var i;\n    var args = slice(arguments);\n    var length = args.length;\n\n    if (length > 0){\n      for(i=0; i<length; i++){\n        delete this.templateCaches[args[i]];\n      }\n    } else {\n      this.templateCaches = {};\n    }\n  }\n});\n\n// TemplateCache instance methods, allowing each\n// template cache object to manage its own state\n// and know whether or not it has been loaded\n_.extend(Marionette.TemplateCache.prototype, {\n\n  // Internal method to load the template\n  load: function(){\n    // Guard clause to prevent loading this template more than once\n    if (this.compiledTemplate){\n      return this.compiledTemplate;\n    }\n\n    // Load the template and compile it\n    var template = this.loadTemplate(this.templateId);\n    this.compiledTemplate = this.compileTemplate(template);\n\n    return this.compiledTemplate;\n  },\n\n  // Load a template from the DOM, by default. Override\n  // this method to provide your own template retrieval\n  // For asynchronous loading with AMD/RequireJS, consider\n  // using a template-loader plugin as described here: \n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n  loadTemplate: function(templateId){\n    var template = Marionette.$(templateId).html();\n\n    if (!template || template.length === 0){\n      throwError(\"Could not find template: '\" + templateId + \"'\", \"NoTemplateError\");\n    }\n\n    return template;\n  },\n\n  // Pre-compile the template before caching it. Override\n  // this method if you do not need to pre-compile a template\n  // (JST / RequireJS for example) or if you want to change\n  // the template engine used (Handebars, etc).\n  compileTemplate: function(rawTemplate){\n    return _.template(rawTemplate);\n  }\n});\n\n\n// Renderer\n// --------\n\n// Render a template with data by passing in the template\n// selector and the data to render.\nMarionette.Renderer = {\n\n  // Render a template with data. The `template` parameter is\n  // passed to the `TemplateCache` object to retrieve the\n  // template function. Override this method to provide your own\n  // custom rendering and template handling for all of Marionette.\n  render: function(template, data){\n\n    if (!template) {\n      var error = new Error(\"Cannot render the template since it's false, null or undefined.\");\n      error.name = \"TemplateNotFoundError\";\n      throw error;\n    }\n\n    var templateFunc;\n    if (typeof template === \"function\"){\n      templateFunc = template;\n    } else {\n      templateFunc = Marionette.TemplateCache.get(template);\n    }\n\n    return templateFunc(data);\n  }\n};\n\n\n\n// Marionette.View\n// ---------------\n\n// The core view type that other Marionette views extend from.\nMarionette.View = Backbone.View.extend({\n\n  constructor: function(){\n    _.bindAll(this, \"render\");\n\n    var args = Array.prototype.slice.apply(arguments);\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    Marionette.MonitorDOMRefresh(this);\n    this.listenTo(this, \"show\", this.onShowCalled, this);\n  },\n\n  // import the \"triggerMethod\" to trigger events with corresponding\n  // methods if the method exists \n  triggerMethod: Marionette.triggerMethod,\n\n  // Get the template for this view\n  // instance. You can set a `template` attribute in the view\n  // definition or pass a `template: \"whatever\"` parameter in\n  // to the constructor options.\n  getTemplate: function(){\n    return Marionette.getOption(this, \"template\");\n  },\n\n  // Mix in template helper methods. Looks for a\n  // `templateHelpers` attribute, which can either be an\n  // object literal, or a function that returns an object\n  // literal. All methods and attributes from this object\n  // are copies to the object passed in.\n  mixinTemplateHelpers: function(target){\n    target = target || {};\n    var templateHelpers = this.templateHelpers;\n    if (_.isFunction(templateHelpers)){\n      templateHelpers = templateHelpers.call(this);\n    }\n    return _.extend(target, templateHelpers);\n  },\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  configureTriggers: function(){\n    if (!this.triggers) { return; }\n\n    var triggerEvents = {};\n\n    // Allow `triggers` to be configured as a function\n    var triggers = _.result(this, \"triggers\");\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    _.each(triggers, function(value, key){\n\n      // build the event handler function for the DOM event\n      triggerEvents[key] = function(e){\n\n        // stop the event in its tracks\n        if (e && e.preventDefault){ e.preventDefault(); }\n        if (e && e.stopPropagation){ e.stopPropagation(); }\n\n        // build the args for the event\n        var args = {\n          view: this,\n          model: this.model,\n          collection: this.collection\n        };\n\n        // trigger the event\n        this.triggerMethod(value, args);\n      };\n\n    }, this);\n\n    return triggerEvents;\n  },\n\n  // Overriding Backbone.View's delegateEvents to handle \n  // the `triggers`, `modelEvents`, and `collectionEvents` configuration\n  delegateEvents: function(events){\n    this._delegateDOMEvents(events);\n    Marionette.bindEntityEvents(this, this.model, Marionette.getOption(this, \"modelEvents\"));\n    Marionette.bindEntityEvents(this, this.collection, Marionette.getOption(this, \"collectionEvents\"));\n  },\n\n  // internal method to delegate DOM events and triggers\n  _delegateDOMEvents: function(events){\n    events = events || this.events;\n    if (_.isFunction(events)){ events = events.call(this); }\n\n    var combinedEvents = {};\n    var triggers = this.configureTriggers();\n    _.extend(combinedEvents, events, triggers);\n\n    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n  },\n\n  // Overriding Backbone.View's undelegateEvents to handle unbinding\n  // the `triggers`, `modelEvents`, and `collectionEvents` config\n  undelegateEvents: function(){\n    var args = Array.prototype.slice.call(arguments);\n    Backbone.View.prototype.undelegateEvents.apply(this, args);\n\n    Marionette.unbindEntityEvents(this, this.model, Marionette.getOption(this, \"modelEvents\"));\n    Marionette.unbindEntityEvents(this, this.collection, Marionette.getOption(this, \"collectionEvents\"));\n  },\n\n  // Internal method, handles the `show` event.\n  onShowCalled: function(){},\n\n  // Default `close` implementation, for removing a view from the\n  // DOM and unbinding it. Regions will call this method\n  // for you. You can specify an `onClose` method in your view to\n  // add custom code that is called after the view is closed.\n  close: function(){\n    if (this.isClosed) { return; }\n\n    // allow the close to be stopped by returning `false`\n    // from the `onBeforeClose` method\n    var shouldClose = this.triggerMethod(\"before:close\");\n    if (shouldClose === false){\n      return;\n    }\n\n    // mark as closed before doing the actual close, to\n    // prevent infinite loops within \"close\" event handlers\n    // that are trying to close other views\n    this.isClosed = true;\n    this.triggerMethod(\"close\");\n\n    // unbind UI elements\n    this.unbindUIElements();\n\n    // remove the view from the DOM\n    this.remove();\n  },\n\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n  // the associated jQuery selectors.\n  bindUIElements: function(){\n    if (!this.ui) { return; }\n\n    // store the ui hash in _uiBindings so they can be reset later\n    // and so re-rendering the view will be able to find the bindings\n    if (!this._uiBindings){\n      this._uiBindings = this.ui;\n    }\n\n    // get the bindings result, as a function or otherwise\n    var bindings = _.result(this, \"_uiBindings\");\n\n    // empty the ui so we don't have anything to start with\n    this.ui = {};\n\n    // bind each of the selectors\n    _.each(_.keys(bindings), function(key) {\n      var selector = bindings[key];\n      this.ui[key] = this.$(selector);\n    }, this);\n  },\n\n  // This method unbinds the elements specified in the \"ui\" hash\n  unbindUIElements: function(){\n    if (!this.ui){ return; }\n\n    // delete all of the existing ui bindings\n    _.each(this.ui, function($el, name){\n      delete this.ui[name];\n    }, this);\n\n    // reset the ui element to the original bindings configuration\n    this.ui = this._uiBindings;\n    delete this._uiBindings;\n  }\n});\n\n// Item View\n// ---------\n\n// A single item view implementation that contains code for rendering\n// with underscore.js templates, serializing the view's model or collection,\n// and calling several methods on extended views, such as `onRender`.\nMarionette.ItemView =  Marionette.View.extend({\n\n  // Serialize the model or collection for the view. If a model is\n  // found, `.toJSON()` is called. If a collection is found, `.toJSON()`\n  // is also called, but is used to populate an `items` array in the\n  // resulting data. If both are found, defaults to the model.\n  // You can override the `serializeData` method in your own view\n  // definition, to provide custom serialization for your view's data.\n  serializeData: function(){\n    var data = {};\n\n    if (this.model) {\n      data = this.model.toJSON();\n    }\n    else if (this.collection) {\n      data = { items: this.collection.toJSON() };\n    }\n\n    return data;\n  },\n\n  // Render the view, defaulting to underscore.js templates.\n  // You can override this in your view definition to provide\n  // a very specific rendering for your view. In general, though,\n  // you should override the `Marionette.Renderer` object to\n  // change how Marionette renders views.\n  render: function(){\n    this.isClosed = false;\n\n    this.triggerMethod(\"before:render\", this);\n    this.triggerMethod(\"item:before:render\", this);\n\n    var data = this.serializeData();\n    data = this.mixinTemplateHelpers(data);\n\n    var template = this.getTemplate();\n    var html = Marionette.Renderer.render(template, data);\n\n    this.$el.html(html);\n    this.bindUIElements();\n\n    this.triggerMethod(\"render\", this);\n    this.triggerMethod(\"item:rendered\", this);\n\n    return this;\n  },\n\n  // Override the default close event to add a few\n  // more events that are triggered.\n  close: function(){\n    if (this.isClosed){ return; }\n\n    this.triggerMethod('item:before:close');\n\n    Marionette.View.prototype.close.apply(this, slice(arguments));\n\n    this.triggerMethod('item:closed');\n  }\n});\n\n// Collection View\n// ---------------\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual ItemView for each model.\nMarionette.CollectionView = Marionette.View.extend({\n  // used as the prefix for item view events\n  // that are forwarded through the collectionview\n  itemViewEventPrefix: \"itemview\",\n\n  // constructor\n  constructor: function(options){\n    this._initChildViewStorage();\n\n    Marionette.View.prototype.constructor.apply(this, slice(arguments));\n\n    this._initialEvents();\n  },\n\n  // Configured the initial events that the collection view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents: function(){\n    if (this.collection){\n      this.listenTo(this.collection, \"add\", this.addChildView, this);\n      this.listenTo(this.collection, \"remove\", this.removeItemView, this);\n      this.listenTo(this.collection, \"reset\", this.render, this);\n    }\n  },\n\n  // Handle a child item added to the collection\n  addChildView: function(item, collection, options){\n    this.closeEmptyView();\n    var ItemView = this.getItemView(item);\n    var index = this.collection.indexOf(item);\n    this.addItemView(item, ItemView, index);\n  },\n\n  // Override from `Marionette.View` to guarantee the `onShow` method\n  // of child views is called.\n  onShowCalled: function(){\n    this.children.each(function(child){\n      Marionette.triggerMethod.call(child, \"show\");\n    });\n  },\n\n  // Internal method to trigger the before render callbacks\n  // and events\n  triggerBeforeRender: function(){\n    this.triggerMethod(\"before:render\", this);\n    this.triggerMethod(\"collection:before:render\", this);\n  },\n\n  // Internal method to trigger the rendered callbacks and\n  // events\n  triggerRendered: function(){\n    this.triggerMethod(\"render\", this);\n    this.triggerMethod(\"collection:rendered\", this);\n  },\n\n  // Render the collection of items. Override this method to\n  // provide your own implementation of a render function for\n  // the collection view.\n  render: function(){\n    this.isClosed = false;\n    this.triggerBeforeRender();\n    this._renderChildren();\n    this.triggerRendered();\n    return this;\n  },\n\n  // Internal method. Separated so that CompositeView can have\n  // more control over events being triggered, around the rendering\n  // process\n  _renderChildren: function(){\n    this.closeEmptyView();\n    this.closeChildren();\n\n    if (this.collection && this.collection.length > 0) {\n      this.showCollection();\n    } else {\n      this.showEmptyView();\n    }\n  },\n\n  // Internal method to loop through each item in the\n  // collection view and show it\n  showCollection: function(){\n    var ItemView;\n    this.collection.each(function(item, index){\n      ItemView = this.getItemView(item);\n      this.addItemView(item, ItemView, index);\n    }, this);\n  },\n\n  // Internal method to show an empty view in place of\n  // a collection of item views, when the collection is\n  // empty\n  showEmptyView: function(){\n    var EmptyView = Marionette.getOption(this, \"emptyView\");\n\n    if (EmptyView && !this._showingEmptyView){\n      this._showingEmptyView = true;\n      var model = new Backbone.Model();\n      this.addItemView(model, EmptyView, 0);\n    }\n  },\n\n  // Internal method to close an existing emptyView instance\n  // if one exists. Called when a collection view has been\n  // rendered empty, and then an item is added to the collection.\n  closeEmptyView: function(){\n    if (this._showingEmptyView){\n      this.closeChildren();\n      delete this._showingEmptyView;\n    }\n  },\n\n  // Retrieve the itemView type, either from `this.options.itemView`\n  // or from the `itemView` in the object definition. The \"options\"\n  // takes precedence.\n  getItemView: function(item){\n    var itemView = Marionette.getOption(this, \"itemView\");\n\n    if (!itemView){\n      throwError(\"An `itemView` must be specified\", \"NoItemViewError\");\n    }\n\n    return itemView;\n  },\n\n  // Render the child item's view and add it to the\n  // HTML for the collection view.\n  addItemView: function(item, ItemView, index){\n    // get the itemViewOptions if any were specified\n    var itemViewOptions = Marionette.getOption(this, \"itemViewOptions\");\n    if (_.isFunction(itemViewOptions)){\n      itemViewOptions = itemViewOptions.call(this, item, index);\n    }\n\n    // build the view \n    var view = this.buildItemView(item, ItemView, itemViewOptions);\n    \n    // set up the child view event forwarding\n    this.addChildViewEventForwarding(view);\n\n    // this view is about to be added\n    this.triggerMethod(\"before:item:added\", view);\n\n    // Store the child view itself so we can properly\n    // remove and/or close it later\n    this.children.add(view);\n\n    // Render it and show it\n    this.renderItemView(view, index);\n\n    // call the \"show\" method if the collection view\n    // has already been shown\n    if (this._isShown){\n      Marionette.triggerMethod.call(view, \"show\");\n    }\n\n    // this view was added\n    this.triggerMethod(\"after:item:added\", view);\n  },\n\n  // Set up the child view event forwarding. Uses an \"itemview:\"\n  // prefix in front of all forwarded events.\n  addChildViewEventForwarding: function(view){\n    var prefix = Marionette.getOption(this, \"itemViewEventPrefix\");\n\n    // Forward all child item view events through the parent,\n    // prepending \"itemview:\" to the event name\n    this.listenTo(view, \"all\", function(){\n      var args = slice(arguments);\n      args[0] = prefix + \":\" + args[0];\n      args.splice(1, 0, view);\n\n      Marionette.triggerMethod.apply(this, args);\n    }, this);\n  },\n\n  // render the item view\n  renderItemView: function(view, index) {\n    view.render();\n    this.appendHtml(this, view, index);\n  },\n\n  // Build an `itemView` for every model in the collection.\n  buildItemView: function(item, ItemViewType, itemViewOptions){\n    var options = _.extend({model: item}, itemViewOptions);\n    return new ItemViewType(options);\n  },\n\n  // get the child view by item it holds, and remove it\n  removeItemView: function(item){\n    var view = this.children.findByModel(item);\n    this.removeChildView(view);\n    this.checkEmpty();\n  },\n\n  // Remove the child view and close it\n  removeChildView: function(view){\n\n    // shut down the child view properly,\n    // including events that the collection has from it\n    if (view){\n      this.stopListening(view);\n\n      // call 'close' or 'remove', depending on which is found\n      if (view.close) { view.close(); }\n      else if (view.remove) { view.remove(); }\n\n      this.children.remove(view);\n    }\n\n    this.triggerMethod(\"item:removed\", view);\n  },\n\n  // helper to show the empty view if the collection is empty\n  checkEmpty: function() {\n    // check if we're empty now, and if we are, show the\n    // empty view\n    if (!this.collection || this.collection.length === 0){\n      this.showEmptyView();\n    }\n  },\n\n  // Append the HTML to the collection's `el`.\n  // Override this method to do something other\n  // then `.append`.\n  appendHtml: function(collectionView, itemView, index){\n    collectionView.$el.append(itemView.el);\n  },\n\n  // Internal method to set up the `children` object for\n  // storing all of the child views\n  _initChildViewStorage: function(){\n    this.children = new Backbone.ChildViewContainer();\n  },\n\n  // Handle cleanup and other closing needs for\n  // the collection of views.\n  close: function(){\n    if (this.isClosed){ return; }\n\n    this.triggerMethod(\"collection:before:close\");\n    this.closeChildren();\n    this.triggerMethod(\"collection:closed\");\n\n    Marionette.View.prototype.close.apply(this, slice(arguments));\n  },\n\n  // Close the child views that this collection view\n  // is holding on to, if any\n  closeChildren: function(){\n    this.children.each(function(child){\n      this.removeChildView(child);\n    }, this);\n    this.checkEmpty();\n  }\n});\n\n\n// Composite View\n// --------------\n\n// Used for rendering a branch-leaf, hierarchical structure.\n// Extends directly from CollectionView and also renders an\n// an item view as `modelView`, for the top leaf\nMarionette.CompositeView = Marionette.CollectionView.extend({\n\n  // Configured the initial events that the composite view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents: function(){\n    if (this.collection){\n      this.listenTo(this.collection, \"add\", this.addChildView, this);\n      this.listenTo(this.collection, \"remove\", this.removeItemView, this);\n      this.listenTo(this.collection, \"reset\", this._renderChildren, this);\n    }\n  },\n\n  // Retrieve the `itemView` to be used when rendering each of\n  // the items in the collection. The default is to return\n  // `this.itemView` or Marionette.CompositeView if no `itemView`\n  // has been defined\n  getItemView: function(item){\n    var itemView = Marionette.getOption(this, \"itemView\") || this.constructor;\n\n    if (!itemView){\n      throwError(\"An `itemView` must be specified\", \"NoItemViewError\");\n    }\n\n    return itemView;\n  },\n\n  // Serialize the collection for the view. \n  // You can override the `serializeData` method in your own view\n  // definition, to provide custom serialization for your view's data.\n  serializeData: function(){\n    var data = {};\n\n    if (this.model){\n      data = this.model.toJSON();\n    }\n\n    return data;\n  },\n\n  // Renders the model once, and the collection once. Calling\n  // this again will tell the model's view to re-render itself\n  // but the collection will not re-render.\n  render: function(){\n    this.isRendered = true;\n    this.isClosed = false;\n    this.resetItemViewContainer();\n\n    this.triggerBeforeRender();\n    var html = this.renderModel();\n    this.$el.html(html);\n    // the ui bindings is done here and not at the end of render since they \n    // will not be available until after the model is rendered, but should be\n    // available before the collection is rendered.\n    this.bindUIElements();\n    this.triggerMethod(\"composite:model:rendered\");\n\n    this._renderChildren();\n\n    this.triggerMethod(\"composite:rendered\");\n    this.triggerRendered();\n    return this;\n  },\n\n  _renderChildren: function(){\n    if (this.isRendered){\n      Marionette.CollectionView.prototype._renderChildren.call(this);\n      this.triggerMethod(\"composite:collection:rendered\");\n    }\n  },\n\n  // Render an individual model, if we have one, as\n  // part of a composite view (branch / leaf). For example:\n  // a treeview.\n  renderModel: function(){\n    var data = {};\n    data = this.serializeData();\n    data = this.mixinTemplateHelpers(data);\n\n    var template = this.getTemplate();\n    return Marionette.Renderer.render(template, data);\n  },\n\n  // Appends the `el` of itemView instances to the specified\n  // `itemViewContainer` (a jQuery selector). Override this method to\n  // provide custom logic of how the child item view instances have their\n  // HTML appended to the composite view instance.\n  appendHtml: function(cv, iv, index){\n    var $container = this.getItemViewContainer(cv);\n    $container.append(iv.el);\n  },\n\n  // Internal method to ensure an `$itemViewContainer` exists, for the\n  // `appendHtml` method to use.\n  getItemViewContainer: function(containerView){\n    if (\"$itemViewContainer\" in containerView){\n      return containerView.$itemViewContainer;\n    }\n\n    var container;\n    if (containerView.itemViewContainer){\n\n      var selector = _.result(containerView, \"itemViewContainer\");\n      container = containerView.$(selector);\n      if (container.length <= 0) {\n        throwError(\"The specified `itemViewContainer` was not found: \" + containerView.itemViewContainer, \"ItemViewContainerMissingError\");\n      }\n\n    } else {\n      container = containerView.$el;\n    }\n\n    containerView.$itemViewContainer = container;\n    return container;\n  },\n\n  // Internal method to reset the `$itemViewContainer` on render\n  resetItemViewContainer: function(){\n    if (this.$itemViewContainer){\n      delete this.$itemViewContainer;\n    }\n  }\n});\n\n\n// Layout\n// ------\n\n// Used for managing application layouts, nested layouts and\n// multiple regions within an application or sub-application.\n//\n// A specialized view type that renders an area of HTML and then\n// attaches `Region` instances to the specified `regions`.\n// Used for composite view management and sub-application areas.\nMarionette.Layout = Marionette.ItemView.extend({\n  regionType: Marionette.Region,\n  \n  // Ensure the regions are available when the `initialize` method\n  // is called.\n  constructor: function (options) {\n    options = options || {};\n\n    this._firstRender = true;\n    this._initializeRegions(options);\n    \n    Marionette.ItemView.call(this, options);\n  },\n\n  // Layout's render will use the existing region objects the\n  // first time it is called. Subsequent calls will close the\n  // views that the regions are showing and then reset the `el`\n  // for the regions to the newly rendered DOM elements.\n  render: function(){\n\n    if (this._firstRender){\n      // if this is the first render, don't do anything to\n      // reset the regions\n      this._firstRender = false;\n    } else if (this.isClosed){\n      // a previously closed layout means we need to \n      // completely re-initialize the regions\n      this._initializeRegions();\n    } else {\n      // If this is not the first render call, then we need to \n      // re-initializing the `el` for each region\n      this._reInitializeRegions();\n    }\n\n    var args = Array.prototype.slice.apply(arguments);\n    var result = Marionette.ItemView.prototype.render.apply(this, args);\n\n    return result;\n  },\n\n  // Handle closing regions, and then close the view itself.\n  close: function () {\n    if (this.isClosed){ return; }\n    this.regionManager.close();\n    var args = Array.prototype.slice.apply(arguments);\n    Marionette.ItemView.prototype.close.apply(this, args);\n  },\n\n  // Add a single region, by name, to the layout\n  addRegion: function(name, definition){\n    var regions = {};\n    regions[name] = definition;\n    return this.addRegions(regions)[name];\n  },\n\n  // Add multiple regions as a {name: definition, name2: def2} object literal\n  addRegions: function(regions){\n    this.regions = _.extend(this.regions || {}, regions);\n    return this._buildRegions(regions);\n  },\n\n  // Remove a single region from the Layout, by name\n  removeRegion: function(name){\n    return this.regionManager.removeRegion(name);\n  },\n\n  // internal method to build regions\n  _buildRegions: function(regions){\n    var that = this;\n\n    var defaults = {\n      parentEl: function(){ return that.$el; }\n    };\n\n    return this.regionManager.addRegions(regions, defaults);\n  },\n\n  // Internal method to initialize the regions that have been defined in a\n  // `regions` attribute on this layout. \n  _initializeRegions: function (options) {\n    var regions;\n    this._initRegionManager();\n\n    if (_.isFunction(this.regions)) {\n      regions = this.regions(options);\n    } else {\n      regions = this.regions || {};\n    }\n\n    this.addRegions(regions);\n  },\n\n  // Internal method to re-initialize all of the regions by updating the `el` that\n  // they point to\n  _reInitializeRegions: function(){\n    this.regionManager.closeRegions();\n    this.regionManager.each(function(region){\n      region.reset();\n    });\n  },\n\n  // Internal method to initialize the region manager\n  // and all regions in it\n  _initRegionManager: function(){\n    this.regionManager = new Marionette.RegionManager();\n\n    this.listenTo(this.regionManager, \"region:add\", function(name, region){\n      this[name] = region;\n      this.trigger(\"region:add\", name, region);\n    });\n\n    this.listenTo(this.regionManager, \"region:remove\", function(name, region){\n      delete this[name];\n      this.trigger(\"region:remove\", name, region);\n    });\n  }\n});\n\n\n// AppRouter\n// ---------\n\n// Reduce the boilerplate code of handling route events\n// and then calling a single method on another object.\n// Have your routers configured to call the method on\n// your object, directly.\n//\n// Configure an AppRouter with `appRoutes`.\n//\n// App routers can only take one `controller` object. \n// It is recommended that you divide your controller\n// objects in to smaller pieces of related functionality\n// and have multiple routers / controllers, instead of\n// just one giant router and controller.\n//\n// You can also add standard routes to an AppRouter.\n\nMarionette.AppRouter = Backbone.Router.extend({\n\n  constructor: function(options){\n    Backbone.Router.prototype.constructor.apply(this, slice(arguments));\n\n    this.options = options;\n\n    if (this.appRoutes){\n      var controller = Marionette.getOption(this, \"controller\");\n      this.processAppRoutes(controller, this.appRoutes);\n    }\n  },\n\n  // Internal method to process the `appRoutes` for the\n  // router, and turn them in to routes that trigger the\n  // specified method on the specified `controller`.\n  processAppRoutes: function(controller, appRoutes) {\n    var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n    _.each(routeNames, function(route) {\n      var methodName = appRoutes[route];\n      var method = controller[methodName];\n\n      if (!method) {\n        throw new Error(\"Method '\" + methodName + \"' was not found on the controller\");\n      }\n\n      this.route(route, methodName, _.bind(method, controller));\n    }, this);\n  }\n});\n\n\n// Application\n// -----------\n\n// Contain and manage the composite application as a whole.\n// Stores and starts up `Region` objects, includes an\n// event aggregator as `app.vent`\nMarionette.Application = function(options){\n  this._initRegionManager();\n  this._initCallbacks = new Marionette.Callbacks();\n  this.vent = new Backbone.Wreqr.EventAggregator();\n  this.commands = new Backbone.Wreqr.Commands();\n  this.reqres = new Backbone.Wreqr.RequestResponse();\n  this.submodules = {};\n\n  _.extend(this, options);\n\n  this.triggerMethod = Marionette.triggerMethod;\n};\n\n_.extend(Marionette.Application.prototype, Backbone.Events, {\n  // Command execution, facilitated by Backbone.Wreqr.Commands\n  execute: function(){\n    var args = Array.prototype.slice.apply(arguments);\n    this.commands.execute.apply(this.commands, args);\n  },\n\n  // Request/response, facilitated by Backbone.Wreqr.RequestResponse\n  request: function(){\n    var args = Array.prototype.slice.apply(arguments);\n    return this.reqres.request.apply(this.reqres, args);\n  },\n\n  // Add an initializer that is either run at when the `start`\n  // method is called, or run immediately if added after `start`\n  // has already been called.\n  addInitializer: function(initializer){\n    this._initCallbacks.add(initializer);\n  },\n\n  // kick off all of the application's processes.\n  // initializes all of the regions that have been added\n  // to the app, and runs all of the initializer functions\n  start: function(options){\n    this.triggerMethod(\"initialize:before\", options);\n    this._initCallbacks.run(options, this);\n    this.triggerMethod(\"initialize:after\", options);\n\n    this.triggerMethod(\"start\", options);\n  },\n\n  // Add regions to your app. \n  // Accepts a hash of named strings or Region objects\n  // addRegions({something: \"#someRegion\"})\n  // addRegions({something: Region.extend({el: \"#someRegion\"}) });\n  addRegions: function(regions){\n    return this._regionManager.addRegions(regions);\n  },\n\n  // Removes a region from your app.\n  // Accepts the regions name\n  // removeRegion('myRegion')\n  removeRegion: function(region) {\n    this._regionManager.removeRegion(region);\n  },\n\n  // Create a module, attached to the application\n  module: function(moduleNames, moduleDefinition){\n    // slice the args, and add this application object as the\n    // first argument of the array\n    var args = slice(arguments);\n    args.unshift(this);\n\n    // see the Marionette.Module object for more information\n    return Marionette.Module.create.apply(Marionette.Module, args);\n  },\n\n  // Internal method to set up the region manager\n  _initRegionManager: function(){\n    this._regionManager = new Marionette.RegionManager();\n\n    this.listenTo(this._regionManager, \"region:add\", function(name, region){\n      this[name] = region;\n    });\n\n    this.listenTo(this._regionManager, \"region:remove\", function(name, region){\n      delete this[name];\n    });\n  }\n});\n\n// Copy the `extend` function used by Backbone's classes\nMarionette.Application.extend = Marionette.extend;\n\n// Module\n// ------\n\n// A simple module system, used to create privacy and encapsulation in\n// Marionette applications\nMarionette.Module = function(moduleName, app){\n  this.moduleName = moduleName;\n\n  // store sub-modules\n  this.submodules = {};\n\n  this._setupInitializersAndFinalizers();\n\n  // store the configuration for this module\n  this.app = app;\n  this.startWithParent = true;\n\n  this.triggerMethod = Marionette.triggerMethod;\n};\n\n// Extend the Module prototype with events / listenTo, so that the module\n// can be used as an event aggregator or pub/sub.\n_.extend(Marionette.Module.prototype, Backbone.Events, {\n\n  // Initializer for a specific module. Initializers are run when the\n  // module's `start` method is called.\n  addInitializer: function(callback){\n    this._initializerCallbacks.add(callback);\n  },\n\n  // Finalizers are run when a module is stopped. They are used to teardown\n  // and finalize any variables, references, events and other code that the\n  // module had set up.\n  addFinalizer: function(callback){\n    this._finalizerCallbacks.add(callback);\n  },\n\n  // Start the module, and run all of its initializers\n  start: function(options){\n    // Prevent re-starting a module that is already started\n    if (this._isInitialized){ return; }\n\n    // start the sub-modules (depth-first hierarchy)\n    _.each(this.submodules, function(mod){\n      // check to see if we should start the sub-module with this parent\n      if (mod.startWithParent){\n        mod.start(options);\n      }\n    });\n\n    // run the callbacks to \"start\" the current module\n    this.triggerMethod(\"before:start\", options);\n\n    this._initializerCallbacks.run(options, this);\n    this._isInitialized = true;\n\n    this.triggerMethod(\"start\", options);\n  },\n\n  // Stop this module by running its finalizers and then stop all of\n  // the sub-modules for this module\n  stop: function(){\n    // if we are not initialized, don't bother finalizing\n    if (!this._isInitialized){ return; }\n    this._isInitialized = false;\n\n    Marionette.triggerMethod.call(this, \"before:stop\");\n\n    // stop the sub-modules; depth-first, to make sure the\n    // sub-modules are stopped / finalized before parents\n    _.each(this.submodules, function(mod){ mod.stop(); });\n\n    // run the finalizers\n    this._finalizerCallbacks.run(undefined,this);\n\n    // reset the initializers and finalizers\n    this._initializerCallbacks.reset();\n    this._finalizerCallbacks.reset();\n\n    Marionette.triggerMethod.call(this, \"stop\");\n  },\n\n  // Configure the module with a definition function and any custom args\n  // that are to be passed in to the definition function\n  addDefinition: function(moduleDefinition, customArgs){\n    this._runModuleDefinition(moduleDefinition, customArgs);\n  },\n\n  // Internal method: run the module definition function with the correct\n  // arguments\n  _runModuleDefinition: function(definition, customArgs){\n    if (!definition){ return; }\n\n    // build the correct list of arguments for the module definition\n    var args = _.flatten([\n      this,\n      this.app,\n      Backbone,\n      Marionette,\n      Marionette.$, _,\n      customArgs\n    ]);\n\n    definition.apply(this, args);\n  },\n\n  // Internal method: set up new copies of initializers and finalizers.\n  // Calling this method will wipe out all existing initializers and\n  // finalizers.\n  _setupInitializersAndFinalizers: function(){\n    this._initializerCallbacks = new Marionette.Callbacks();\n    this._finalizerCallbacks = new Marionette.Callbacks();\n  }\n});\n\n// Type methods to create modules\n_.extend(Marionette.Module, {\n\n  // Create a module, hanging off the app parameter as the parent object.\n  create: function(app, moduleNames, moduleDefinition){\n    var module = app;\n\n    // get the custom args passed in after the module definition and\n    // get rid of the module name and definition function\n    var customArgs = slice(arguments);\n    customArgs.splice(0, 3);\n\n    // split the module names and get the length\n    moduleNames = moduleNames.split(\".\");\n    var length = moduleNames.length;\n\n    // store the module definition for the last module in the chain\n    var moduleDefinitions = [];\n    moduleDefinitions[length-1] = moduleDefinition;\n\n    // Loop through all the parts of the module definition\n    _.each(moduleNames, function(moduleName, i){\n      var parentModule = module;\n      module = this._getModule(parentModule, moduleName, app);\n      this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);\n    }, this);\n\n    // Return the last module in the definition chain\n    return module;\n  },\n\n  _getModule: function(parentModule, moduleName, app, def, args){\n    // Get an existing module of this name if we have one\n    var module = parentModule[moduleName];\n\n    if (!module){\n      // Create a new module if we don't have one\n      module = new Marionette.Module(moduleName, app);\n      parentModule[moduleName] = module;\n      // store the module on the parent\n      parentModule.submodules[moduleName] = module;\n    }\n\n    return module;\n  },\n\n  _addModuleDefinition: function(parentModule, module, def, args){\n    var fn; \n    var startWithParent;\n\n    if (_.isFunction(def)){\n      // if a function is supplied for the module definition\n      fn = def;\n      startWithParent = true;\n\n    } else if (_.isObject(def)){\n      // if an object is supplied\n      fn = def.define;\n      startWithParent = def.startWithParent;\n      \n    } else {\n      // if nothing is supplied\n      startWithParent = true;\n    }\n\n    // add module definition if needed\n    if (fn){\n      module.addDefinition(fn, args);\n    }\n\n    // `and` the two together, ensuring a single `false` will prevent it\n    // from starting with the parent\n    module.startWithParent = module.startWithParent && startWithParent;\n\n    // setup auto-start if needed\n    if (module.startWithParent && !module.startWithParentIsConfigured){\n\n      // only configure this once\n      module.startWithParentIsConfigured = true;\n\n      // add the module initializer config\n      parentModule.addInitializer(function(options){\n        if (module.startWithParent){\n          module.start(options);\n        }\n      });\n\n    }\n\n  }\n});\n\n\n\n  return Marionette;\n})(this, Backbone, _);\n"]}